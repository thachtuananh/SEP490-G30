import { useEffect, useRef, useState, useContext } from "react";
import useClickOutside from "../../hooks/useClickOutside";
import AddLocationModal from "./AddLocationModal";
import styles from "../../assets/CSS/Service/SelectLocationModal.module.css";
import { AuthContext } from "../../context/AuthContext";

const SelectLocationModal = ({ isShowLocationModal, setIsShowLocationModal, setCustomerAddressId }) => {
  const [isShowAddLocationModal, setIsShowAddLocationModal] = useState(false);
  const [locations, setLocations] = useState([]);
  const listLocationRef = useRef(null);
  const { token, customerId } = useContext(AuthContext);

  useClickOutside({
    setState: setIsShowLocationModal,
    refElm: listLocationRef,
  });

  useEffect(() => {
    document.body.style.overflow = "hidden";
    return () => (document.body.style.overflow = "auto");
  }, []);

  // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch ƒë·ªãa ch·ªâ
  useEffect(() => {
    const fetchAddresses = async () => {
      try {
        if (!token) {
          console.error("Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
          return;
        }

        const response = await fetch(`http://localhost:8080/api/customer/${customerId}/addresses`, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });

        if (response.ok) {
          const data = await response.json();
          setLocations(data);
        } else {
          console.error("L·ªói khi l·∫•y danh s√°ch ƒë·ªãa ch·ªâ");
        }
      } catch (error) {
        console.error("L·ªói khi g·ªçi API:", error);
      }
    };

    if (customerId) fetchAddresses();
  }, [customerId]);

  // üõ† **H√†m c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh**
  const setDefaultAddress = async (addressId) => {
    try {
      const response = await fetch(`http://localhost:8080/api/customer/${customerId}/addresses/${addressId}/set-default`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });

      if (response.ok) {
        setLocations((prevLocations) =>
          prevLocations.map((loc) => ({
            ...loc,
            is_current: loc.id === addressId, // ƒê√°nh d·∫•u ƒë·ªãa ch·ªâ ƒë∆∞·ª£c ch·ªçn l√† m·∫∑c ƒë·ªãnh
          }))
        );
        setCustomerAddressId(addressId);
        console.log("C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh th√†nh c√¥ng");
      } else {
        console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh");
      }
    } catch (error) {
      console.error("L·ªói khi g·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh:", error);
    }
  };

  return (
    <div className={styles.overlay}>
      {!isShowAddLocationModal && (
        <div className={styles.modal} ref={listLocationRef}>
          <div className={styles.header}>
            <div>
              <p className={styles.title}>S·ªï ƒë·ªãa ch·ªâ</p>
              <p className={styles.subtitle}>Qu·∫£n l√Ω th√¥ng tin ƒë·ªãa ch·ªâ giao h√†ng c·ªßa b·∫°n</p>
            </div>
            <button className={styles.addButton} onClick={() => setIsShowAddLocationModal(true)}>
              <span className={styles.plus}>+</span> Th√™m ƒë·ªãa ch·ªâ m·ªõi
            </button>
          </div>

          {locations.length > 0 ? (
            locations.map((location) => (
              <div key={location.id}>
                <div className={styles.addressItem}>
                  <div>
                    <div className={styles.addressHeader}>
                      <p className={styles.name}>{location.customer.full_name}</p>
                      <p className={styles.phone}>(+84) {location.customer.phone}</p>
                      {location.is_current && <p className={styles.defaultTag}>M·∫∑c ƒë·ªãnh</p>}
                    </div>
                    <div className={styles.addressDetail}>{location.address}</div>
                  </div>
                  <div className={styles.actions}>
                    <button
                      className={styles.selectButton}
                      style={{
                        cursor: 'pointer'
                      }}
                      onClick={() => {
                        setDefaultAddress(location.id);
                        setCustomerAddressId(location.id);

                      }}
                    >
                      Ch·ªçn
                    </button>

                    <p className={styles.checkboxWrapper}>
                      Ch·ªçn l√†m m·∫∑c ƒë·ªãnh
                      <input
                        type="checkbox"
                        checked={location.is_current}
                        onChange={() => setDefaultAddress(location.id)}
                      />
                    </p>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <p className={styles.noAddress}>Ch∆∞a c√≥ ƒë·ªãa ch·ªâ n√†o.</p>
          )}
        </div>
      )}

      {isShowAddLocationModal && <AddLocationModal setIsShowAddLocationModal={setIsShowAddLocationModal} />}
    </div>
  );
};

export default SelectLocationModal;