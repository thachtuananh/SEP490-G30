package com.example.homecleanapi.Gemini;

import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.*;

@RestController
@Tag(name = "GEMINI")
@RequestMapping("/consultation")
public class GeminiConsultationController {

    @Autowired
    private GeminiService geminiService;

    @Autowired
    private PdfExtractorService pdfExtractorService;

    private final Map<String, String> uploadedDocs = new HashMap<>();

    @PostMapping(value = "/uploadDocument", consumes = "multipart/form-data")
    public String uploadDocument(@RequestPart("file") MultipartFile file) throws IOException {
        String contentType = file.getContentType();
        if (contentType == null || !contentType.equals("application/pdf")) {
            return "L·ªói: Vui l√≤ng t·∫£i l√™n file PDF.";
        }

        String fileName = file.getOriginalFilename();
        if (fileName == null || !fileName.toLowerCase().endsWith(".pdf")) {
            return "L·ªói: File t·∫£i l√™n kh√¥ng ph·∫£i l√† file PDF.";
        }

        File tempFile = File.createTempFile("upload-", ".pdf");
        file.transferTo(tempFile);

        String content = pdfExtractorService.extractTextFromPdf(tempFile);

        uploadedDocs.put(fileName, content);

        return "T·∫£i l√™n file PDF th√†nh c√¥ng!";
    }

    @PostMapping("/ask")
    public String askConsultation(@RequestBody Map<String, String> request) {
        String question = request.get("question");

        if (uploadedDocs.isEmpty()) {
            return "Hi·ªán t·∫°i ch∆∞a c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c t·∫£i l√™n ƒë·ªÉ tham kh·∫£o.";
        }

        // G·ªôp to√†n b·ªô n·ªôi dung c√°c file PDF ƒë√£ upload
        StringBuilder allContent = new StringBuilder();
        for (Map.Entry<String, String> entry : uploadedDocs.entrySet()) {
            allContent.append("üìÑ File: ").append(entry.getKey()).append("\n");
            allContent.append(entry.getValue()).append("\n\n");
        }

        String prompt = String.format("""
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªØu √≠ch v√† th√¥ng minh. D∆∞·ªõi ƒë√¢y l√† c√°c ƒëo·∫°n n·ªôi dung v·ªÅ h·ªá th·ªëng houseclean. H√£y s·ª≠ d·ª•ng **ch√≠nh x√°c nh·ªØng th√¥ng tin trong t√†i li·ªáu n√†y** ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n, r√µ r√†ng, ng·∫Øn g·ªçn, gi·ªëng nh∆∞ nh√¢n vi√™n t∆∞ v·∫•n.

N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin c·∫ßn thi·∫øt trong t√†i li·ªáu, h√£y tr·∫£ l·ªùi: **"Xin l·ªói, v·∫•n ƒë·ªÅ n√†y n·∫±m ngo√†i ph·∫°m vi c·ªßa t√¥i. H√£y li√™n h·ªá v·ªõi admin ƒë·ªÉ bi·∫øt th√™m th√¥ng tin chi ti·∫øt."**

---

üìÑ N·ªôi dung t√†i li·ªáu:
%s

C√¢u h·ªèi: %s
""", allContent, question);

        return geminiService.askGemini(prompt);
    }



    @PostMapping("/deleteCollection")
    public String clearCache() {
        uploadedDocs.clear();
        return "ƒê√£ x√≥a t·∫•t c·∫£ t√†i li·ªáu ƒë√£ t·∫£i l√™n.";
    }
}
