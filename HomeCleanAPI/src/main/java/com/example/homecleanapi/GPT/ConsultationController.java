package com.example.homecleanapi.GPT;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

import org.springframework.web.multipart.MultipartFile;
import java.io.File;
import java.io.IOException;

@RestController
@RequestMapping("/consultation")
public class ConsultationController {

    @Autowired
    private QdrantService qdrantService;

    @Autowired
    private ChatGPTService chatGPTService;

    @Autowired
    private PdfExtractorService pdfExtractorService;

    @PostMapping("/uploadDocument")
    public String uploadDocument(@RequestParam("file") MultipartFile file) throws IOException {
        File tempFile = File.createTempFile("upload-", ".pdf");
        file.transferTo(tempFile);

        // Tr√≠ch n·ªôi dung vƒÉn b·∫£n t·ª´ PDF
        String content = pdfExtractorService.extractTextFromPdf(tempFile);

        // L∆∞u v√†o Qdrant
        return storeDocument("documents", UUID.randomUUID().toString(), content);
    }

    @PostMapping("/ask")
    public String askConsultation(@RequestBody String question) {
        // T·∫°o collection n·∫øu ch∆∞a t·ªìn t·∫°i
        qdrantService.createCollectionIfNotExist("documents");

        // Chuy·ªÉn c√¢u h·ªèi th√†nh vector (b·∫°n s·∫Ω s·ª≠ d·ª•ng m·ªôt m√¥ h√¨nh ƒë·ªÉ th·ª±c hi·ªán ƒëi·ªÅu n√†y)
        List<Float> queryVector = convertTextToVector(question);

        // T√¨m ki·∫øm trong Qdrant
        String rawQdrant = qdrantService.searchVector("documents", queryVector);
        if (!rawQdrant.startsWith("{")) {
            return "Kh√¥ng truy xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Qdrant: " + rawQdrant;
        }
        String qdrantResponse = qdrantService.extractTopPayloadTexts(rawQdrant, 3);


        System.out.println("N·ªôi dung tr√≠ch t·ª´ Qdrant g·ª≠i v√†o GPT:\n" + qdrantResponse);
        System.out.println("RAW QDRANT RESPONSE:\n" + rawQdrant);
        System.out.println("Vector truy v·∫•n:\n" + queryVector);





        if (qdrantResponse == null || qdrantResponse.isEmpty()) {
            return "No relevant information found from the database.";
        }

        // T·∫°o prompt cho ChatGPT ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi
        String prompt = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªØu √≠ch v√† th√¥ng minh. D∆∞·ªõi ƒë√¢y l√† c√°c ƒëo·∫°n n·ªôi dung ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ t√†i li·ªáu n·ªôi b·ªô. H√£y s·ª≠ d·ª•ng **ch√≠nh x√°c nh·ªØng th√¥ng tin trong t√†i li·ªáu n√†y** ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n, r√µ r√†ng, ng·∫Øn g·ªçn.

N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin c·∫ßn thi·∫øt trong t√†i li·ªáu, h√£y tr·∫£ l·ªùi: **"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin n√†y trong t√†i li·ªáu."**

---

üìÑ N·ªôi dung t√†i li·ªáu:
%s

C√¢u h·ªèi: %s
""".formatted(qdrantResponse, question);

        return chatGPTService.askChatGPT(prompt);
    }


    public List<Float> convertTextToVector(String text) {
        String prompt = "Convert the following text to a vector: " + text;
        String response = chatGPTService.askChatGPT(prompt);
        return chatGPTService.getEmbedding(text);

    }


    public String storeDocument(String collectionName, String documentId, String documentText) {
        // Chuy·ªÉn vƒÉn b·∫£n th√†nh vector
        qdrantService.createCollectionIfNotExist("documents");

        List<Float> vector = convertTextToVector(documentText);

        // T·∫°o metadata (v√≠ d·ª•: th√™m th√¥ng tin v·ªÅ t√†i li·ªáu)
        Map<String, Object> metadata = new HashMap<>();
        metadata.put("documentText", documentText);  // L∆∞u vƒÉn b·∫£n v√†o metadata

        System.out.println("Vector l∆∞u document:\n" + vector);

        // L∆∞u vector v√†o Qdrant v·ªõi metadata
        return qdrantService.storeVector(collectionName, vector, documentId, metadata);
    }

    @PostMapping("/deleteCollection")
    public String deleteCollection() {
        return qdrantService.deleteCollection("documents");
    }





}
