Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># db connection\nspring.datasource.url=jdbc:postgresql://localhost:5432/SEP490_v1\nspring.datasource.username=sep490\nspring.datasource.password=123456\nspring.jpa.show-sql=true\nspring.jpa.generate-ddl=true\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true\n\n#email\nspring.mail.host=smtp.gmail.com\nspring.mail.port=587\nspring.mail.username=ohohoh20052002@gmail.com\nspring.mail.password=wwbn fkkw apkz hndd\nspring.mail.properties.mail.smtp.auth=true\nspring.mail.properties.mail.smtp.starttls.enable=true\n\n#swagger\nspringdoc.swagger-ui.path=/api-docs\nspring.mvc.converters.preferred-json-mapper=jackson\nspringdoc.default-produces-media-type=application/json\nspringdoc.api-docs.enabled=true\nspringdoc.swagger-ui.enabled=true\n\n# Config Server\nserver.port=8080\n\n# RabbitMQ\nspring.rabbitmq.host=localhost\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=guest\nspring.rabbitmq.password=guest\n\n# Redis\nspring.data.redis.host=localhost\nspring.data.redis.port=6379\nspring.data.redis.password=guest\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/resources/application.properties	(date 1743672482143)
@@ -1,5 +1,5 @@
 # db connection
-spring.datasource.url=jdbc:postgresql://localhost:5432/SEP490_v1
+spring.datasource.url=jdbc:postgresql://localhost:5432/sep490_v1
 spring.datasource.username=sep490
 spring.datasource.password=123456
 spring.jpa.show-sql=true
@@ -7,11 +7,13 @@
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
 
+spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
+
 #email
 spring.mail.host=smtp.gmail.com
 spring.mail.port=587
-spring.mail.username=ohohoh20052002@gmail.com
-spring.mail.password=wwbn fkkw apkz hndd
+spring.mail.username=anhtthe161427@fpt.edu.vn
+spring.mail.password=giue kcct jkbz zcuh
 spring.mail.properties.mail.smtp.auth=true
 spring.mail.properties.mail.smtp.starttls.enable=true
 
Index: src/main/java/com/example/homecleanapi/controllers/CustomerJobController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.controllers;\r\n\r\nimport com.example.homecleanapi.dtos.BookJobRequest;\r\nimport com.example.homecleanapi.models.CustomerAddresses;\r\nimport com.example.homecleanapi.services.CleanerJobService;\r\nimport com.example.homecleanapi.services.JobService;\r\n\r\nimport io.swagger.v3.oas.annotations.security.SecurityRequirement;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@Tag(name = \"Customer Job API\")\r\n@SecurityRequirement(name = \"BearerAuth\")\r\n@RequestMapping(\"/api/customer\")\r\npublic class CustomerJobController {\r\n\r\n\t@Autowired\r\n\tprivate JobService jobService;\r\n\r\n\t@Autowired\r\n\tprivate CleanerJobService cleanerJobService;\r\n\r\n\t// API cho customer tạo job\r\n\t@PostMapping(value = \"/{customerId}/createjob\")\r\n\tpublic ResponseEntity<Map<String, Object>> createJob(@RequestBody BookJobRequest request,\r\n\t\t\t@PathVariable Long customerId) {\r\n\t\tMap<String, Object> response = jobService.bookJob(customerId, request);\r\n\t\treturn ResponseEntity.status(HttpStatus.CREATED).body(response);\r\n\t}\r\n\r\n\t// Xem danh sách cleaner đã apply cho job\r\n\t@GetMapping(value = \"/applications/{customerId}/{jobId}\")\r\n\tpublic ResponseEntity<List<Map<String, Object>>> getJobApplications(\r\n\t    @PathVariable Long customerId, \r\n\t    @PathVariable Long jobId) {\r\n\t    \r\n\t    // Truyền customerId và jobId vào phương thức để xác thực\r\n\t    List<Map<String, Object>> jobApplications = cleanerJobService.getApplicationsForJob(jobId, customerId);\r\n\t    \r\n\t    if (jobApplications.isEmpty()) {\r\n\t        return ResponseEntity.status(404).body(List.of(Map.of(\"message\", \"No applications found\")));\r\n\t    }\r\n\t    \r\n\t    return ResponseEntity.ok(jobApplications);\r\n\t}\r\n\r\n\r\n\r\n\t@PostMapping(value = \"/accept-job/{jobId}/cleaner/{cleanerId}/customer/{customerId}\")\r\n\tpublic ResponseEntity<Map<String, Object>> acceptCleanerForJob(@PathVariable Long jobId,\r\n\t\t\t@PathVariable Long cleanerId, @PathVariable Long customerId) {\r\n\t\t// Gọi service để accept cleaner cho job\r\n\t\tMap<String, Object> response = cleanerJobService.acceptOrRejectApplication(jobId, cleanerId, customerId,\r\n\t\t\t\t\"accept\");\r\n\t\treturn ResponseEntity.ok(response);\r\n\t}\r\n\r\n\t@PostMapping(value = \"/reject-job/{jobId}/cleaner/{cleanerId}/customer/{customerId}\")\r\n\tpublic ResponseEntity<Map<String, Object>> rejectCleanerForJob(@PathVariable Long jobId,\r\n\t\t\t@PathVariable Long cleanerId, @PathVariable Long customerId) {\r\n\t\t// Gọi service để reject cleaner cho job\r\n\t\tMap<String, Object> response = cleanerJobService.acceptOrRejectApplication(jobId, cleanerId, customerId,\r\n\t\t\t\t\"reject\");\r\n\t\treturn ResponseEntity.ok(response);\r\n\t}\r\n\r\n\t// Chuyển trạng thái job sang STARTED\r\n\t@PostMapping(value = \"/job/start/{jobId}/{customerId}\")\r\n\tpublic ResponseEntity<Map<String, Object>> startJob(\r\n\t        @PathVariable(\"jobId\") Long jobId,\r\n\t        @PathVariable(\"customerId\") Long customerId) { \r\n\t    Map<String, Object> response = jobService.updateJobStatusToStarted(jobId, customerId);\r\n\t    return ResponseEntity.ok(response);\r\n\t}\r\n\r\n\t\r\n\t@GetMapping(\"/{customerId}/addresses\")\r\n    public ResponseEntity<List<CustomerAddresses>> getCustomerAddresses(@PathVariable(\"customerId\") Integer customerId) {\r\n        List<CustomerAddresses> addresses = jobService.getAddressesByCustomerId(customerId);\r\n        if (addresses.isEmpty()) {\r\n            return ResponseEntity.noContent().build();\r\n        }\r\n        return ResponseEntity.ok(addresses);\r\n    }\r\n\t\r\n\t@PutMapping(\"/{customerId}/addresses/{addressId}/set-default\")\r\n    public ResponseEntity<String> setDefaultAddress(@PathVariable(\"customerId\") Integer customerId,\r\n                                                    @PathVariable(\"addressId\") Integer addressId) {\r\n        boolean success = jobService.setDefaultAddressForCustomer(customerId, addressId);\r\n        if (success) {\r\n            return ResponseEntity.ok(\"Default address updated successfully\");\r\n        } else {\r\n            return ResponseEntity.status(400).body(\"Failed to update default address\");\r\n        }\r\n    }\r\n\t\r\n\t// Chuyển trạng thái công việc sang DONE sau khi Cleaner đã hoàn thành\r\n\t@PostMapping(value = \"/job/done/customer/{jobId}\")\r\n    public ResponseEntity<Map<String, Object>> markJobAsDone(@PathVariable(\"jobId\") Long jobId) {\r\n        Map<String, Object> response = jobService.updateJobStatusToDone(jobId); \r\n        return ResponseEntity.ok(response);\r\n    }\r\n\t\r\n\t@GetMapping(\"/{customerId}/listjobsbook\")\r\n    public ResponseEntity<List<Map<String, Object>>> getBookedJobs(@PathVariable(\"customerId\") Long customerId) {\r\n        List<Map<String, Object>> bookedJobs = jobService.getBookedJobsForCustomer(customerId);\r\n        if (bookedJobs.isEmpty()) {\r\n            return ResponseEntity.noContent().build();\r\n        }\r\n        return ResponseEntity.ok(bookedJobs);\r\n    }\r\n\t\r\n\t@GetMapping(\"/viewdetailcleaner/{cleanerId}\")\r\n\tpublic ResponseEntity<Map<String, Object>> getCleanerDetailnonedk(@PathVariable Long cleanerId) {\r\n\t    Map<String, Object> cleanerDetails = cleanerJobService.getCleanerDetailnone(cleanerId);\r\n\r\n\t    if (cleanerDetails.containsKey(\"message\")) {\r\n\t        return ResponseEntity.status(404).body(cleanerDetails);  \r\n\t    }\r\n\r\n\t    return ResponseEntity.ok(cleanerDetails);  \r\n\t}\r\n\r\n\r\n\t\r\n\t// hủy job\r\n\t@PostMapping(\"/{customerId}/cancel-job/{jobId}\")\r\n    public ResponseEntity<Map<String, Object>> cancelJob(@PathVariable(\"customerId\") Long customerId, @PathVariable(\"jobId\") Long jobId) {\r\n        Map<String, Object> response = jobService.cancelJobForCustomer(customerId, jobId);\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\t\r\n\t// LUỒNG CODE 2 \r\n\t\r\n//\t@GetMapping(\"/cleaners/online\")\r\n//    public ResponseEntity<List<Map<String, Object>>> getOnlineCleaners() {\r\n//        List<Map<String, Object>> onlineCleaners = cleanerJobService.getOnlineCleaners();\r\n//\r\n//        if (onlineCleaners.isEmpty()) {\r\n//            return ResponseEntity.status(404).body(List.of(Map.of(\"message\", \"No online cleaners found\")));\r\n//        }\r\n//\r\n//        return ResponseEntity.ok(onlineCleaners);\r\n//    }\r\n\t@GetMapping(\"/cleaners/online\")\r\n\tpublic ResponseEntity<List<Map<String, Object>>> getOnlineCleaners() {\r\n\t    // Lấy thông tin các cleaner đang online từ WebSocket handler\r\n\t    List<Map<String, Object>> onlineCleaners = cleanerJobService.getOnlineCleaners();\r\n\r\n\t    if (onlineCleaners.isEmpty()) {\r\n\t        return ResponseEntity.status(404).body(List.of(Map.of(\"message\", \"No online cleaners found\")));\r\n\t    }\r\n\r\n\t    return ResponseEntity.ok(onlineCleaners);\r\n\t}\r\n\r\n\t\r\n\t@GetMapping(\"/viewdetailcleaneron/{cleanerId}\")\r\n    public ResponseEntity<Map<String, Object>> getCleanerDetails(@PathVariable Long cleanerId) {\r\n        Map<String, Object> cleanerDetails = cleanerJobService.getCleanerDetails(cleanerId);\r\n\r\n        if (cleanerDetails.containsKey(\"message\")) {\r\n            return ResponseEntity.status(404).body(cleanerDetails);\r\n        }\r\n\r\n        return ResponseEntity.ok(cleanerDetails);\r\n    }\r\n\t\r\n\t@PostMapping(value = \"/{customerId}/bookjob/{cleanerId}\")\r\n    public ResponseEntity<Map<String, Object>> bookJobForCleaner(\r\n    \t\t@PathVariable Long customerId, \r\n            @PathVariable Long cleanerId, \r\n            @RequestBody BookJobRequest request) {\r\n\r\n        Map<String, Object> response = cleanerJobService.bookJobForCleaner(customerId, cleanerId, request);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(response);\r\n    }\r\n\t\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/controllers/CustomerJobController.java b/src/main/java/com/example/homecleanapi/controllers/CustomerJobController.java
--- a/src/main/java/com/example/homecleanapi/controllers/CustomerJobController.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/controllers/CustomerJobController.java	(date 1743672482109)
@@ -1,10 +1,13 @@
 package com.example.homecleanapi.controllers;
 
 import com.example.homecleanapi.dtos.BookJobRequest;
+import com.example.homecleanapi.dtos.CleanerSessionInfo;
+import com.example.homecleanapi.dtos.FeedbackRequest;
 import com.example.homecleanapi.models.CustomerAddresses;
 import com.example.homecleanapi.services.CleanerJobService;
 import com.example.homecleanapi.services.JobService;
 
+
 import io.swagger.v3.oas.annotations.security.SecurityRequirement;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
@@ -13,6 +16,7 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -138,6 +142,8 @@
         return ResponseEntity.ok(response);
     }
 	
+	
+	
 	// LUỒNG CODE 2 
 	
 //	@GetMapping("/cleaners/online")
@@ -150,17 +156,9 @@
 //
 //        return ResponseEntity.ok(onlineCleaners);
 //    }
-	@GetMapping("/cleaners/online")
-	public ResponseEntity<List<Map<String, Object>>> getOnlineCleaners() {
-	    // Lấy thông tin các cleaner đang online từ WebSocket handler
-	    List<Map<String, Object>> onlineCleaners = cleanerJobService.getOnlineCleaners();
+	
 
-	    if (onlineCleaners.isEmpty()) {
-	        return ResponseEntity.status(404).body(List.of(Map.of("message", "No online cleaners found")));
-	    }
 
-	    return ResponseEntity.ok(onlineCleaners);
-	}
 
 	
 	@GetMapping("/viewdetailcleaneron/{cleanerId}")
Index: src/main/java/com/example/homecleanapi/controllers/CleanerJobController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.controllers;\r\n\r\nimport com.example.homecleanapi.dtos.JobSummaryDTO;\r\nimport com.example.homecleanapi.services.CleanerJobService;\r\n\r\nimport io.swagger.v3.oas.annotations.security.SecurityRequirement;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\n\r\nimport com.example.homecleanapi.services.JobService;\r\nimport com.example.homecleanapi.utils.JwtUtils;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n@Tag(name = \"Cleaner Job API\")\r\n@RestController\r\n@SecurityRequirement(name = \"BearerAuth\")\r\n@RequestMapping(\"/api/cleaner\")\r\npublic class CleanerJobController {\r\n\r\n    @Autowired\r\n    private CleanerJobService cleanerJobService;\r\n\r\n    // Xem danh sách các công việc \"Open\"\r\n    @GetMapping(value = \"/jobs\")\r\n    public ResponseEntity<List<JobSummaryDTO>> getOpenJobs() {\r\n        List<JobSummaryDTO> openJobs = cleanerJobService.getOpenJobs();\r\n        return ResponseEntity.ok(openJobs);\r\n    }\r\n\r\n    // Xem chi tiết công việc\r\n    @GetMapping(value = \"/job/{jobId}\")\r\n    public ResponseEntity<Map<String, Object>> getJobDetails(@PathVariable(\"jobId\") Long jobId) {\r\n        Map<String, Object> jobDetails = cleanerJobService.getJobDetails(jobId);\r\n        if (jobDetails == null) {\r\n            return ResponseEntity.status(404).body(null);\r\n        }\r\n        return ResponseEntity.ok(jobDetails);\r\n    }\r\n\r\n    // Cleaner apply vào job\r\n    @PostMapping(value = \"/apply-job/{jobId}\")\r\n    public ResponseEntity<Map<String, Object>> applyForJob(@PathVariable(\"jobId\") Long jobId) {\r\n        Map<String, Object> response = cleanerJobService.applyForJob(jobId);\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n\r\n    // Chuyển trạng thái công việc sang ARRIVED\r\n    @PostMapping(value = \"/job/arrived/{jobId}\")\r\n    public ResponseEntity<Map<String, Object>> setJobArrived(@PathVariable(\"jobId\") Long jobId) {\r\n        Map<String, Object> response = cleanerJobService.updateJobStatusToArrived(jobId);\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n\r\n    // Chuyển trạng thái công việc sang COMPLETED\r\n    @PostMapping(value = \"/job/completed/{jobId}\")\r\n    public ResponseEntity<Map<String, Object>> completeJob(@PathVariable(\"jobId\") Long jobId) {\r\n        Map<String, Object> response = cleanerJobService.updateJobStatusToCompleted(jobId);\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n    @GetMapping(\"/{cleanerId}/listjobsapply\")\r\n    public ResponseEntity<List<Map<String, Object>>> getAppliedJobs(@PathVariable(\"cleanerId\") Long cleanerId) {\r\n        List<Map<String, Object>> appliedJobs = cleanerJobService.getAppliedJobsForCleaner(cleanerId);\r\n        if (appliedJobs.isEmpty()) {\r\n            return ResponseEntity.noContent().build();\r\n        }\r\n        return ResponseEntity.ok(appliedJobs);\r\n    }\r\n    // LUỒNG 2\r\n    \r\n    @GetMapping(value = \"/{cleanerId}/jobs\")\r\n    public ResponseEntity<List<Map<String, Object>>> getJobsBookedForCleaner(@RequestParam Long cleanerId) {\r\n        List<Map<String, Object>> jobs = cleanerJobService.getJobsBookedForCleaner(cleanerId);\r\n        if (jobs.isEmpty()) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(List.of(Map.of(\"message\", \"No jobs found for cleaner\")));\r\n        }\r\n        return ResponseEntity.ok(jobs);\r\n    }\r\n\r\n // Cleaner chấp nhận hoặc từ chối công việc mà customer đã đặt cho mình\r\n    @PutMapping(\"/job/{jobId}/accept-reject\")\r\n    public ResponseEntity<Map<String, Object>> acceptOrRejectJob(\r\n            @PathVariable(\"jobId\") Long jobId,\r\n            @RequestParam(\"action\") String action) {\r\n\r\n        Map<String, Object> response = cleanerJobService.acceptOrRejectJob(jobId, action);\r\n\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/controllers/CleanerJobController.java b/src/main/java/com/example/homecleanapi/controllers/CleanerJobController.java
--- a/src/main/java/com/example/homecleanapi/controllers/CleanerJobController.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/controllers/CleanerJobController.java	(date 1743672482106)
@@ -1,6 +1,7 @@
 package com.example.homecleanapi.controllers;
 
 import com.example.homecleanapi.dtos.JobSummaryDTO;
+import com.example.homecleanapi.enums.JobStatus;
 import com.example.homecleanapi.services.CleanerJobService;
 
 import io.swagger.v3.oas.annotations.security.SecurityRequirement;
@@ -14,6 +15,7 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -27,12 +29,13 @@
     private CleanerJobService cleanerJobService;
 
     // Xem danh sách các công việc "Open"
-    @GetMapping(value = "/jobs")
-    public ResponseEntity<List<JobSummaryDTO>> getOpenJobs() {
-        List<JobSummaryDTO> openJobs = cleanerJobService.getOpenJobs();
+    @GetMapping(value = "/jobs/{cleanerId}")
+    public ResponseEntity<List<JobSummaryDTO>> getOpenJobs(@PathVariable Long cleanerId) {
+        List<JobSummaryDTO> openJobs = cleanerJobService.getOpenJobs(cleanerId);
         return ResponseEntity.ok(openJobs);
     }
 
+
     // Xem chi tiết công việc
     @GetMapping(value = "/job/{jobId}")
     public ResponseEntity<Map<String, Object>> getJobDetails(@PathVariable("jobId") Long jobId) {
@@ -74,13 +77,93 @@
         }
         return ResponseEntity.ok(appliedJobs);
     }
+    
+    // danh sách các job đã hoàn thành 
+    @GetMapping(value = "/{cleanerId}/jobs/done")
+    public ResponseEntity<List<Map<String, Object>>> getCompletedJobs(@PathVariable Long cleanerId) {
+        List<Map<String, Object>> completedJobs = cleanerJobService.getCompletedJobs(cleanerId);
+
+        if (completedJobs.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(List.of(Map.of("message", "No completed jobs")));
+        }
+
+        return ResponseEntity.ok(completedJobs);
+    }
+    
+    // ds jobs đang làm
+    @GetMapping("/{cleanerId}/jobs/doing")
+    public ResponseEntity<List<Map<String, Object>>> getInProgressJobs(@PathVariable Long cleanerId) {
+        List<Map<String, Object>> inProgressJobs = cleanerJobService.getInProgressJobs(cleanerId);
+        if (inProgressJobs.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(List.of(Map.of("message", "No in-progress jobs")));
+        }
+        return ResponseEntity.ok(inProgressJobs);
+    }
+
+    // ds job mà cleaner đã apply
+    @GetMapping("/{cleanerId}/jobs/applied")
+    public ResponseEntity<List<Map<String, Object>>> getAppliedJobs2(@PathVariable Long cleanerId) {
+        List<Map<String, Object>> appliedJobs = cleanerJobService.getAppliedJobsForCleaner2(cleanerId);
+        if (appliedJobs.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(List.of(Map.of("message", "No applied jobs")));
+        }
+        return ResponseEntity.ok(appliedJobs);
+    }
+
+
+    // list job theo service và số lượng 
+    @GetMapping("/jobs/by-service")
+    public ResponseEntity<Map<String, Object>> getJobsByService() {
+        Map<String, Object> jobsByService = cleanerJobService.getJobsByService();
+
+        if (jobsByService.isEmpty()) {
+            jobsByService.put("message", "No jobs found by service");
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(jobsByService);
+        }
+
+        return ResponseEntity.ok(jobsByService);
+    }
+    
+    // xem job thuộc filter service
+    @GetMapping("/jobs/details/by-service/{serviceId}")
+    public ResponseEntity<List<Map<String, Object>>> getJobsDetailsByService(@PathVariable Long serviceId) {
+        List<Map<String, Object>> jobDetails = cleanerJobService.getJobsDetailsByService(serviceId);
+        
+        if (jobDetails.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(List.of(Map.of("message", "No jobs found for this service")));
+        }
+
+        return ResponseEntity.ok(jobDetails);
+    }
+    
+    
+    // lấy job đang là combo
+    @GetMapping("/jobs/combo")
+    public ResponseEntity<List<Map<String, Object>>> getComboJobs() {
+        List<Map<String, Object>> comboJobs = cleanerJobService.getComboJobs();
+        
+        if (comboJobs.isEmpty()) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(List.of(Map.of("message", "No combo jobs found")));
+        }
+
+        return ResponseEntity.ok(comboJobs);
+    }
+
+
+
+
+
+
+    
     // LUỒNG 2
+
     
     @GetMapping(value = "/{cleanerId}/jobs")
-    public ResponseEntity<List<Map<String, Object>>> getJobsBookedForCleaner(@RequestParam Long cleanerId) {
+    public ResponseEntity<List<Map<String, Object>>> getJobsBookedForCleaner(@PathVariable Long cleanerId) {
         List<Map<String, Object>> jobs = cleanerJobService.getJobsBookedForCleaner(cleanerId);
-        if (jobs.isEmpty()) {
+        if (jobs.isEmpty()) { 
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(List.of(Map.of("message", "No jobs found for cleaner")));
+          
         }
         return ResponseEntity.ok(jobs);
     }
Index: src/main/java/com/example/homecleanapi/services/CleanerJobService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.services;\r\n\r\nimport com.example.homecleanapi.dtos.BookJobRequest;\r\nimport com.example.homecleanapi.dtos.BookJobRequest.ServiceRequest;\r\nimport com.example.homecleanapi.dtos.JobSummaryDTO;\r\nimport com.example.homecleanapi.enums.JobStatus;\r\nimport com.example.homecleanapi.models.CustomerAddresses;\r\nimport com.example.homecleanapi.models.Customers;\r\nimport com.example.homecleanapi.models.Employee;\r\nimport com.example.homecleanapi.models.Feedback;\r\nimport com.example.homecleanapi.models.Job;\r\nimport com.example.homecleanapi.models.JobApplication;\r\nimport com.example.homecleanapi.models.JobDetails;\r\nimport com.example.homecleanapi.models.JobServiceDetail;\r\nimport com.example.homecleanapi.models.ServiceDetail;\r\nimport com.example.homecleanapi.models.Services;\r\nimport com.example.homecleanapi.repositories.CleanerRepository;\r\nimport com.example.homecleanapi.repositories.CustomerAddressRepository;\r\nimport com.example.homecleanapi.repositories.CustomerRepo;\r\n\r\nimport com.example.homecleanapi.repositories.FeedbackRepository;\r\nimport com.example.homecleanapi.repositories.JobApplicationRepository;\r\nimport com.example.homecleanapi.repositories.JobDetailsRepository;\r\nimport com.example.homecleanapi.repositories.JobRepository;\r\nimport com.example.homecleanapi.repositories.JobServiceDetailRepository;\r\nimport com.example.homecleanapi.repositories.ServiceDetailRepository;\r\nimport com.example.homecleanapi.repositories.ServiceRepository;\r\nimport com.example.homecleanapi.utils.UserStatusWebSocketHandler;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.messaging.simp.SimpMessagingTemplate;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\n\r\nimport java.time.DayOfWeek;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\npublic class CleanerJobService {\r\n\r\n\t@Autowired\r\n\tprivate JobRepository jobRepository;\r\n\r\n\t@Autowired\r\n\tprivate JobApplicationRepository jobApplicationRepository;\r\n\r\n\t@Autowired\r\n\tprivate CleanerRepository cleanerRepository;\r\n\r\n\t@Autowired\r\n\tprivate CustomerRepo customerRepo;\r\n\r\n\t@Autowired\r\n\tprivate ServiceDetailRepository serviceDetailRepository;\r\n\r\n\t@Autowired\r\n\tprivate FeedbackRepository feedbackRepository;\r\n\r\n\t@Autowired\r\n\tprivate CustomerAddressRepository customerAddressRepository;\r\n\r\n\t@Autowired\r\n\tprivate ServiceRepository serviceRepository;\r\n\r\n\t@Autowired\r\n\tprivate JobDetailsRepository jobDetailsRepository;\r\n\r\n\t@Autowired\r\n\tprivate JobServiceDetailRepository jobServiceDetailRepository;\r\n\r\n\t// Lấy danh sách các công việc đang mở\r\n\tpublic List<JobSummaryDTO> getOpenJobs() {\r\n\t\t// Lấy tất cả các Job có trạng thái OPEN\r\n\t\tList<Job> openJobs = jobRepository.findByStatus(JobStatus.OPEN);\r\n\r\n\t\t// Lấy các JobServiceDetail cho các Job này\r\n\t\tList<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository\r\n\t\t\t\t.findByJobIdIn(openJobs.stream().map(Job::getId).collect(Collectors.toList()));\r\n\r\n\t\t// Tạo danh sách JobSummaryDTO từ thông tin đã lấy\r\n\t\treturn openJobs.stream().map(job -> {\r\n\t\t\t// Lấy tên dịch vụ cho từng công việc từ bảng job_service_detail\r\n\t\t\tList<String> serviceNames = jobServiceDetails.stream()\r\n\t\t\t\t\t.filter(jobServiceDetail -> jobServiceDetail.getJob().getId().equals(job.getId()))\r\n\t\t\t\t\t.map(jobServiceDetail -> jobServiceDetail.getService().getName()).collect(Collectors.toList());\r\n\r\n\t\t\t// Nếu không có dịch vụ thì trả về \"N/A\"\r\n\t\t\tString serviceName = serviceNames.isEmpty() ? \"N/A\" : String.join(\", \", serviceNames);\r\n\r\n\t\t\t// Trả về đối tượng JobSummaryDTO\r\n\t\t\treturn new JobSummaryDTO(job.getId(), serviceName, job.getTotalPrice(), job.getScheduledTime());\r\n\t\t}).collect(Collectors.toList());\r\n\t}\r\n\r\n\t// Lấy chi tiết công việc\r\n\tpublic Map<String, Object> getJobDetails(Long jobId) {\r\n\t\tMap<String, Object> jobDetails = new HashMap<>();\r\n\r\n\t\t// Tìm job theo jobId\r\n\t\tJob job = jobRepository.findById(jobId).orElse(null);\r\n\t\tif (job != null) {\r\n\t\t\t// Thêm thông tin về job\r\n\t\t\tjobDetails.put(\"jobId\", job.getId());\r\n\t\t\tjobDetails.put(\"status\", job.getStatus());\r\n\t\t\tjobDetails.put(\"totalPrice\", job.getTotalPrice());\r\n\t\t\tjobDetails.put(\"scheduledTime\", job.getScheduledTime());\r\n\r\n\t\t\t// Lấy tất cả các JobServiceDetail cho job này\r\n\t\t\tList<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(jobId);\r\n\t\t\tif (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {\r\n\t\t\t\tList<Map<String, Object>> serviceList = new ArrayList<>();\r\n\r\n\t\t\t\t// Duyệt qua tất cả các dịch vụ trong bảng job_service_detail\r\n\t\t\t\tfor (JobServiceDetail jobServiceDetail : jobServiceDetails) {\r\n\t\t\t\t\tServices service = jobServiceDetail.getService();\r\n\t\t\t\t\tif (service != null) {\r\n\t\t\t\t\t\tMap<String, Object> serviceInfo = new HashMap<>();\r\n\t\t\t\t\t\tserviceInfo.put(\"serviceName\", service.getName());\r\n\t\t\t\t\t\tserviceInfo.put(\"serviceDescription\", service.getDescription());\r\n\r\n\t\t\t\t\t\t// Lấy các chi tiết dịch vụ\r\n\t\t\t\t\t\tServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();\r\n\t\t\t\t\t\tif (serviceDetail != null) {\r\n\t\t\t\t\t\t\tserviceInfo.put(\"serviceDetailId\", serviceDetail.getId());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"serviceDetailName\", serviceDetail.getName());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"price\", serviceDetail.getPrice());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"additionalPrice\", serviceDetail.getAdditionalPrice());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"areaRange\", serviceDetail.getAreaRange());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"description\", serviceDetail.getDescription());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"discounts\", serviceDetail.getDiscounts());\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tserviceList.add(serviceInfo);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Thêm thông tin dịch vụ vào jobDetails\r\n\t\t\t\tjobDetails.put(\"services\", serviceList);\r\n\t\t\t}\r\n\r\n\t\t\t// Thêm thông tin về customer đã book job\r\n\t\t\tCustomers customer = job.getCustomer();\r\n\t\t\tif (customer != null) {\r\n\t\t\t\tjobDetails.put(\"customerId\", customer.getId());\r\n\t\t\t\tjobDetails.put(\"customerName\", customer.getFull_name());\r\n\t\t\t\tjobDetails.put(\"customerPhone\", customer.getPhone());\r\n\t\t\t}\r\n\r\n\t\t\t// Thêm thông tin về địa chỉ của customer\r\n\t\t\tCustomerAddresses customerAddress = job.getCustomerAddress();\r\n\t\t\tif (customerAddress != null) {\r\n\t\t\t\tjobDetails.put(\"customerAddressId\", customerAddress.getId());\r\n\t\t\t\tjobDetails.put(\"customerAddress\", customerAddress.getAddress());\r\n\t\t\t\tjobDetails.put(\"latitude\", customerAddress.getLatitude());\r\n\t\t\t\tjobDetails.put(\"longitude\", customerAddress.getLongitude());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn jobDetails.isEmpty() ? null : jobDetails;\r\n\t}\r\n\r\n\t// Apply job\r\n\tpublic Map<String, Object> applyForJob(Long jobId) {\r\n\t\tMap<String, Object> response = new HashMap<>();\r\n\r\n\t\tString phoneNumber = SecurityContextHolder.getContext().getAuthentication().getName();\r\n\t\tSystem.out.println(\"phone = \" + phoneNumber);\r\n\r\n\t\tOptional<Employee> cleanerOpt = cleanerRepository.findByPhone(phoneNumber);\r\n\r\n\t\tif (!cleanerOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Cleaner not found\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tEmployee cleaner = cleanerOpt.get();\r\n\r\n\t\t// Tìm công việc theo jobId\r\n\t\tOptional<Job> jobOpt = jobRepository.findById(jobId);\r\n\t\tif (!jobOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Job not found\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tJob job = jobOpt.get();\r\n\r\n\t\t// Kiểm tra trạng thái công việc\r\n\t\tif (!job.getStatus().equals(JobStatus.OPEN)) {\r\n\t\t\tresponse.put(\"message\", \"Job is no longer open or has been taken\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\t// Tạo job application và lưu vào database\r\n\t\tJobApplication jobApplication = new JobApplication();\r\n\t\tjobApplication.setJob(job);\r\n\t\tjobApplication.setCleaner(cleaner);\r\n\t\tjobApplication.setStatus(\"Pending\");\r\n\r\n\t\tjobApplicationRepository.save(jobApplication);\r\n\r\n\t\tresponse.put(\"message\", \"Cleaner has successfully applied for the job\");\r\n\t\tresponse.put(\"jobId\", jobId);\r\n\t\tresponse.put(\"cleanerId\", cleaner.getId());\r\n\t\tresponse.put(\"status\", \"Pending\");\r\n\r\n\t\treturn response;\r\n\t}\r\n\r\n\t// Get applications for job\r\n\tpublic List<Map<String, Object>> getApplicationsForJob(Long jobId, Long customerId) {\r\n\t\tMap<String, Object> response = new HashMap<>();\r\n\r\n\t\t// Tìm customer theo customerId\r\n\t\tOptional<Customers> customerOpt = customerRepo.findById(customerId);\r\n\t\tif (!customerOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Customer not found with customerId: \" + customerId);\r\n\t\t\treturn List.of(response);\r\n\t\t}\r\n\r\n\t\tCustomers customer = customerOpt.get();\r\n\r\n\t\tJob job = jobRepository.findById(jobId).orElse(null);\r\n\t\tif (job == null) {\r\n\t\t\tresponse.put(\"message\", \"Job not found\");\r\n\t\t\treturn List.of(response);\r\n\t\t}\r\n\r\n\t\t// Kiểm tra xem customer có phải là người đã tạo job này hay không\r\n\t\tif (!job.getCustomer().getId().equals(customer.getId())) {\r\n\t\t\tresponse.put(\"message\", \"You are not authorized to view applications for this job\");\r\n\t\t\treturn List.of(response);\r\n\t\t}\r\n\r\n\t\t// Lấy danh sách các ứng viên có trạng thái \"Pending\"\r\n\t\tList<JobApplication> jobApplications = jobApplicationRepository.findByJobAndStatus(job, \"Pending\");\r\n\t\tif (jobApplications.isEmpty()) {\r\n\t\t\tresponse.put(\"message\", \"No applications found for this job\");\r\n\t\t\treturn List.of(response);\r\n\t\t}\r\n\r\n\t\t// Chuyển các ứng viên thành thông tin cần thiết\r\n\t\treturn jobApplications.stream().map(application -> {\r\n\t\t\tEmployee cleaner = application.getCleaner();\r\n\t\t\tMap<String, Object> cleanerInfo = new HashMap<>();\r\n\t\t\tcleanerInfo.put(\"cleanerId\", cleaner.getId());\r\n\t\t\tcleanerInfo.put(\"cleanerName\", cleaner.getName());\r\n\t\t\tcleanerInfo.put(\"profileImage\", cleaner.getProfile_image());\r\n\t\t\treturn cleanerInfo;\r\n\t\t}).collect(Collectors.toList());\r\n\t}\r\n\r\n\t// accept hoặc reject cleaner\r\n\tpublic Map<String, Object> acceptOrRejectApplication(Long jobId, Long cleanerId, Long customerId, String action) {\r\n\t\tMap<String, Object> response = new HashMap<>();\r\n\r\n\t\t// Tìm customer theo customerId để xác thực quyền của customer\r\n\t\tOptional<Customers> customerOpt = customerRepo.findById(customerId);\r\n\t\tif (!customerOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Customer not found with customerId: \" + customerId);\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tCustomers customer = customerOpt.get();\r\n\r\n\t\t// Tìm công việc theo jobId\r\n\t\tOptional<Job> jobOpt = jobRepository.findById(jobId);\r\n\t\tif (!jobOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Job not found\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tJob job = jobOpt.get();\r\n\r\n\t\tSystem.out.println(job.getCustomer().getId());\r\n\t\tSystem.out.println(job.getCustomer().getId());\r\n\t\tif (job.getCustomer().getId().longValue() != customer.getId().longValue()) {\r\n\t\t\tresponse.put(\"message\", \"You are not authorized to accept or reject this job\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\t// Tìm cleaner theo cleanerId\r\n\t\tOptional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);\r\n\t\tif (!cleanerOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Cleaner not found with ID: \" + cleanerId);\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tEmployee cleaner = cleanerOpt.get();\r\n\r\n\t\t// Tìm job application của cleaner cho job này\r\n\t\tOptional<JobApplication> jobApplicationOpt = jobApplicationRepository.findByJobAndCleaner(job, cleaner);\r\n\t\tif (!jobApplicationOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Application not found for this job and cleaner\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tJobApplication jobApplication = jobApplicationOpt.get();\r\n\r\n\t\t// Xử lý accept hoặc reject\r\n\t\tif (\"accept\".equalsIgnoreCase(action)) {\r\n\t\t\t// Nếu chọn accept, từ chối tất cả các ứng viên khác\r\n\t\t\tList<JobApplication> otherApplications = jobApplicationRepository.findByJob(job);\r\n\t\t\tfor (JobApplication app : otherApplications) {\r\n\t\t\t\tif (!app.getCleaner().getId().equals(cleaner.getId())) {\r\n\t\t\t\t\tapp.setStatus(\"Rejected\");\r\n\t\t\t\t\tjobApplicationRepository.save(app);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tjobApplication.setStatus(\"Accepted\");\r\n\t\t\tjob.setStatus(JobStatus.IN_PROGRESS);\r\n\t\t\tresponse.put(\"message\", \"Cleaner has been accepted for the job\");\r\n\t\t} else if (\"reject\".equalsIgnoreCase(action)) {\r\n\t\t\tjobApplication.setStatus(\"Rejected\");\r\n\t\t\tresponse.put(\"message\", \"Cleaner has been rejected for the job\");\r\n\t\t} else {\r\n\t\t\tresponse.put(\"message\", \"Invalid action. Use 'accept' or 'reject'\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\t// Lưu các thay đổi vào cơ sở dữ liệu\r\n\t\tjobApplicationRepository.save(jobApplication);\r\n\t\tjobRepository.save(job);\r\n\r\n\t\tresponse.put(\"jobId\", jobId);\r\n\t\tresponse.put(\"cleanerId\", cleaner.getId());\r\n\t\tresponse.put(\"status\", jobApplication.getStatus());\r\n\r\n\t\treturn response;\r\n\t}\r\n\r\n\t// Cập nhật trạng thái công việc sang \"ARRIVED\"\r\n\tpublic Map<String, Object> updateJobStatusToArrived(Long jobId) {\r\n\t\tMap<String, Object> response = new HashMap<>();\r\n\r\n\t\t// Lấy phone từ JWT hoặc SecurityContext (sử dụng phone_number từ token)\r\n\t\tString phoneNumber = SecurityContextHolder.getContext().getAuthentication().getName();\r\n\r\n\t\tSystem.out.println(\"phone = \" + phoneNumber);\r\n\r\n\t\t// Tìm cleaner theo phone number\r\n\t\tOptional<Employee> cleanerOpt = cleanerRepository.findByPhone(phoneNumber);\r\n\t\tif (!cleanerOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Cleaner not found with phone number: \" + phoneNumber);\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tEmployee cleaner = cleanerOpt.get();\r\n\r\n\t\t// Tìm công việc theo jobId\r\n\t\tOptional<Job> jobOpt = jobRepository.findById(jobId);\r\n\t\tif (!jobOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Job not found\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tJob job = jobOpt.get();\r\n\r\n\t\t// Kiểm tra xem cleaner có quyền cập nhật trạng thái không\r\n\t\tJobApplication jobApplication = jobApplicationRepository.findByJobIdAndStatus(jobId, \"Accepted\");\r\n\t\tif (jobApplication == null || !jobApplication.getCleaner().getId().equals(cleaner.getId())) {\r\n\t\t\tresponse.put(\"message\", \"You are not authorized to update this job status\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tif (!job.getStatus().equals(JobStatus.IN_PROGRESS)) {\r\n\t\t\tresponse.put(\"message\", \"Job is not in progress\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\t// Cập nhật trạng thái công việc sang \"ARRIVED\"\r\n\t\tjob.setStatus(JobStatus.ARRIVED);\r\n\t\tjobRepository.save(job);\r\n\r\n\t\tresponse.put(\"message\", \"Job status updated to ARRIVED\");\r\n\t\treturn response;\r\n\t}\r\n\r\n\t// Cập nhật trạng thái công việc sang \"COMPLETED\"\r\n\tpublic Map<String, Object> updateJobStatusToCompleted(Long jobId) {\r\n\t\tMap<String, Object> response = new HashMap<>();\r\n\r\n\t\t// Lấy phone từ JWT hoặc SecurityContext (sử dụng phone_number từ token)\r\n\t\tString phoneNumber = SecurityContextHolder.getContext().getAuthentication().getName(); // Lấy phone number từ\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// SecurityContext\r\n\t\tSystem.out.println(\"phone = \" + phoneNumber);\r\n\r\n\t\t// Tìm cleaner theo phone number\r\n\t\tOptional<Employee> cleanerOpt = cleanerRepository.findByPhone(phoneNumber);\r\n\t\tif (!cleanerOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Cleaner not found with phone number: \" + phoneNumber);\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tEmployee cleaner = cleanerOpt.get();\r\n\r\n\t\t// Tìm công việc theo jobId\r\n\t\tOptional<Job> jobOpt = jobRepository.findById(jobId);\r\n\t\tif (!jobOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Job not found\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tJob job = jobOpt.get();\r\n\r\n\t\t// Kiểm tra quyền của cleaner (sử dụng cleanerId từ SecurityContext)\r\n\t\tOptional<JobApplication> jobApplicationOpt = jobApplicationRepository.findByJobAndCleaner(job, cleaner);\r\n\t\tif (!jobApplicationOpt.isPresent() || !jobApplicationOpt.get().getStatus().equals(\"Accepted\")) {\r\n\t\t\tresponse.put(\"message\", \"You are not authorized to update this job status\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\t// Kiểm tra trạng thái của công việc\r\n\t\tif (!job.getStatus().equals(JobStatus.STARTED)) {\r\n\t\t\tresponse.put(\"message\", \"Job is not in 'STARTED' state\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\t// Cập nhật trạng thái công việc sang \"COMPLETED\"\r\n\t\tjob.setStatus(JobStatus.COMPLETED);\r\n\t\tjobRepository.save(job);\r\n\r\n\t\tresponse.put(\"message\", \"Job status updated to COMPLETED\");\r\n\t\treturn response;\r\n\t}\r\n\r\n\tpublic List<Map<String, Object>> getAppliedJobsForCleaner(Long cleanerId) {\r\n\t\tList<Map<String, Object>> appliedJobs = new ArrayList<>();\r\n\r\n\t\t// Lấy tất cả các JobApplication mà cleaner đã ứng tuyển\r\n\t\tList<JobApplication> jobApplications = jobApplicationRepository.findByCleanerId(cleanerId);\r\n\r\n\t\tfor (JobApplication jobApplication : jobApplications) {\r\n\t\t\tJob job = jobApplication.getJob();\r\n\t\t\tMap<String, Object> jobInfo = new HashMap<>();\r\n\r\n\t\t\t// Thêm các thông tin chi tiết của job vào jobInfo\r\n\t\t\tjobInfo.put(\"jobId\", job.getId());\r\n\t\t\tjobInfo.put(\"status\", job.getStatus());\r\n\t\t\tjobInfo.put(\"scheduledTime\", job.getScheduledTime());\r\n\t\t\tjobInfo.put(\"totalPrice\", job.getTotalPrice());\r\n\t\t\tjobInfo.put(\"createdAt\", job.getCreatedAt()); // Thêm thời gian tạo job\r\n\r\n\t\t\t// Thêm thông tin về customer đã book job\r\n\t\t\tCustomers customer = job.getCustomer();\r\n\t\t\tif (customer != null) {\r\n\t\t\t\tjobInfo.put(\"customerId\", customer.getId());\r\n\t\t\t\tjobInfo.put(\"customerName\", customer.getFull_name());\r\n\t\t\t\tjobInfo.put(\"customerPhone\", customer.getPhone());\r\n\t\t\t}\r\n\r\n\t\t\t// Thêm thông tin về địa chỉ của customer\r\n\t\t\tCustomerAddresses customerAddress = job.getCustomerAddress();\r\n\t\t\tif (customerAddress != null) {\r\n\t\t\t\tjobInfo.put(\"customerAddressId\", customerAddress.getId());\r\n\t\t\t\tjobInfo.put(\"customerAddress\", customerAddress.getAddress());\r\n\t\t\t\tjobInfo.put(\"latitude\", customerAddress.getLatitude());\r\n\t\t\t\tjobInfo.put(\"longitude\", customerAddress.getLongitude());\r\n\t\t\t}\r\n\r\n\t\t\t// Lấy tất cả các JobServiceDetail cho job này\r\n\t\t\tList<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(job.getId());\r\n\t\t\tSystem.out.println(\"JobServiceDetails for jobId \" + job.getId() + \": \" + jobServiceDetails);\r\n\r\n\t\t\tif (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {\r\n\t\t\t\tList<Map<String, Object>> serviceList = new ArrayList<>();\r\n\r\n\t\t\t\t// Duyệt qua tất cả các dịch vụ trong bảng job_service_detail\r\n\t\t\t\tfor (JobServiceDetail jobServiceDetail : jobServiceDetails) {\r\n\t\t\t\t\tServices service = jobServiceDetail.getService();\r\n\t\t\t\t\tif (service != null) {\r\n\t\t\t\t\t\tMap<String, Object> serviceInfo = new HashMap<>();\r\n\t\t\t\t\t\tserviceInfo.put(\"serviceName\", service.getName()); // Lấy tên dịch vụ\r\n\t\t\t\t\t\tserviceInfo.put(\"serviceDescription\", service.getDescription());\r\n\r\n\t\t\t\t\t\t// Lấy các chi tiết dịch vụ\r\n\t\t\t\t\t\tServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();\r\n\t\t\t\t\t\tif (serviceDetail != null) {\r\n\t\t\t\t\t\t\tserviceInfo.put(\"serviceDetailId\", serviceDetail.getId());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"serviceDetailName\", serviceDetail.getName());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"price\", serviceDetail.getPrice());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"additionalPrice\", serviceDetail.getAdditionalPrice());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"areaRange\", serviceDetail.getAreaRange());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"description\", serviceDetail.getDescription());\r\n\t\t\t\t\t\t\tserviceInfo.put(\"discounts\", serviceDetail.getDiscounts());\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tserviceList.add(serviceInfo);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Thêm thông tin dịch vụ vào jobInfo\r\n\t\t\t\tjobInfo.put(\"services\", serviceList);\r\n\t\t\t} else {\r\n\t\t\t\tjobInfo.put(\"services\", \"No services found for this job\");\r\n\t\t\t}\r\n\r\n\t\t\tappliedJobs.add(jobInfo);\r\n\t\t}\r\n\r\n\t\treturn appliedJobs;\r\n\t}\r\n\r\n\t// LUỒNG CODE 2\r\n\r\n//\tpublic List<Map<String, Object>> getOnlineCleaners() {\r\n//\t\tList<Employee> onlineCleaners = cleanerRepository.findByStatus(true);\r\n//\r\n//\t\tList<Map<String, Object>> cleanerList = new ArrayList<>();\r\n//\r\n//\t\tfor (Employee cleaner : onlineCleaners) {\r\n//\t\t\tMap<String, Object> cleanerInfo = new HashMap<>();\r\n//\t\t\tcleanerInfo.put(\"cleanerId\", cleaner.getId());\r\n//\t\t\tcleanerInfo.put(\"cleanerName\", cleaner.getName());\r\n//\t\t\tcleanerInfo.put(\"profileImage\", cleaner.getProfile_image());\r\n//\t\t\tcleanerList.add(cleanerInfo);\r\n//\t\t}\r\n//\r\n//\t\treturn cleanerList;\r\n//\t}\r\n\r\n\tpublic List<Map<String, Object>> getOnlineCleaners() {\r\n\t    return UserStatusWebSocketHandler.getOnlineCleaners().values().stream().map(cleanerSessionInfo -> {\r\n\t        Map<String, Object> cleanerInfo = Map.of(\r\n\t                \"cleanerId\", cleanerSessionInfo.getCleanerId(), \r\n\t                \"cleanerName\", cleanerSessionInfo.getCleanerName(), \r\n\t                \"profileImage\", cleanerSessionInfo.getProfileImage(),\r\n\t                \"status\", true // Assuming the cleaner is online, status = true\r\n\t        );\r\n\t        return cleanerInfo;\r\n\t    }).collect(Collectors.toList());\r\n\t}\r\n\r\n\r\n\t// xem detail cleaner không cần đk\r\n\tpublic Map<String, Object> getCleanerDetailnone(Long cleanerId) {\r\n\t\t// Tìm cleaner theo cleanerId\r\n\t\tOptional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);\r\n\t\tif (!cleanerOpt.isPresent()) {\r\n\t\t\treturn Map.of(\"message\", \"Cleaner not found\");\r\n\t\t}\r\n\r\n\t\tEmployee cleaner = cleanerOpt.get();\r\n\r\n\t\t// Tạo map chứa thông tin của cleaner\r\n\t\tMap<String, Object> cleanerInfo = new HashMap<>();\r\n\t\tcleanerInfo.put(\"cleanerId\", cleaner.getId());\r\n\t\tcleanerInfo.put(\"cleanerName\", cleaner.getName());\r\n\t\tcleanerInfo.put(\"profileImage\", cleaner.getProfile_image());\r\n\r\n\t\t// Lấy tất cả các Job mà cleaner đã làm từ JobApplication\r\n\t\tList<JobApplication> jobApplications = jobApplicationRepository.findByCleanerId(cleanerId);\r\n\t\tif (jobApplications.isEmpty()) {\r\n\t\t\tcleanerInfo.put(\"feedbacks\", \"No feedback yet\");\r\n\t\t\tcleanerInfo.put(\"averageRating\", 0);\r\n\t\t\treturn cleanerInfo;\r\n\t\t}\r\n\r\n\t\t// Lấy tất cả feedbacks từ các job mà cleaner đã làm\r\n\t\tList<Map<String, Object>> feedbackList = new ArrayList<>();\r\n\t\tint totalRating = 0;\r\n\t\tint feedbackCount = 0;\r\n\r\n\t\tfor (JobApplication jobApplication : jobApplications) {\r\n\t\t\tJob job = jobApplication.getJob(); // Lấy Job từ JobApplication\r\n\r\n\t\t\t// Lấy feedbacks cho Job này\r\n\t\t\tList<Feedback> feedbacks = feedbackRepository.findByJobId(job.getId());\r\n\t\t\tfor (Feedback feedback : feedbacks) {\r\n\t\t\t\tMap<String, Object> feedbackInfo = new HashMap<>();\r\n\t\t\t\tfeedbackInfo.put(\"rating\", feedback.getRating());\r\n\t\t\t\tfeedbackInfo.put(\"comment\", feedback.getComment());\r\n\t\t\t\tfeedbackList.add(feedbackInfo);\r\n\r\n\t\t\t\ttotalRating += feedback.getRating(); // Cộng dồn rating\r\n\t\t\t\tfeedbackCount++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Tính trung bình rating nếu có feedback\r\n\t\tdouble averageRating = feedbackCount > 0 ? (double) totalRating / feedbackCount : 0;\r\n\r\n\t\tcleanerInfo.put(\"averageRating\", averageRating); // Thêm trung bình rating vào thông tin cleaner\r\n\t\tcleanerInfo.put(\"feedbacks\", feedbackList); // Thêm danh sách feedbacks vào thông tin cleaner\r\n\r\n\t\treturn cleanerInfo;\r\n\t}\r\n\r\n\tpublic Map<String, Object> getCleanerDetails(Long cleanerId) {\r\n\t\t// Tìm cleaner theo cleanerId\r\n\t\tOptional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);\r\n\t\tif (!cleanerOpt.isPresent()) {\r\n\t\t\treturn Map.of(\"message\", \"Cleaner not found\");\r\n\t\t}\r\n\r\n\t\tEmployee cleaner = cleanerOpt.get();\r\n\r\n\t\t// Kiểm tra nếu cleaner đang online\r\n\t\tif (!cleaner.getStatus()) {\r\n\t\t\treturn Map.of(\"message\", \"Cleaner is not online\");\r\n\t\t}\r\n\r\n\t\tMap<String, Object> cleanerInfo = new HashMap<>();\r\n\t\tcleanerInfo.put(\"cleanerId\", cleaner.getId());\r\n\t\tcleanerInfo.put(\"cleanerName\", cleaner.getName());\r\n\t\tcleanerInfo.put(\"profileImage\", cleaner.getProfile_image());\r\n\r\n\t\t// Lấy feedback cho cleaner\r\n\t\tList<Feedback> feedbacks = feedbackRepository.findByJobId(cleaner.getId());\r\n\t\tif (!feedbacks.isEmpty()) {\r\n\t\t\tList<Map<String, Object>> feedbackList = new ArrayList<>();\r\n\t\t\tfor (Feedback feedback : feedbacks) {\r\n\t\t\t\tMap<String, Object> feedbackInfo = new HashMap<>();\r\n\t\t\t\tfeedbackInfo.put(\"rating\", feedback.getRating());\r\n\t\t\t\tfeedbackInfo.put(\"comment\", feedback.getComment());\r\n\t\t\t\tfeedbackList.add(feedbackInfo);\r\n\t\t\t}\r\n\t\t\tcleanerInfo.put(\"feedbacks\", feedbackList);\r\n\t\t} else {\r\n\t\t\tcleanerInfo.put(\"feedbacks\", \"No feedback yet\");\r\n\t\t}\r\n\r\n\t\treturn cleanerInfo;\r\n\t}\r\n\r\n\t// customer book job cleaner online\r\n\tpublic Map<String, Object> bookJobForCleaner(@RequestParam Long customerId, Long cleanerId, BookJobRequest request) {\r\n\t    Map<String, Object> response = new HashMap<>();\r\n\r\n\t    // Lấy customer thông qua customerId\r\n\t    Optional<Customers> customerOpt = customerRepo.findById(customerId);\r\n\t    if (!customerOpt.isPresent()) {\r\n\t        response.put(\"message\", \"Customer not found with customerId: \" + customerId);\r\n\t        return response;\r\n\t    }\r\n\t    Customers customer = customerOpt.get();\r\n\r\n\t    // Tìm địa chỉ của customer\r\n\t    Optional<CustomerAddresses> customerAddressOpt = customerAddressRepository.findById(request.getCustomerAddressId());\r\n\t    if (!customerAddressOpt.isPresent()) {\r\n\t        response.put(\"message\", \"Customer address not found\");\r\n\t        return response;\r\n\t    }\r\n\t    CustomerAddresses customerAddress = customerAddressOpt.get();\r\n\r\n\t    // Chuyển jobTime từ String sang LocalDateTime\r\n\t    LocalDateTime jobTime = null;\r\n\t    try {\r\n\t        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\r\n\t        jobTime = LocalDateTime.parse(request.getJobTime(), formatter);\r\n\t    } catch (Exception e) {\r\n\t        response.put(\"message\", \"Invalid job time format\");\r\n\t        return response;\r\n\t    }\r\n\r\n\t    // Tạo mới job\r\n\t    Job job = new Job();\r\n\t    job.setCustomer(customer);\r\n\t    job.setCustomerAddress(customerAddress);\r\n\t    job.setScheduledTime(jobTime);\r\n\t    job.setStatus(JobStatus.BOOKED);  // Đặt trạng thái job là BOOKED\r\n\r\n\t    // Kiểm tra cleaner\r\n\t    Optional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);\r\n\t    if (!cleanerOpt.isPresent()) {\r\n\t        response.put(\"message\", \"Cleaner not found with cleanerId: \" + cleanerId);\r\n\t        return response;\r\n\t    }\r\n\t    Employee cleaner = cleanerOpt.get();\r\n\t    job.setCleaner(cleaner);\r\n\r\n\t    // Kiểm tra trùng lịch của cleaner\r\n\t    List<Job> existingJobs = jobRepository.findByCleanerIdAndScheduledTimeBetween(cleanerId,\r\n\t            jobTime.minusHours(2), jobTime.plusHours(2));\r\n\t    if (!existingJobs.isEmpty()) {\r\n\t        response.put(\"message\", \"Người dọn dẹp có lịch trình chồng chéo hoặc khoảng cách thời gian giữa các công việc ít hơn 2 giờ\");\r\n\t        return response;\r\n\t    }\r\n\r\n\t    // Lưu Job vào cơ sở dữ liệu trước\r\n\t    job = jobRepository.save(job);\r\n\r\n\t    // Tính toán giá cho tất cả các dịch vụ\r\n\t    double totalPrice = 0;\r\n\t    List<JobServiceDetail> jobServiceDetails = new ArrayList<>();\r\n\r\n\t    for (ServiceRequest serviceRequest : request.getServices()) {\r\n\r\n\t        // Kiểm tra dịch vụ\r\n\t        Optional<Services> serviceOpt = serviceRepository.findById(serviceRequest.getServiceId());\r\n\t        if (!serviceOpt.isPresent()) {\r\n\t            response.put(\"message\", \"Service not found with serviceId: \" + serviceRequest.getServiceId());\r\n\t            return response;\r\n\t        }\r\n\t        Services service = serviceOpt.get();\r\n\r\n\t        // Kiểm tra chi tiết dịch vụ\r\n\t        Optional<ServiceDetail> serviceDetailOpt = serviceDetailRepository.findById(serviceRequest.getServiceDetailId());\r\n\t        if (!serviceDetailOpt.isPresent()) {\r\n\t            response.put(\"message\", \"Service Detail not found for serviceId: \" + serviceRequest.getServiceDetailId());\r\n\t            return response;\r\n\t        }\r\n\t        ServiceDetail serviceDetail = serviceDetailOpt.get();\r\n\r\n\t        // Tính giá dịch vụ\r\n\t        double serviceDetailPrice = serviceDetail.getPrice();\r\n\t        double additionalPrice = serviceDetail.getAdditionalPrice();\r\n\t        double finalPrice = serviceDetailPrice + additionalPrice;\r\n\r\n\t        // Kiểm tra giờ cao điểm và phụ phí\r\n\t        double peakTimeFee = 0;\r\n\t        if (job.getScheduledTime().getDayOfWeek() == DayOfWeek.SATURDAY || job.getScheduledTime().getDayOfWeek() == DayOfWeek.SUNDAY) {\r\n\t            peakTimeFee = 0.1 * finalPrice;\r\n\t        }\r\n\t        if (job.getScheduledTime().getHour() >= 18 && job.getScheduledTime().getHour() <= 22) {\r\n\t            peakTimeFee += 0.2 * finalPrice;\r\n\t        }\r\n\t        finalPrice += peakTimeFee;\r\n\r\n\t        // Cộng tổng giá cho tất cả các dịch vụ\r\n\t        totalPrice += finalPrice;\r\n\r\n\t        // Tạo JobServiceDetail và lưu vào cơ sở dữ liệu\r\n\t        JobServiceDetail jobServiceDetail = new JobServiceDetail();\r\n\t        jobServiceDetail.setJob(job);  // Gắn job vào JobServiceDetail\r\n\t        jobServiceDetail.setService(service);  // Gắn service vào JobServiceDetail\r\n\t        jobServiceDetail.setServiceDetail(serviceDetail);  // Gắn serviceDetail vào JobServiceDetail\r\n\r\n\t        // Thêm JobServiceDetail vào danh sách\r\n\t        jobServiceDetails.add(jobServiceDetail);\r\n\t    }\r\n\r\n\t    // Lưu JobServiceDetails vào cơ sở dữ liệu\r\n\t    jobServiceDetailRepository.saveAll(jobServiceDetails);\r\n\r\n\t    // Cập nhật tổng giá và lưu Job\r\n\t    job.setTotalPrice(totalPrice);\r\n\t    jobRepository.save(job);\r\n\r\n\t    // Trả về thông tin công việc đã tạo\r\n\t    response.put(\"message\", \"Job booked successfully\");\r\n\t    response.put(\"jobId\", job.getId());\r\n\t    response.put(\"status\", job.getStatus());\r\n\t    response.put(\"totalPrice\", totalPrice);\r\n\r\n\t    return response;\r\n\t}\r\n\r\n\r\n\tpublic List<Map<String, Object>> getJobsBookedForCleaner(@RequestParam Long cleanerId) {\r\n\t\tList<Map<String, Object>> responseList = new ArrayList<>();\r\n\r\n\t\t// Tìm cleaner theo cleanerId\r\n\t\tOptional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);\r\n\t\tif (!cleanerOpt.isPresent()) {\r\n\t\t\tresponseList.add(Map.of(\"message\", \"Cleaner not found with cleanerId: \" + cleanerId));\r\n\t\t\treturn responseList;\r\n\t\t}\r\n\r\n\t\tEmployee cleaner = cleanerOpt.get();\r\n\r\n\t\t// Tìm tất cả các job mà cleaner đã được gán\r\n\t\tList<Job> jobs = jobRepository.findByCleanerId(cleanerId);\r\n\t\tif (jobs.isEmpty()) {\r\n\t\t\tresponseList.add(Map.of(\"message\", \"No jobs found for cleaner with cleanerId: \" + cleanerId));\r\n\t\t\treturn responseList;\r\n\t\t}\r\n\r\n\t\t// Lấy thông tin các job mà cleaner được book\r\n\t\tfor (Job job : jobs) {\r\n\t\t\tMap<String, Object> jobInfo = new HashMap<>();\r\n\r\n\t\t\t// Thêm thông tin về job\r\n\t\t\tjobInfo.put(\"jobId\", job.getId());\r\n\t\t\tjobInfo.put(\"status\", job.getStatus());\r\n\t\t\tjobInfo.put(\"scheduledTime\", job.getScheduledTime());\r\n\r\n\t\t\t// Thêm thông tin về customer\r\n\t\t\tCustomers customer = job.getCustomer();\r\n\t\t\tjobInfo.put(\"customerId\", customer.getId());\r\n\t\t\tjobInfo.put(\"customerName\", customer.getFull_name());\r\n\t\t\tjobInfo.put(\"customerPhone\", customer.getPhone());\r\n\r\n\t\t\t// Lấy tất cả các JobServiceDetail cho job này\r\n\t\t\tList<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(job.getId());\r\n\t\t\tif (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {\r\n\t\t\t\tList<Map<String, Object>> serviceList = new ArrayList<>();\r\n\r\n\t\t\t\t// Duyệt qua tất cả các dịch vụ trong bảng job_service_detail\r\n\t\t\t\tfor (JobServiceDetail jobServiceDetail : jobServiceDetails) {\r\n\t\t\t\t\tServices service = jobServiceDetail.getService();\r\n\t\t\t\t\tif (service != null) {\r\n\t\t\t\t\t\tMap<String, Object> serviceInfo = new HashMap<>();\r\n\t\t\t\t\t\tserviceInfo.put(\"serviceName\", service.getName());\r\n\r\n\t\t\t\t\t\t// Lấy thông tin chi tiết dịch vụ\r\n\t\t\t\t\t\tServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();\r\n\t\t\t\t\t\tif (serviceDetail != null) {\r\n\t\t\t\t\t\t\tserviceInfo.put(\"serviceDetailName\", serviceDetail.getName());\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tserviceList.add(serviceInfo);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Thêm thông tin dịch vụ vào jobInfo\r\n\t\t\t\tjobInfo.put(\"services\", serviceList);\r\n\t\t\t}\r\n\r\n\t\t\tresponseList.add(jobInfo);\r\n\t\t}\r\n\r\n\t\treturn responseList;\r\n\t}\r\n\r\n\tpublic Map<String, Object> acceptOrRejectJob(Long jobId, String action) {\r\n\t\tMap<String, Object> response = new HashMap<>();\r\n\r\n\t\t// Lấy thông tin cleaner từ SecurityContext\r\n\t\tString phoneNumber = SecurityContextHolder.getContext().getAuthentication().getName();\r\n\t\tOptional<Employee> cleanerOpt = cleanerRepository.findByPhone(phoneNumber);\r\n\t\tif (!cleanerOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Cleaner not found\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\t\tEmployee cleaner = cleanerOpt.get();\r\n\r\n\t\t// Tìm công việc theo jobId\r\n\t\tOptional<Job> jobOpt = jobRepository.findById(jobId);\r\n\t\tif (!jobOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"Job not found\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\t\tJob job = jobOpt.get();\r\n\r\n\t\t// Kiểm tra nếu công việc đã được giao cho cleaner\r\n\t\tOptional<JobApplication> jobApplicationOpt = jobApplicationRepository.findByJobAndCleaner(job, cleaner);\r\n\t\tif (!jobApplicationOpt.isPresent()) {\r\n\t\t\tresponse.put(\"message\", \"This job has not been assigned to you\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\t\tJobApplication jobApplication = jobApplicationOpt.get();\r\n\r\n\t\t// Kiểm tra trạng thái của job application trước khi chấp nhận hoặc từ chối\r\n\t\tif (jobApplication.getStatus().equals(\"Accepted\") || jobApplication.getStatus().equals(\"Rejected\")) {\r\n\t\t\tresponse.put(\"message\", \"You have already accepted or rejected this job\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\t// Xử lý chấp nhận hoặc từ chối\r\n\t\tif (\"accept\".equalsIgnoreCase(action)) {\r\n\t\t\t// Nếu chọn accept, từ chối tất cả các ứng viên khác\r\n\t\t\tList<JobApplication> otherApplications = jobApplicationRepository.findByJob(job);\r\n\t\t\tfor (JobApplication app : otherApplications) {\r\n\t\t\t\tif (!app.getCleaner().getId().equals(cleaner.getId())) {\r\n\t\t\t\t\tapp.setStatus(\"Rejected\");\r\n\t\t\t\t\tjobApplicationRepository.save(app);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tjobApplication.setStatus(\"Accepted\");\r\n\t\t\tjob.setStatus(JobStatus.IN_PROGRESS); // Đặt trạng thái công việc là \"IN_PROGRESS\"\r\n\t\t\tresponse.put(\"message\", \"Job has been accepted\");\r\n\t\t} else if (\"reject\".equalsIgnoreCase(action)) {\r\n\t\t\tjobApplication.setStatus(\"Rejected\");\r\n\t\t\tresponse.put(\"message\", \"Job has been rejected\");\r\n\t\t} else {\r\n\t\t\tresponse.put(\"message\", \"Invalid action. Use 'accept' or 'reject'\");\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\t// Lưu các thay đổi vào cơ sở dữ liệu\r\n\t\tjobApplicationRepository.save(jobApplication);\r\n\t\tjobRepository.save(job);\r\n\r\n\t\tresponse.put(\"jobId\", jobId);\r\n\t\tresponse.put(\"cleanerId\", cleaner.getId());\r\n\t\tresponse.put(\"status\", jobApplication.getStatus());\r\n\t\treturn response;\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/services/CleanerJobService.java b/src/main/java/com/example/homecleanapi/services/CleanerJobService.java
--- a/src/main/java/com/example/homecleanapi/services/CleanerJobService.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/services/CleanerJobService.java	(date 1743672482136)
@@ -14,6 +14,7 @@
 import com.example.homecleanapi.models.JobServiceDetail;
 import com.example.homecleanapi.models.ServiceDetail;
 import com.example.homecleanapi.models.Services;
+import com.example.homecleanapi.models.Wallet;
 import com.example.homecleanapi.repositories.CleanerRepository;
 import com.example.homecleanapi.repositories.CustomerAddressRepository;
 import com.example.homecleanapi.repositories.CustomerRepo;
@@ -25,7 +26,7 @@
 import com.example.homecleanapi.repositories.JobServiceDetailRepository;
 import com.example.homecleanapi.repositories.ServiceDetailRepository;
 import com.example.homecleanapi.repositories.ServiceRepository;
-import com.example.homecleanapi.utils.UserStatusWebSocketHandler;
+import com.example.homecleanapi.repositories.WalletRepository;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.messaging.simp.SimpMessagingTemplate;
@@ -34,14 +35,17 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestParam;
 
+import java.text.DecimalFormat;
 import java.time.DayOfWeek;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
+import java.util.Set;
 import java.util.stream.Collectors;
 
 @Service
@@ -76,145 +80,187 @@
 
 	@Autowired
 	private JobServiceDetailRepository jobServiceDetailRepository;
+	
+	@Autowired
+    private WalletRepository walletRepository;
 
+	
+	
+
 	// Lấy danh sách các công việc đang mở
-	public List<JobSummaryDTO> getOpenJobs() {
+	public List<JobSummaryDTO> getOpenJobs(Long cleanerId) {
 		// Lấy tất cả các Job có trạng thái OPEN
 		List<Job> openJobs = jobRepository.findByStatus(JobStatus.OPEN);
 
-		// Lấy các JobServiceDetail cho các Job này
+		// Lấy tất cả các jobId đã có ứng viên (cleaner) cho cleanerId
+		List<Long> appliedJobIds = jobApplicationRepository.findByCleanerIdAndStatus(cleanerId, "Pending").stream()
+				.map(jobApplication -> jobApplication.getJob().getId()).collect(Collectors.toList());
+
+		// Lọc ra các công việc mà cleaner này chưa ứng tuyển
+		List<Job> jobsWithoutCleaner = openJobs.stream().filter(job -> !appliedJobIds.contains(job.getId()))
+				.collect(Collectors.toList());
+
 		List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository
-				.findByJobIdIn(openJobs.stream().map(Job::getId).collect(Collectors.toList()));
+				.findByJobIdIn(jobsWithoutCleaner.stream().map(Job::getId).collect(Collectors.toList()));
 
-		// Tạo danh sách JobSummaryDTO từ thông tin đã lấy
-		return openJobs.stream().map(job -> {
-			// Lấy tên dịch vụ cho từng công việc từ bảng job_service_detail
+		return jobsWithoutCleaner.stream().map(job -> {
 			List<String> serviceNames = jobServiceDetails.stream()
 					.filter(jobServiceDetail -> jobServiceDetail.getJob().getId().equals(job.getId()))
 					.map(jobServiceDetail -> jobServiceDetail.getService().getName()).collect(Collectors.toList());
 
-			// Nếu không có dịch vụ thì trả về "N/A"
 			String serviceName = serviceNames.isEmpty() ? "N/A" : String.join(", ", serviceNames);
 
-			// Trả về đối tượng JobSummaryDTO
 			return new JobSummaryDTO(job.getId(), serviceName, job.getTotalPrice(), job.getScheduledTime());
 		}).collect(Collectors.toList());
 	}
 
 	// Lấy chi tiết công việc
 	public Map<String, Object> getJobDetails(Long jobId) {
-		Map<String, Object> jobDetails = new HashMap<>();
+	    Map<String, Object> jobDetails = new HashMap<>();
 
-		// Tìm job theo jobId
-		Job job = jobRepository.findById(jobId).orElse(null);
-		if (job != null) {
-			// Thêm thông tin về job
-			jobDetails.put("jobId", job.getId());
-			jobDetails.put("status", job.getStatus());
-			jobDetails.put("totalPrice", job.getTotalPrice());
-			jobDetails.put("scheduledTime", job.getScheduledTime());
+	    // Tìm job theo jobId
+	    Job job = jobRepository.findById(jobId).orElse(null);
+	    if (job != null) {
+	        // Thêm thông tin về job
+	        jobDetails.put("jobId", job.getId());
+	        jobDetails.put("status", job.getStatus());
+	        jobDetails.put("totalPrice", job.getTotalPrice());
+	        jobDetails.put("scheduledTime", job.getScheduledTime());
 
-			// Lấy tất cả các JobServiceDetail cho job này
-			List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(jobId);
-			if (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {
-				List<Map<String, Object>> serviceList = new ArrayList<>();
+
+	        if (job.getReminder() != null) {
+	            jobDetails.put("reminder", job.getReminder());  
+	        }
+
+
+	        List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(jobId);
+	        if (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {
+	            List<Map<String, Object>> serviceList = new ArrayList<>();
 
-				// Duyệt qua tất cả các dịch vụ trong bảng job_service_detail
-				for (JobServiceDetail jobServiceDetail : jobServiceDetails) {
-					Services service = jobServiceDetail.getService();
-					if (service != null) {
-						Map<String, Object> serviceInfo = new HashMap<>();
-						serviceInfo.put("serviceName", service.getName());
-						serviceInfo.put("serviceDescription", service.getDescription());
+
+	            for (JobServiceDetail jobServiceDetail : jobServiceDetails) {
+	                Services service = jobServiceDetail.getService();
+	                if (service != null) {
+	                    Map<String, Object> serviceInfo = new HashMap<>();
+	                    serviceInfo.put("serviceName", service.getName());
+	                    serviceInfo.put("serviceDescription", service.getDescription());
 
-						// Lấy các chi tiết dịch vụ
-						ServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();
-						if (serviceDetail != null) {
-							serviceInfo.put("serviceDetailId", serviceDetail.getId());
-							serviceInfo.put("serviceDetailName", serviceDetail.getName());
-							serviceInfo.put("price", serviceDetail.getPrice());
-							serviceInfo.put("additionalPrice", serviceDetail.getAdditionalPrice());
-							serviceInfo.put("areaRange", serviceDetail.getAreaRange());
-							serviceInfo.put("description", serviceDetail.getDescription());
-							serviceInfo.put("discounts", serviceDetail.getDiscounts());
-						}
+	                    ServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();
+	                    if (serviceDetail != null) {
+	                        serviceInfo.put("serviceDetailId", serviceDetail.getId());
+	                        serviceInfo.put("serviceDetailName", serviceDetail.getName());
+	                        serviceInfo.put("price", serviceDetail.getPrice());
+	                        serviceInfo.put("additionalPrice", serviceDetail.getAdditionalPrice());
+	                        serviceInfo.put("areaRange", serviceDetail.getAreaRange());
+	                        serviceInfo.put("description", serviceDetail.getDescription());
+	                        serviceInfo.put("discounts", serviceDetail.getDiscounts());
+	                    }
 
-						serviceList.add(serviceInfo);
-					}
-				}
+	                    serviceList.add(serviceInfo);
+	                }
+	            }
 
-				// Thêm thông tin dịch vụ vào jobDetails
-				jobDetails.put("services", serviceList);
-			}
+
+	            jobDetails.put("services", serviceList);
+	        }
 
-			// Thêm thông tin về customer đã book job
-			Customers customer = job.getCustomer();
-			if (customer != null) {
-				jobDetails.put("customerId", customer.getId());
-				jobDetails.put("customerName", customer.getFull_name());
-				jobDetails.put("customerPhone", customer.getPhone());
-			}
+	        // Thêm thông tin về customer đã book job
+	        Customers customer = job.getCustomer();
+	        if (customer != null) {
+	            jobDetails.put("customerId", customer.getId());
+	            jobDetails.put("customerName", customer.getFull_name());
+	            jobDetails.put("customerPhone", customer.getPhone());
+	        }
 
-			// Thêm thông tin về địa chỉ của customer
-			CustomerAddresses customerAddress = job.getCustomerAddress();
-			if (customerAddress != null) {
-				jobDetails.put("customerAddressId", customerAddress.getId());
-				jobDetails.put("customerAddress", customerAddress.getAddress());
-				jobDetails.put("latitude", customerAddress.getLatitude());
-				jobDetails.put("longitude", customerAddress.getLongitude());
-			}
-		}
+	        // Thêm thông tin về địa chỉ của customer
+	        CustomerAddresses customerAddress = job.getCustomerAddress();
+	        if (customerAddress != null) {
+	            jobDetails.put("customerAddressId", customerAddress.getId());
+	            jobDetails.put("customerAddress", customerAddress.getAddress());
+	            jobDetails.put("latitude", customerAddress.getLatitude());
+	            jobDetails.put("longitude", customerAddress.getLongitude());
+	        }
+	    }
 
-		return jobDetails.isEmpty() ? null : jobDetails;
+	    return jobDetails.isEmpty() ? null : jobDetails;
 	}
 
+
 	// Apply job
 	public Map<String, Object> applyForJob(Long jobId) {
-		Map<String, Object> response = new HashMap<>();
+	    Map<String, Object> response = new HashMap<>();
 
-		String phoneNumber = SecurityContextHolder.getContext().getAuthentication().getName();
-		System.out.println("phone = " + phoneNumber);
+	    String phoneNumber = SecurityContextHolder.getContext().getAuthentication().getName();
+	    System.out.println("phone = " + phoneNumber);
 
-		Optional<Employee> cleanerOpt = cleanerRepository.findByPhone(phoneNumber);
+	    Optional<Employee> cleanerOpt = cleanerRepository.findByPhone(phoneNumber);
 
-		if (!cleanerOpt.isPresent()) {
-			response.put("message", "Cleaner not found");
-			return response;
-		}
+	    if (!cleanerOpt.isPresent()) {
+	        response.put("message", "Cleaner not found");
+	        return response;
+	    }
 
-		Employee cleaner = cleanerOpt.get();
+	    Employee cleaner = cleanerOpt.get();
 
-		// Tìm công việc theo jobId
-		Optional<Job> jobOpt = jobRepository.findById(jobId);
-		if (!jobOpt.isPresent()) {
-			response.put("message", "Job not found");
-			return response;
-		}
+	    // Tìm công việc theo jobId
+	    Optional<Job> jobOpt = jobRepository.findById(jobId);
+	    if (!jobOpt.isPresent()) {
+	        response.put("message", "Job not found");
+	        return response;
+	    }
 
-		Job job = jobOpt.get();
+	    Job job = jobOpt.get();
 
-		// Kiểm tra trạng thái công việc
-		if (!job.getStatus().equals(JobStatus.OPEN)) {
-			response.put("message", "Job is no longer open or has been taken");
-			return response;
-		}
+	    // Kiểm tra trạng thái công việc
+	    if (!job.getStatus().equals(JobStatus.OPEN)) {
+	        response.put("message", "Job is no longer open or has been taken");
+	        return response;
+	    }
+
+
+	    // Kiểm tra phương thức thanh toán của job
+	    if (job.getPaymentMethod().trim().equalsIgnoreCase("Cash")) {
+	    	
+	    	
+	        // Kiểm tra ví của cleaner để kiểm tra số dư trước khi ứng tuyển
+	        Optional<Wallet> walletOpt = walletRepository.findByCleanerId(cleaner.getId());
+	        if (!walletOpt.isPresent()) {
+	            response.put("message", "Cleaner wallet not found");
+	            return response;
+	        }
+	        Wallet wallet = walletOpt.get();
+
+	        // Tính hoa hồng (20% của tổng giá trị đơn hàng)
+	        double commission = 0.2 * job.getTotalPrice();
+
+	        // Kiểm tra số dư ví của cleaner có đủ để trừ hoa hồng không
+	        if (wallet.getBalance() - commission < -200000) {  
+	            response.put("message", "Your balance is not sufficient. You can only owe up to 200,000 VND.");
+	            return response;  // Return immediately to prevent job application creation
+	        }
+	    }
 
-		// Tạo job application và lưu vào database
-		JobApplication jobApplication = new JobApplication();
-		jobApplication.setJob(job);
-		jobApplication.setCleaner(cleaner);
-		jobApplication.setStatus("Pending");
+	    // Tạo job application và lưu vào database
+	    JobApplication jobApplication = new JobApplication();
+	    jobApplication.setJob(job);
+	    jobApplication.setCleaner(cleaner);
+	    jobApplication.setStatus("Pending");
 
-		jobApplicationRepository.save(jobApplication);
+	    jobApplicationRepository.save(jobApplication);
 
-		response.put("message", "Cleaner has successfully applied for the job");
-		response.put("jobId", jobId);
-		response.put("cleanerId", cleaner.getId());
-		response.put("status", "Pending");
+	    response.put("message", "Cleaner has successfully applied for the job");
+	    response.put("jobId", jobId);
+	    response.put("cleanerId", cleaner.getId());
+	    response.put("status", "Pending");
 
-		return response;
+	    return response;
 	}
 
+
+
+
+
+
 	// Get applications for job
 	public List<Map<String, Object>> getApplicationsForJob(Long jobId, Long customerId) {
 		Map<String, Object> response = new HashMap<>();
@@ -420,8 +466,8 @@
 		}
 
 		// Kiểm tra trạng thái của công việc
-		if (!job.getStatus().equals(JobStatus.STARTED)) {
-			response.put("message", "Job is not in 'STARTED' state");
+		if (!job.getStatus().equals(JobStatus.IN_PROGRESS)) {
+			response.put("message", "Job is not in 'IN_PROGRESS' state");
 			return response;
 		}
 
@@ -510,6 +556,481 @@
 		return appliedJobs;
 	}
 
+	// lọc lấy job đã làm xong
+	public List<Map<String, Object>> getCompletedJobs(Long cleanerId) {
+		List<Map<String, Object>> completedJobs = new ArrayList<>();
+
+		// Lấy danh sách các JobApplication của cleaner có trạng thái 'ACCEPTED'
+		List<JobApplication> jobApplications = jobApplicationRepository.findByCleanerIdAndStatus(cleanerId, "Accepted");
+
+		// Kiểm tra nếu không có công việc nào đã được chấp nhận
+		if (jobApplications.isEmpty()) {
+			return completedJobs; // Trả về danh sách trống nếu không có công việc
+		}
+
+		// Duyệt qua từng JobApplication và lấy các Job có status là DONE
+		for (JobApplication jobApplication : jobApplications) {
+			Job job = jobApplication.getJob(); // Lấy Job từ JobApplication
+
+			if (job.getStatus() == JobStatus.DONE) { // Kiểm tra nếu công việc có trạng thái DONE
+				Map<String, Object> jobInfo = new HashMap<>();
+				jobInfo.put("jobId", job.getId());
+				jobInfo.put("scheduledTime", job.getScheduledTime());
+				jobInfo.put("status", job.getStatus());
+				jobInfo.put("totalPrice", job.getTotalPrice());
+				jobInfo.put("createdAt", job.getCreatedAt()); // Thêm thời gian tạo job
+
+				// Thêm thông tin về customer đã book job
+				Customers customer = job.getCustomer();
+				if (customer != null) {
+					jobInfo.put("customerId", customer.getId());
+					jobInfo.put("customerName", customer.getFull_name());
+					jobInfo.put("customerPhone", customer.getPhone());
+				}
+
+				// Thêm thông tin về địa chỉ của customer
+				CustomerAddresses customerAddress = job.getCustomerAddress();
+				if (customerAddress != null) {
+					jobInfo.put("customerAddressId", customerAddress.getId());
+					jobInfo.put("customerAddress", customerAddress.getAddress());
+					jobInfo.put("latitude", customerAddress.getLatitude());
+					jobInfo.put("longitude", customerAddress.getLongitude());
+				}
+
+				// Lấy tất cả các JobServiceDetail cho job này
+				List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(job.getId());
+				System.out.println("JobServiceDetails for jobId " + job.getId() + ": " + jobServiceDetails);
+
+				// Nếu có dịch vụ, thêm vào jobInfo
+				if (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {
+					List<Map<String, Object>> serviceList = new ArrayList<>();
+
+					// Duyệt qua tất cả các dịch vụ trong bảng job_service_detail
+					for (JobServiceDetail jobServiceDetail : jobServiceDetails) {
+						Services service = jobServiceDetail.getService();
+						if (service != null) {
+							Map<String, Object> serviceInfo = new HashMap<>();
+							serviceInfo.put("serviceName", service.getName()); // Lấy tên dịch vụ
+							serviceInfo.put("serviceDescription", service.getDescription());
+
+							// Lấy các chi tiết dịch vụ
+							ServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();
+							if (serviceDetail != null) {
+								serviceInfo.put("serviceDetailId", serviceDetail.getId());
+								serviceInfo.put("serviceDetailName", serviceDetail.getName());
+								serviceInfo.put("price", serviceDetail.getPrice());
+								serviceInfo.put("additionalPrice", serviceDetail.getAdditionalPrice());
+								serviceInfo.put("areaRange", serviceDetail.getAreaRange());
+								serviceInfo.put("description", serviceDetail.getDescription());
+								serviceInfo.put("discounts", serviceDetail.getDiscounts());
+							}
+
+							serviceList.add(serviceInfo);
+						}
+					}
+
+					// Thêm thông tin dịch vụ vào jobInfo
+					jobInfo.put("services", serviceList);
+				} else {
+					// Nếu không có dịch vụ nào, thông báo không có dịch vụ
+					jobInfo.put("services", "No services found for this job");
+				}
+
+				completedJobs.add(jobInfo); // Thêm thông tin job vào danh sách
+			}
+		}
+
+		return completedJobs; // Trả về danh sách công việc đã hoàn thành
+	}
+
+	// ds job đang làm
+	public List<Map<String, Object>> getInProgressJobs(Long cleanerId) {
+		List<Map<String, Object>> inProgressJobs = new ArrayList<>();
+
+		// Lấy danh sách các JobApplication của cleaner có trạng thái 'ACCEPTED'
+		List<JobApplication> jobApplications = jobApplicationRepository.findByCleanerIdAndStatus(cleanerId, "Accepted");
+
+		// Kiểm tra nếu không có công việc nào đã được chấp nhận
+		if (jobApplications.isEmpty()) {
+			return inProgressJobs; // Trả về danh sách trống nếu không có công việc
+		}
+
+		// Duyệt qua từng JobApplication và lấy các Job có trạng thái là IN_PROGRESS,
+		// ARRIVED, STARTED, COMPLETED, BOOKED
+		for (JobApplication jobApplication : jobApplications) {
+			Job job = jobApplication.getJob(); // Lấy Job từ JobApplication
+
+			// Kiểm tra nếu job có trạng thái là một trong các trạng thái cần thiết
+			if (job.getStatus() == JobStatus.IN_PROGRESS || job.getStatus() == JobStatus.ARRIVED
+					|| job.getStatus() == JobStatus.STARTED || job.getStatus() == JobStatus.COMPLETED
+					|| job.getStatus() == JobStatus.BOOKED) {
+				Map<String, Object> jobInfo = new HashMap<>();
+				jobInfo.put("jobId", job.getId());
+				jobInfo.put("scheduledTime", job.getScheduledTime());
+				jobInfo.put("status", job.getStatus());
+				jobInfo.put("totalPrice", job.getTotalPrice());
+				jobInfo.put("createdAt", job.getCreatedAt()); // Thêm thời gian tạo job
+
+				// Thêm thông tin về customer đã book job
+				Customers customer = job.getCustomer();
+				if (customer != null) {
+					jobInfo.put("customerId", customer.getId());
+					jobInfo.put("customerName", customer.getFull_name());
+					jobInfo.put("customerPhone", customer.getPhone());
+				}
+
+				// Thêm thông tin về địa chỉ của customer
+				CustomerAddresses customerAddress = job.getCustomerAddress();
+				if (customerAddress != null) {
+					jobInfo.put("customerAddressId", customerAddress.getId());
+					jobInfo.put("customerAddress", customerAddress.getAddress());
+					jobInfo.put("latitude", customerAddress.getLatitude());
+					jobInfo.put("longitude", customerAddress.getLongitude());
+				}
+
+				// Lấy tất cả các JobServiceDetail cho job này
+				List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(job.getId());
+
+				// Nếu có dịch vụ, thêm vào jobInfo
+				if (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {
+					List<Map<String, Object>> serviceList = new ArrayList<>();
+
+					// Duyệt qua tất cả các dịch vụ trong bảng job_service_detail
+					for (JobServiceDetail jobServiceDetail : jobServiceDetails) {
+						Services service = jobServiceDetail.getService();
+						if (service != null) {
+							Map<String, Object> serviceInfo = new HashMap<>();
+							serviceInfo.put("serviceName", service.getName()); // Lấy tên dịch vụ
+							serviceInfo.put("serviceDescription", service.getDescription());
+
+							// Lấy các chi tiết dịch vụ
+							ServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();
+							if (serviceDetail != null) {
+								serviceInfo.put("serviceDetailId", serviceDetail.getId());
+								serviceInfo.put("serviceDetailName", serviceDetail.getName());
+								serviceInfo.put("price", serviceDetail.getPrice());
+								serviceInfo.put("additionalPrice", serviceDetail.getAdditionalPrice());
+								serviceInfo.put("areaRange", serviceDetail.getAreaRange());
+								serviceInfo.put("description", serviceDetail.getDescription());
+								serviceInfo.put("discounts", serviceDetail.getDiscounts());
+							}
+
+							serviceList.add(serviceInfo);
+						}
+					}
+
+					// Thêm thông tin dịch vụ vào jobInfo
+					jobInfo.put("services", serviceList);
+				} else {
+					// Nếu không có dịch vụ nào, thông báo không có dịch vụ
+					jobInfo.put("services", "No services found for this job");
+				}
+
+				inProgressJobs.add(jobInfo); // Thêm thông tin job vào danh sách
+			}
+		}
+
+		return inProgressJobs; // Trả về danh sách các công việc đang làm
+	}
+
+	// ds job mà cleaner đã apply
+	public List<Map<String, Object>> getAppliedJobsForCleaner2(Long cleanerId) {
+	    List<Map<String, Object>> appliedJobs = new ArrayList<>();
+
+	    // Lấy danh sách tất cả các JobApplication mà cleaner đã ứng tuyển và có trạng thái "PENDING"
+	    List<JobApplication> jobApplications = jobApplicationRepository.findByCleanerIdAndStatus(cleanerId, "Pending");
+
+	    // Kiểm tra nếu không có công việc nào đã ứng tuyển
+	    if (jobApplications.isEmpty()) {
+	        return appliedJobs; // Trả về danh sách trống nếu không có công việc
+	    }
+
+	    // Duyệt qua từng JobApplication và lấy thông tin chi tiết của Job
+	    for (JobApplication jobApplication : jobApplications) {
+	        Job job = jobApplication.getJob(); // Lấy Job từ JobApplication
+
+	        // Chỉ lấy các job có trạng thái "OPEN"
+	        if (!job.getStatus().equals(JobStatus.OPEN)) {
+	            continue; // Bỏ qua job không có trạng thái "OPEN"
+	        }
+
+	        Map<String, Object> jobInfo = new HashMap<>();
+	        jobInfo.put("jobId", job.getId());
+	        jobInfo.put("status", job.getStatus());
+	        jobInfo.put("scheduledTime", job.getScheduledTime());
+	        jobInfo.put("totalPrice", job.getTotalPrice());
+	        jobInfo.put("createdAt", job.getCreatedAt()); // Thêm thời gian tạo job
+
+	        // Thêm thông tin về customer đã book job
+	        Customers customer = job.getCustomer();
+	        if (customer != null) {
+	            jobInfo.put("customerId", customer.getId());
+	            jobInfo.put("customerName", customer.getFull_name());
+	            jobInfo.put("customerPhone", customer.getPhone());
+	        }
+
+	        // Thêm thông tin về địa chỉ của customer
+	        CustomerAddresses customerAddress = job.getCustomerAddress();
+	        if (customerAddress != null) {
+	            jobInfo.put("customerAddressId", customerAddress.getId());
+	            jobInfo.put("customerAddress", customerAddress.getAddress());
+	            jobInfo.put("latitude", customerAddress.getLatitude());
+	            jobInfo.put("longitude", customerAddress.getLongitude());
+	        }
+
+	        // Lấy tất cả các JobServiceDetail cho job này
+	        List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(job.getId());
+
+	        // Nếu có dịch vụ, thêm vào jobInfo
+	        if (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {
+	            List<Map<String, Object>> serviceList = new ArrayList<>();
+
+	            // Duyệt qua tất cả các dịch vụ trong bảng job_service_detail
+	            for (JobServiceDetail jobServiceDetail : jobServiceDetails) {
+	                Services service = jobServiceDetail.getService();
+	                if (service != null) {
+	                    Map<String, Object> serviceInfo = new HashMap<>();
+	                    serviceInfo.put("serviceName", service.getName()); // Lấy tên dịch vụ
+	                    serviceInfo.put("serviceDescription", service.getDescription());
+
+	                    // Lấy các chi tiết dịch vụ
+	                    ServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();
+	                    if (serviceDetail != null) {
+	                        serviceInfo.put("serviceDetailId", serviceDetail.getId());
+	                        serviceInfo.put("serviceDetailName", serviceDetail.getName());
+	                        serviceInfo.put("price", serviceDetail.getPrice());
+	                        serviceInfo.put("additionalPrice", serviceDetail.getAdditionalPrice());
+	                        serviceInfo.put("areaRange", serviceDetail.getAreaRange());
+	                        serviceInfo.put("description", serviceDetail.getDescription());
+	                        serviceInfo.put("discounts", serviceDetail.getDiscounts());
+	                    }
+
+	                    serviceList.add(serviceInfo);
+	                }
+	            }
+
+	            // Thêm thông tin dịch vụ vào jobInfo
+	            jobInfo.put("services", serviceList);
+	        } else {
+	            // Nếu không có dịch vụ nào, thông báo không có dịch vụ
+	            jobInfo.put("services", "No services found for this job");
+	        }
+
+	        appliedJobs.add(jobInfo); // Thêm thông tin job vào danh sách
+	    }
+
+	    return appliedJobs; // Trả về danh sách các công việc đã ứng tuyển
+	}
+
+
+	// list job theo service và số lượng
+	public Map<String, Object> getJobsByService() {
+		Map<String, Object> jobsByService = new HashMap<>();
+		Map<String, Object> comboJobs = new HashMap<>(); // Dành cho các công việc combo (chỉ đếm số lượng)
+		String comboKey = "combo"; // Sử dụng một ID duy nhất cho combo
+
+		List<Services> services = serviceRepository.findAll(); // Lấy tất cả các dịch vụ
+
+		Set<Long> countedJobIds = new HashSet<Long>(); // Set để theo dõi các job_id đã đếm
+
+		// Duyệt qua tất cả các dịch vụ
+		for (Services service : services) {
+			String serviceName = service.getName(); // Lấy tên dịch vụ
+			Long serviceId = service.getId(); // Lấy ID dịch vụ
+
+			// Nếu dịch vụ chưa tồn tại trong danh sách, tạo mới
+			if (!jobsByService.containsKey(serviceName)) {
+				Map<String, Object> serviceInfo = new HashMap<>();
+				serviceInfo.put("serviceId", serviceId); // Thêm serviceId vào service info
+				serviceInfo.put("serviceName", serviceName);
+				serviceInfo.put("jobCount", 0); // Bắt đầu đếm số lượng công việc
+				jobsByService.put(serviceName, serviceInfo);
+			}
+
+			// Lấy tất cả các JobServiceDetail cho dịch vụ này
+			List<JobServiceDetail> jobServiceDetailsForService = jobServiceDetailRepository
+					.findByServiceId(service.getId());
+
+			// Duyệt qua các JobServiceDetail liên kết với dịch vụ này
+			for (JobServiceDetail jobServiceDetail : jobServiceDetailsForService) {
+				Job job = jobServiceDetail.getJob();
+
+				if (job != null && job.getStatus() == JobStatus.OPEN) { // Kiểm tra job có trạng thái OPEN
+					// Kiểm tra nếu job chưa được đếm
+					if (!countedJobIds.contains(job.getId())) {
+						// Lấy thông tin dịch vụ từ Map jobsByService
+						Map<String, Object> serviceInfo = (Map<String, Object>) jobsByService.get(serviceName);
+
+						// Kiểm tra nếu job có nhiều dịch vụ (tức là combo)
+						List<JobServiceDetail> jobServiceDetailsForJob = jobServiceDetailRepository
+								.findByJobId(job.getId());
+
+						// Nếu job có nhiều dịch vụ thì đếm là combo
+						if (jobServiceDetailsForJob.size() > 1) {
+							// Nếu combo chưa được đếm
+							if (!comboJobs.containsKey(comboKey)) {
+								Map<String, Object> comboInfo = new HashMap<>();
+								comboInfo.put("jobCount", 0);
+								comboInfo.put("id", comboKey); // Sử dụng một ID duy nhất cho combo
+								comboJobs.put(comboKey, comboInfo);
+							}
+
+							// Lấy thông tin combo và tăng số lượng combo
+							Map<String, Object> comboInfo = (Map<String, Object>) comboJobs.get(comboKey);
+							int comboCount = (int) comboInfo.get("jobCount");
+							comboInfo.put("jobCount", comboCount + 1);
+						} else {
+							// Nếu job chỉ có một dịch vụ thì đếm vào dịch vụ
+							int jobCount = (int) serviceInfo.get("jobCount");
+							serviceInfo.put("jobCount", jobCount + 1);
+						}
+
+						// Đánh dấu job này đã được đếm
+						countedJobIds.add(job.getId());
+					}
+				}
+			}
+		}
+
+		// Kết hợp kết quả của comboJobs với jobsByService
+		jobsByService.put("combo", comboJobs.get(comboKey)); // Chỉ giữ 1 ID duy nhất cho combo
+
+		// Đảm bảo nếu dịch vụ không có công việc nào thì hiển thị jobCount là 0
+		for (String serviceName : jobsByService.keySet()) {
+			Map<String, Object> serviceInfo = (Map<String, Object>) jobsByService.get(serviceName);
+			if (serviceInfo.get("jobCount") == null) {
+				serviceInfo.put("jobCount", 0); // Nếu không có công việc, đặt jobCount là 0
+			}
+		}
+
+		return jobsByService; // Trả về danh sách các công việc phân loại theo dịch vụ, bao gồm cả combo
+	}
+
+	// xem các job thuộc phần filter service
+	public List<Map<String, Object>> getJobsDetailsByService(Long serviceId) {
+		List<Map<String, Object>> jobDetailsList = new ArrayList<>();
+
+		// Lấy danh sách các JobServiceDetail liên quan đến serviceId
+		List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByServiceId(serviceId);
+
+		// Duyệt qua các JobServiceDetail để lấy chi tiết job
+		for (JobServiceDetail jobServiceDetail : jobServiceDetails) {
+			Job job = jobServiceDetail.getJob();
+			if (job != null && job.getStatus() == JobStatus.OPEN) {
+				Map<String, Object> jobInfo = new HashMap<>();
+				jobInfo.put("jobId", job.getId());
+				jobInfo.put("serviceName", jobServiceDetail.getService().getName());
+				jobInfo.put("status", job.getStatus());
+				jobInfo.put("scheduledTime", job.getScheduledTime());
+				jobInfo.put("totalPrice", job.getTotalPrice());
+				jobInfo.put("createdAt", job.getCreatedAt());
+
+				// Thêm thông tin về customer đã book job
+				Customers customer = job.getCustomer();
+				if (customer != null) {
+					jobInfo.put("customerId", customer.getId());
+					jobInfo.put("customerName", customer.getFull_name());
+					jobInfo.put("customerPhone", customer.getPhone());
+				}
+
+				// Thêm thông tin về địa chỉ của customer
+				CustomerAddresses customerAddress = job.getCustomerAddress();
+				if (customerAddress != null) {
+					jobInfo.put("customerAddressId", customerAddress.getId());
+					jobInfo.put("customerAddress", customerAddress.getAddress());
+					jobInfo.put("latitude", customerAddress.getLatitude());
+					jobInfo.put("longitude", customerAddress.getLongitude());
+				}
+
+				// Lấy tất cả các JobServiceDetail cho job này
+				List<JobServiceDetail> jobServiceDetailsForJob = jobServiceDetailRepository.findByJobId(job.getId());
+				List<Map<String, String>> services = new ArrayList<>();
+				for (JobServiceDetail jobServiceDetailForJob : jobServiceDetailsForJob) {
+					Map<String, String> serviceInfo = new HashMap<>();
+					Services service = jobServiceDetailForJob.getService();
+					serviceInfo.put("serviceName", service.getName());
+					serviceInfo.put("serviceDescription", service.getDescription());
+					services.add(serviceInfo);
+				}
+
+				jobInfo.put("services", services);
+				jobDetailsList.add(jobInfo);
+			}
+		}
+
+		return jobDetailsList;
+	}
+
+	// lấy cac job đang là combo
+	public List<Map<String, Object>> getComboJobs() {
+		List<Map<String, Object>> comboJobs = new ArrayList<>();
+
+		// Lấy tất cả các JobServiceDetail
+		List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findAll();
+
+		// Set để theo dõi các job_id đã đếm
+		Set<Long> countedJobIds = new HashSet<>();
+
+		// Duyệt qua các JobServiceDetail để xác định các job combo
+		for (JobServiceDetail jobServiceDetail : jobServiceDetails) {
+			Job job = jobServiceDetail.getJob();
+			if (job != null && job.getStatus() == JobStatus.OPEN) { // Kiểm tra job có trạng thái OPEN
+				// Kiểm tra nếu job chưa được đếm
+				if (!countedJobIds.contains(job.getId())) {
+					// Lấy tất cả các JobServiceDetail liên quan đến job này
+					List<JobServiceDetail> jobServiceDetailsForJob = jobServiceDetailRepository
+							.findByJobId(job.getId());
+
+					// Nếu job có nhiều dịch vụ, tính là combo
+					if (jobServiceDetailsForJob.size() > 1) {
+						Map<String, Object> jobInfo = new HashMap<>();
+						jobInfo.put("jobId", job.getId());
+						jobInfo.put("status", job.getStatus());
+						jobInfo.put("scheduledTime", job.getScheduledTime());
+						jobInfo.put("totalPrice", job.getTotalPrice());
+						jobInfo.put("createdAt", job.getCreatedAt());
+
+						// Thêm thông tin về customer đã book job
+						Customers customer = job.getCustomer();
+						if (customer != null) {
+							jobInfo.put("customerId", customer.getId());
+							jobInfo.put("customerName", customer.getFull_name());
+							jobInfo.put("customerPhone", customer.getPhone());
+						}
+
+						// Thêm thông tin về địa chỉ của customer
+						CustomerAddresses customerAddress = job.getCustomerAddress();
+						if (customerAddress != null) {
+							jobInfo.put("customerAddressId", customerAddress.getId());
+							jobInfo.put("customerAddress", customerAddress.getAddress());
+							jobInfo.put("latitude", customerAddress.getLatitude());
+							jobInfo.put("longitude", customerAddress.getLongitude());
+						}
+
+						// Lấy tất cả các dịch vụ liên quan đến job này
+						List<JobServiceDetail> jobServiceDetailsForCombo = jobServiceDetailRepository
+								.findByJobId(job.getId());
+						List<Map<String, String>> services = new ArrayList<>();
+						for (JobServiceDetail jobServiceDetailForCombo : jobServiceDetailsForCombo) {
+							Map<String, String> serviceInfo = new HashMap<>();
+							Services service = jobServiceDetailForCombo.getService();
+							serviceInfo.put("serviceName", service.getName());
+							serviceInfo.put("serviceDescription", service.getDescription());
+							services.add(serviceInfo);
+						}
+
+						jobInfo.put("services", services);
+						comboJobs.add(jobInfo);
+					}
+
+					countedJobIds.add(job.getId()); // Đánh dấu job này đã được đếm
+				}
+			}
+		}
+
+		return comboJobs;
+	}
+
 	// LUỒNG CODE 2
 
 //	public List<Map<String, Object>> getOnlineCleaners() {
@@ -528,73 +1049,75 @@
 //		return cleanerList;
 //	}
 
-	public List<Map<String, Object>> getOnlineCleaners() {
-	    return UserStatusWebSocketHandler.getOnlineCleaners().values().stream().map(cleanerSessionInfo -> {
-	        Map<String, Object> cleanerInfo = Map.of(
-	                "cleanerId", cleanerSessionInfo.getCleanerId(), 
-	                "cleanerName", cleanerSessionInfo.getCleanerName(), 
-	                "profileImage", cleanerSessionInfo.getProfileImage(),
-	                "status", true // Assuming the cleaner is online, status = true
-	        );
-	        return cleanerInfo;
-	    }).collect(Collectors.toList());
-	}
+//	public List<Map<String, Object>> getOnlineCleaners() {
+//	    // Ghi log kiểm tra trạng thái onlineCleaners
+//	    System.out.println("Online Cleaners Map: " + .getOnlineCleaners());
+//
+//	    return UserStatusWebSocketHandler.getOnlineCleaners().values().stream().map(cleanerSessionInfo -> {
+//	        Map<String, Object> cleanerInfo = new HashMap<>();
+//	        cleanerInfo.put("cleanerId", cleanerSessionInfo.getCleanerId());
+//	        cleanerInfo.put("cleanerName", cleanerSessionInfo.getCleanerName());
+//	        cleanerInfo.put("profileImage", cleanerSessionInfo.getProfileImage());
+//	        cleanerInfo.put("status", true);
+//
+//	        return cleanerInfo;
+//	    }).collect(Collectors.toList());
+//	}
+
 
 
 	// xem detail cleaner không cần đk
 	public Map<String, Object> getCleanerDetailnone(Long cleanerId) {
-		// Tìm cleaner theo cleanerId
-		Optional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);
-		if (!cleanerOpt.isPresent()) {
-			return Map.of("message", "Cleaner not found");
-		}
+	    // Tìm cleaner theo cleanerId
+	    Optional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);
+	    if (!cleanerOpt.isPresent()) {
+	        return Map.of("message", "Cleaner not found");
+	    }
 
-		Employee cleaner = cleanerOpt.get();
+	    Employee cleaner = cleanerOpt.get();
 
-		// Tạo map chứa thông tin của cleaner
-		Map<String, Object> cleanerInfo = new HashMap<>();
-		cleanerInfo.put("cleanerId", cleaner.getId());
-		cleanerInfo.put("cleanerName", cleaner.getName());
-		cleanerInfo.put("profileImage", cleaner.getProfile_image());
+	    // Tạo map chứa thông tin của cleaner
+	    Map<String, Object> cleanerInfo = new HashMap<>();
+	    cleanerInfo.put("cleanerId", cleaner.getId());
+	    cleanerInfo.put("cleanerName", cleaner.getName());
+	    cleanerInfo.put("profileImage", cleaner.getProfile_image());
 
-		// Lấy tất cả các Job mà cleaner đã làm từ JobApplication
-		List<JobApplication> jobApplications = jobApplicationRepository.findByCleanerId(cleanerId);
-		if (jobApplications.isEmpty()) {
-			cleanerInfo.put("feedbacks", "No feedback yet");
-			cleanerInfo.put("averageRating", 0);
-			return cleanerInfo;
-		}
+	    // Lấy tất cả các Job mà cleaner đã làm từ JobApplication
+	    List<JobApplication> jobApplications = jobApplicationRepository.findByCleanerId(cleanerId);
+	    if (jobApplications.isEmpty()) {
+	        cleanerInfo.put("averageRating", 0); // Nếu không có công việc nào, trả về trung bình rating là 0
+	        return cleanerInfo;
+	    }
 
-		// Lấy tất cả feedbacks từ các job mà cleaner đã làm
-		List<Map<String, Object>> feedbackList = new ArrayList<>();
-		int totalRating = 0;
-		int feedbackCount = 0;
+	    // Tính toán trung bình rating từ các feedbacks của các job mà cleaner đã làm
+	    int totalRating = 0;
+	    int feedbackCount = 0;
 
-		for (JobApplication jobApplication : jobApplications) {
-			Job job = jobApplication.getJob(); // Lấy Job từ JobApplication
+	    for (JobApplication jobApplication : jobApplications) {
+	        Job job = jobApplication.getJob(); // Lấy Job từ JobApplication
 
-			// Lấy feedbacks cho Job này
-			List<Feedback> feedbacks = feedbackRepository.findByJobId(job.getId());
-			for (Feedback feedback : feedbacks) {
-				Map<String, Object> feedbackInfo = new HashMap<>();
-				feedbackInfo.put("rating", feedback.getRating());
-				feedbackInfo.put("comment", feedback.getComment());
-				feedbackList.add(feedbackInfo);
-
-				totalRating += feedback.getRating(); // Cộng dồn rating
-				feedbackCount++;
-			}
-		}
+	        // Lấy feedbacks cho Job này
+	        List<Feedback> feedbacks = feedbackRepository.findByJobId(job.getId());
+	        for (Feedback feedback : feedbacks) {
+	            totalRating += feedback.getRating(); // Cộng dồn rating
+	            feedbackCount++;
+	        }
+	    }
 
-		// Tính trung bình rating nếu có feedback
-		double averageRating = feedbackCount > 0 ? (double) totalRating / feedbackCount : 0;
+	    // Tính trung bình rating nếu có feedback
+	    double averageRating = feedbackCount > 0 ? (double) totalRating / feedbackCount : 0;
 
-		cleanerInfo.put("averageRating", averageRating); // Thêm trung bình rating vào thông tin cleaner
-		cleanerInfo.put("feedbacks", feedbackList); // Thêm danh sách feedbacks vào thông tin cleaner
+	    // Định dạng trung bình rating chỉ với 1 chữ số sau dấu phẩy
+	    DecimalFormat df = new DecimalFormat("#.#");
+	    String formattedAverageRating = df.format(averageRating);
+
+	    // Thêm thông tin vào map cleanerInfo
+	    cleanerInfo.put("averageRating", formattedAverageRating); // Thêm trung bình rating vào thông tin cleaner
 
-		return cleanerInfo;
+	    return cleanerInfo;
 	}
 
+
 	public Map<String, Object> getCleanerDetails(Long cleanerId) {
 		// Tìm cleaner theo cleanerId
 		Optional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);
@@ -667,7 +1190,8 @@
 	    job.setCustomer(customer);
 	    job.setCustomerAddress(customerAddress);
 	    job.setScheduledTime(jobTime);
-	    job.setStatus(JobStatus.BOOKED);  // Đặt trạng thái job là BOOKED
+	    job.setStatus(JobStatus.BOOKED); // Đặt trạng thái job là BOOKED
+	    job.setPaymentMethod(request.getPaymentMethod()); // Lưu phương thức thanh toán vào job ngay khi tạo job
 
 	    // Kiểm tra cleaner
 	    Optional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);
@@ -679,22 +1203,30 @@
 	    job.setCleaner(cleaner);
 
 	    // Kiểm tra trùng lịch của cleaner
-	    List<Job> existingJobs = jobRepository.findByCleanerIdAndScheduledTimeBetween(cleanerId,
-	            jobTime.minusHours(2), jobTime.plusHours(2));
+	    List<Job> existingJobs = jobRepository.findByCleanerIdAndScheduledTimeBetween(cleanerId, jobTime.minusHours(2), jobTime.plusHours(2));
 	    if (!existingJobs.isEmpty()) {
-	        response.put("message", "Người dọn dẹp có lịch trình chồng chéo hoặc khoảng cách thời gian giữa các công việc ít hơn 2 giờ");
+	        response.put("message", "Cleaner has overlapping schedule or the time gap between jobs is less than 2 hours");
 	        return response;
 	    }
 
 	    // Lưu Job vào cơ sở dữ liệu trước
 	    job = jobRepository.save(job);
 
+	    // Tạo JobApplication cho cleaner và job
+	    JobApplication jobApplication = new JobApplication();
+	    jobApplication.setJob(job);
+	    jobApplication.setCleaner(cleaner);
+	    jobApplication.setStatus("Pending");  // Đặt trạng thái là "Pending"
+	    jobApplication.setAppliedAt(LocalDateTime.now());  // Gán thời gian ứng tuyển
+
+	    // Lưu JobApplication vào cơ sở dữ liệu
+	    jobApplicationRepository.save(jobApplication);
+
 	    // Tính toán giá cho tất cả các dịch vụ
 	    double totalPrice = 0;
 	    List<JobServiceDetail> jobServiceDetails = new ArrayList<>();
 
 	    for (ServiceRequest serviceRequest : request.getServices()) {
-
 	        // Kiểm tra dịch vụ
 	        Optional<Services> serviceOpt = serviceRepository.findById(serviceRequest.getServiceId());
 	        if (!serviceOpt.isPresent()) {
@@ -731,9 +1263,9 @@
 
 	        // Tạo JobServiceDetail và lưu vào cơ sở dữ liệu
 	        JobServiceDetail jobServiceDetail = new JobServiceDetail();
-	        jobServiceDetail.setJob(job);  // Gắn job vào JobServiceDetail
-	        jobServiceDetail.setService(service);  // Gắn service vào JobServiceDetail
-	        jobServiceDetail.setServiceDetail(serviceDetail);  // Gắn serviceDetail vào JobServiceDetail
+	        jobServiceDetail.setJob(job); // Gắn job vào JobServiceDetail
+	        jobServiceDetail.setService(service); // Gắn service vào JobServiceDetail
+	        jobServiceDetail.setServiceDetail(serviceDetail); // Gắn serviceDetail vào JobServiceDetail
 
 	        // Thêm JobServiceDetail vào danh sách
 	        jobServiceDetails.add(jobServiceDetail);
@@ -751,140 +1283,188 @@
 	    response.put("jobId", job.getId());
 	    response.put("status", job.getStatus());
 	    response.put("totalPrice", totalPrice);
+	    response.put("paymentMethod", job.getPaymentMethod());  // Trả về phương thức thanh toán
 
 	    return response;
 	}
 
 
-	public List<Map<String, Object>> getJobsBookedForCleaner(@RequestParam Long cleanerId) {
-		List<Map<String, Object>> responseList = new ArrayList<>();
+
+
+
+
+	public List<Map<String, Object>> getJobsBookedForCleaner(@PathVariable Long cleanerId) {
+	    List<Map<String, Object>> responseList = new ArrayList<>();
 
-		// Tìm cleaner theo cleanerId
-		Optional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);
-		if (!cleanerOpt.isPresent()) {
-			responseList.add(Map.of("message", "Cleaner not found with cleanerId: " + cleanerId));
-			return responseList;
-		}
+	    // Tìm cleaner theo cleanerId
+	    Optional<Employee> cleanerOpt = cleanerRepository.findById(cleanerId);
+	    if (!cleanerOpt.isPresent()) {
+	        responseList.add(Map.of("message", "Cleaner not found with cleanerId: " + cleanerId));
+	        return responseList;
+	    }
 
-		Employee cleaner = cleanerOpt.get();
+	    Employee cleaner = cleanerOpt.get();
 
-		// Tìm tất cả các job mà cleaner đã được gán
-		List<Job> jobs = jobRepository.findByCleanerId(cleanerId);
-		if (jobs.isEmpty()) {
-			responseList.add(Map.of("message", "No jobs found for cleaner with cleanerId: " + cleanerId));
-			return responseList;
-		}
+	    // Tìm tất cả các job mà cleaner đã được gán với trạng thái "BOOKED"
+	    List<Job> jobs = jobRepository.findByCleanerIdAndStatus(cleanerId, JobStatus.BOOKED);
+	
 
-		// Lấy thông tin các job mà cleaner được book
-		for (Job job : jobs) {
-			Map<String, Object> jobInfo = new HashMap<>();
+	    // Lấy thông tin các job mà cleaner được book
+	    for (Job job : jobs) {
+	        Map<String, Object> jobInfo = new HashMap<>();
 
-			// Thêm thông tin về job
-			jobInfo.put("jobId", job.getId());
-			jobInfo.put("status", job.getStatus());
-			jobInfo.put("scheduledTime", job.getScheduledTime());
+	        // Thêm thông tin về job
+	        jobInfo.put("jobId", job.getId());
+	        jobInfo.put("status", job.getStatus());
+	        jobInfo.put("scheduledTime", job.getScheduledTime());
+	        jobInfo.put("totalPrice", job.getTotalPrice());
+	        jobInfo.put("createdAt", job.getCreatedAt());
 
-			// Thêm thông tin về customer
-			Customers customer = job.getCustomer();
-			jobInfo.put("customerId", customer.getId());
-			jobInfo.put("customerName", customer.getFull_name());
-			jobInfo.put("customerPhone", customer.getPhone());
+	        // Thêm thông tin về customer
+	        Customers customer = job.getCustomer();
+	        if (customer != null) {
+	            jobInfo.put("customerId", customer.getId());
+	            jobInfo.put("customerName", customer.getFull_name());
+	            jobInfo.put("customerPhone", customer.getPhone());
+	        }
+
+	        // Lấy thông tin về địa chỉ của customer
+	        CustomerAddresses customerAddress = job.getCustomerAddress();
+	        if (customerAddress != null) {
+	            jobInfo.put("customerAddressId", customerAddress.getId());
+	            jobInfo.put("customerAddress", customerAddress.getAddress());
+	            jobInfo.put("latitude", customerAddress.getLatitude());
+	            jobInfo.put("longitude", customerAddress.getLongitude());
+	        }
 
-			// Lấy tất cả các JobServiceDetail cho job này
-			List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(job.getId());
-			if (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {
-				List<Map<String, Object>> serviceList = new ArrayList<>();
+	        // Lấy tất cả các JobServiceDetail cho job này
+	        List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(job.getId());
+	        if (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {
+	            List<Map<String, Object>> serviceList = new ArrayList<>();
 
-				// Duyệt qua tất cả các dịch vụ trong bảng job_service_detail
-				for (JobServiceDetail jobServiceDetail : jobServiceDetails) {
-					Services service = jobServiceDetail.getService();
-					if (service != null) {
-						Map<String, Object> serviceInfo = new HashMap<>();
-						serviceInfo.put("serviceName", service.getName());
+	            // Duyệt qua tất cả các dịch vụ trong bảng job_service_detail
+	            for (JobServiceDetail jobServiceDetail : jobServiceDetails) {
+	                Services service = jobServiceDetail.getService();
+	                if (service != null) {
+	                    Map<String, Object> serviceInfo = new HashMap<>();
+	                    serviceInfo.put("serviceName", service.getName());
+	                    serviceInfo.put("serviceDescription", service.getDescription());
 
-						// Lấy thông tin chi tiết dịch vụ
-						ServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();
-						if (serviceDetail != null) {
-							serviceInfo.put("serviceDetailName", serviceDetail.getName());
-						}
+	                    // Lấy thông tin chi tiết dịch vụ
+	                    ServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();
+	                    if (serviceDetail != null) {
+	                        serviceInfo.put("serviceDetailName", serviceDetail.getName());
+	                        serviceInfo.put("price", serviceDetail.getPrice());
+	                        serviceInfo.put("additionalPrice", serviceDetail.getAdditionalPrice());
+	                        serviceInfo.put("areaRange", serviceDetail.getAreaRange());
+	                        serviceInfo.put("description", serviceDetail.getDescription());
+	                        serviceInfo.put("discounts", serviceDetail.getDiscounts());
+	                    }
 
-						serviceList.add(serviceInfo);
-					}
-				}
+	                    serviceList.add(serviceInfo);
+	                }
+	            }
 
-				// Thêm thông tin dịch vụ vào jobInfo
-				jobInfo.put("services", serviceList);
-			}
+	            // Thêm thông tin dịch vụ vào jobInfo
+	            jobInfo.put("services", serviceList);
+	        } else {
+	            // Nếu không có dịch vụ nào, thông báo không có dịch vụ
+	            jobInfo.put("services", "No services found for this job");
+	        }
 
-			responseList.add(jobInfo);
-		}
+	        responseList.add(jobInfo);
+	    }
 
-		return responseList;
+	    return responseList;
 	}
 
+
+
 	public Map<String, Object> acceptOrRejectJob(Long jobId, String action) {
-		Map<String, Object> response = new HashMap<>();
+	    Map<String, Object> response = new HashMap<>();
 
-		// Lấy thông tin cleaner từ SecurityContext
-		String phoneNumber = SecurityContextHolder.getContext().getAuthentication().getName();
-		Optional<Employee> cleanerOpt = cleanerRepository.findByPhone(phoneNumber);
-		if (!cleanerOpt.isPresent()) {
-			response.put("message", "Cleaner not found");
-			return response;
-		}
-		Employee cleaner = cleanerOpt.get();
+	    // Lấy thông tin cleaner từ SecurityContext
+	    String phoneNumber = SecurityContextHolder.getContext().getAuthentication().getName();
+	    Optional<Employee> cleanerOpt = cleanerRepository.findByPhone(phoneNumber);
+	    if (!cleanerOpt.isPresent()) {
+	        response.put("message", "Cleaner not found");
+	        return response;
+	    }
+	    Employee cleaner = cleanerOpt.get();
 
-		// Tìm công việc theo jobId
-		Optional<Job> jobOpt = jobRepository.findById(jobId);
-		if (!jobOpt.isPresent()) {
-			response.put("message", "Job not found");
-			return response;
-		}
-		Job job = jobOpt.get();
+	    // Tìm công việc theo jobId
+	    Optional<Job> jobOpt = jobRepository.findById(jobId);
+	    if (!jobOpt.isPresent()) {
+	        response.put("message", "Job not found");
+	        return response;
+	    }
+	    Job job = jobOpt.get();
 
-		// Kiểm tra nếu công việc đã được giao cho cleaner
-		Optional<JobApplication> jobApplicationOpt = jobApplicationRepository.findByJobAndCleaner(job, cleaner);
-		if (!jobApplicationOpt.isPresent()) {
-			response.put("message", "This job has not been assigned to you");
-			return response;
-		}
-		JobApplication jobApplication = jobApplicationOpt.get();
+	    // Kiểm tra nếu công việc đã được giao cho cleaner
+	    Optional<JobApplication> jobApplicationOpt = jobApplicationRepository.findByJobAndCleaner(job, cleaner);
+	    if (!jobApplicationOpt.isPresent()) {
+	        response.put("message", "This job has not been assigned to you");
+	        return response;
+	    }
+	    JobApplication jobApplication = jobApplicationOpt.get();
 
-		// Kiểm tra trạng thái của job application trước khi chấp nhận hoặc từ chối
-		if (jobApplication.getStatus().equals("Accepted") || jobApplication.getStatus().equals("Rejected")) {
-			response.put("message", "You have already accepted or rejected this job");
-			return response;
-		}
+	    // Kiểm tra trạng thái của job application trước khi chấp nhận hoặc từ chối
+	    if (jobApplication.getStatus().equals("Accepted") || jobApplication.getStatus().equals("Rejected")) {
+	        response.put("message", "You have already accepted or rejected this job");
+	        return response;
+	    }
 
-		// Xử lý chấp nhận hoặc từ chối
-		if ("accept".equalsIgnoreCase(action)) {
-			// Nếu chọn accept, từ chối tất cả các ứng viên khác
-			List<JobApplication> otherApplications = jobApplicationRepository.findByJob(job);
-			for (JobApplication app : otherApplications) {
-				if (!app.getCleaner().getId().equals(cleaner.getId())) {
-					app.setStatus("Rejected");
-					jobApplicationRepository.save(app);
-				}
-			}
-			jobApplication.setStatus("Accepted");
-			job.setStatus(JobStatus.IN_PROGRESS); // Đặt trạng thái công việc là "IN_PROGRESS"
-			response.put("message", "Job has been accepted");
-		} else if ("reject".equalsIgnoreCase(action)) {
-			jobApplication.setStatus("Rejected");
-			response.put("message", "Job has been rejected");
-		} else {
-			response.put("message", "Invalid action. Use 'accept' or 'reject'");
-			return response;
-		}
+	    // Kiểm tra số dư trong ví của cleaner nếu action là accept
+	    if ("accept".equalsIgnoreCase(action)) {
+	        // Kiểm tra ví của cleaner
+	        Optional<Wallet> walletOpt = walletRepository.findByCleanerId(cleaner.getId());
+	        if (!walletOpt.isPresent()) {
+	            response.put("message", "Cleaner wallet not found");
+	            return response;
+	        }
+	        Wallet wallet = walletOpt.get();
+
+	        // Tính hoa hồng (20% của tổng giá trị đơn hàng)
+	        double commission = 0.2 * job.getTotalPrice();
+
+	        // Kiểm tra số dư ví của cleaner có đủ để trừ hoa hồng không
+	        if (wallet.getBalance() < commission) {
+	            response.put("message", "Insufficient balance in cleaner's wallet");
+	            return response;
+	        }
+
+	        // Nếu số dư đủ, cho phép accept
+	        // Từ chối tất cả các ứng viên khác
+	        List<JobApplication> otherApplications = jobApplicationRepository.findByJob(job);
+	        for (JobApplication app : otherApplications) {
+	            if (!app.getCleaner().getId().equals(cleaner.getId())) {
+	                app.setStatus("Rejected");
+	                jobApplicationRepository.save(app);
+	            }
+	        }
+	        jobApplication.setStatus("Accepted");
+	        job.setStatus(JobStatus.IN_PROGRESS);  // Đặt trạng thái công việc là IN_PROGRESS
+	        response.put("message", "Job has been accepted");
+	    } else if ("reject".equalsIgnoreCase(action)) {
+	        // Khi job bị reject, cập nhật trạng thái job về CANCELLED
+	        jobApplication.setStatus("Rejected");
+	        job.setStatus(JobStatus.CANCELLED);  // Đặt trạng thái công việc là CANCELLED
+	        response.put("message", "Job has been rejected and cancelled");
+	    } else {
+	        response.put("message", "Invalid action. Use 'accept' or 'reject'");
+	        return response;
+	    }
 
-		// Lưu các thay đổi vào cơ sở dữ liệu
-		jobApplicationRepository.save(jobApplication);
-		jobRepository.save(job);
+	    // Lưu các thay đổi vào cơ sở dữ liệu
+	    jobApplicationRepository.save(jobApplication);
+	    jobRepository.save(job);
 
-		response.put("jobId", jobId);
-		response.put("cleanerId", cleaner.getId());
-		response.put("status", jobApplication.getStatus());
-		return response;
+	    response.put("jobId", jobId);
+	    response.put("cleanerId", cleaner.getId());
+	    response.put("status", jobApplication.getStatus());
+	    return response;
 	}
 
+
+
 }
Index: ../FE/home-clean-fe/src/components/api/CleanerDetail.js
===================================================================
diff --git a/../FE/home-clean-fe/src/components/api/CleanerDetail.js b/../FE/home-clean-fe/src/components/api/CleanerDetail.js
deleted file mode 100644
--- a/../FE/home-clean-fe/src/components/api/CleanerDetail.js	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ /dev/null	(revision a23dff11207e9614be8aa47075de863850fad34b)
@@ -1,30 +0,0 @@
-import { BASE_URL } from "../../utils/config";
-
-export async function fetchCleanerDetails(cleanerId) {
-    try {
-        const token = localStorage.getItem("token");
-        const response = await fetch(`${BASE_URL}/customer/viewdetailcleaner/${cleanerId}`, {
-            headers: {
-                "Authorization": `Bearer ${token}`,
-                "Content-Type": "application/json",
-            },
-        });
-
-        if (!response.ok) {
-            throw new Error("Failed to fetch cleaner details");
-        }
-
-        const data = await response.json();
-
-        return {
-            cleanerName: data.cleanerName,
-            averageRating: data.averageRating,
-            profileImage: data.profileImage
-                ? `data:image/png;base64,${data.profileImage}`
-                : null,
-        };
-    } catch (error) {
-        console.error("Error fetching cleaner details:", error);
-        return null;
-    }
-}
Index: src/main/java/com/example/homecleanapi/models/Employee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.models;\n\n\nimport jakarta.persistence.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.stream.Collectors;\n\n@Entity\n@Table(name=\"cleaners\")\npublic class Employee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n    @Column(name = \"password_hash\")\n    private String password;\n    @Column(name = \"full_name\")\n    private String name;\n    @Column(name = \"phone_number\")\n    private String phone;\n    \n    private String email;\n    private Integer age;\n    private String address;\n    \n    private String identity_number;\n    \n    @Column(name = \"identity_verified\")\n    private Boolean is_verified;\n    private String experience;\n    private LocalDateTime created_at;\n    private LocalDateTime updated_at;\n    @Column(name = \"profile_image\", columnDefinition = \"BYTEA\")\n    private byte[] profile_image;\n\n    @Column(name = \"status\")\n    private Boolean status;\n\n    @PrePersist\n    protected void onCreate() {\n        this.is_verified = Boolean.FALSE;\n        this.created_at = LocalDateTime.now();\n        this.updated_at = LocalDateTime.now();\n//        byte[] image = getRandomProfileImage();\n//\n//        if (image == null || image.length == 0) {\n//            System.out.println(\"Không có ảnh, gán null cho profile_image\");\n//            this.profile_image = null;\n//        } else {\n//            System.out.println(\"Lưu ảnh có kích thước: \" + image.length + \" bytes\");\n//            this.profile_image = image;\n//        }\n    }\n\n    \n    public Boolean getStatus() {\n\t\treturn status;\n\t}\n\n\n\tpublic void setStatus(Boolean status) {\n\t\tthis.status = status;\n\t}\n\n\n\tpublic Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public byte[] getProfile_image() {\n        return profile_image;\n    }\n\n    public void setProfile_image(byte[] profile_image) {\n        this.profile_image = profile_image;\n    }\n\n    public String getIdentity_number() {\n        return identity_number;\n    }\n\n    public void setIdentity_number(String identity_number) {\n        this.identity_number = identity_number;\n    }\n\n    public Boolean getIs_verified() {\n        return is_verified;\n    }\n\n    public void setIs_verified(Boolean is_verified) {\n        this.is_verified = is_verified;\n    }\n\n    public String getExperience() {\n        return experience;\n    }\n\n    public void setExperience(String experience) {\n        this.experience = experience;\n    }\n\n    public LocalDateTime getCreated_at() {\n        return created_at;\n    }\n\n    public void setCreated_at(LocalDateTime created_at) {\n        this.created_at = created_at;\n    }\n\n    public LocalDateTime getUpdated_at() {\n        return updated_at;\n    }\n\n    public void setUpdated_at(LocalDateTime updated_at) {\n        this.updated_at = updated_at;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Employee() {\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    private byte[] getRandomProfileImage() {\n        try {\n            Path folder = Paths.get(\"src/main/resources/static/images/profiles\");\n            List<Path> imagePaths = Files.list(folder)\n                    .filter(Files::isRegularFile)\n                    .collect(Collectors.toList());\n\n            if (imagePaths.isEmpty()) {\n                return null;\n            }\n\n            Path randomImagePath = imagePaths.get(new Random().nextInt(imagePaths.size()));\n            return Files.readAllBytes(randomImagePath);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/models/Employee.java b/src/main/java/com/example/homecleanapi/models/Employee.java
--- a/src/main/java/com/example/homecleanapi/models/Employee.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/models/Employee.java	(date 1743672482125)
@@ -1,6 +1,7 @@
 package com.example.homecleanapi.models;
 
 
+import com.example.homecleanapi.dtos.CleanerUpdateProfile;
 import jakarta.persistence.*;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -45,6 +46,7 @@
         this.is_verified = Boolean.FALSE;
         this.created_at = LocalDateTime.now();
         this.updated_at = LocalDateTime.now();
+        this.status = Boolean.FALSE;
 //        byte[] image = getRandomProfileImage();
 //
 //        if (image == null || image.length == 0) {
@@ -142,6 +144,15 @@
     public Employee() {
     }
 
+    public void updateProfile(CleanerUpdateProfile request) {
+        this.setName(request.getName());
+        this.setEmail(request.getEmail());
+        this.setPhone(request.getPhone());
+        this.setAge(request.getAge());
+        this.setIdentity_number(request.getIdentity_number());
+        this.setExperience(request.getExperience());
+    }
+
     public Integer getId() {
         return id;
     }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"openjdk-23\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/.idea/misc.xml	(date 1743672625215)
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.2</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.example</groupId>\n    <artifactId>HomeCleanAPI</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>HomeCleanAPI</name>\n    <description>HomeCleanAPI</description>\n    <url/>\n    <licenses>\n        <license/>\n    </licenses>\n    <developers>\n        <developer/>\n    </developers>\n    <scm>\n        <connection/>\n        <developerConnection/>\n        <tag/>\n        <url/>\n    </scm>\n    <properties>\n        <java.version>17</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-webflux</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springdoc</groupId>\n            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n            <version>2.3.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.postgresql</groupId>\n            <artifactId>postgresql</artifactId>\n            <version>42.7.5</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n            <version>3.4.2</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n            <version>0.12.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-messaging</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-websocket</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>jakarta.websocket</groupId>\n            <artifactId>jakarta.websocket-api</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-mail</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.16.1</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n            <version>4.5.13</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.json</groupId>\n            <artifactId>json</artifactId>\n            <version>20240303</version>\n        </dependency>\n\n        <!-- RabbitMQ -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-amqp</artifactId>\n        </dependency>\n\n        <!-- Redis -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n\n        <!-- Lombok (tuỳ chọn để giảm boilerplate code) -->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.datatype</groupId>\n            <artifactId>jackson-datatype-jsr310</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/pom.xml	(date 1743672482099)
@@ -139,7 +139,7 @@
         <dependency>
             <groupId>org.projectlombok</groupId>
             <artifactId>lombok</artifactId>
-            <optional>true</optional>
+<!--            <optional>true</optional>-->
         </dependency>
 
         <dependency>
Index: src/main/java/com/example/homecleanapi/dtos/BulkNotificationRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.dtos;\n\nimport lombok.*;\n\nimport java.util.List;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class BulkNotificationRequest {\n    private List<Integer> userIds;\n    private NotificationContent notification;\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/dtos/BulkNotificationRequest.java b/src/main/java/com/example/homecleanapi/dtos/BulkNotificationRequest.java
--- a/src/main/java/com/example/homecleanapi/dtos/BulkNotificationRequest.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/dtos/BulkNotificationRequest.java	(date 1743672482114)
@@ -10,5 +10,19 @@
 public class BulkNotificationRequest {
     private List<Integer> userIds;
     private NotificationContent notification;
+	public List<Integer> getUserIds() {
+		return userIds;
+	}
+	public void setUserIds(List<Integer> userIds) {
+		this.userIds = userIds;
+	}
+	public NotificationContent getNotification() {
+		return notification;
+	}
+	public void setNotification(NotificationContent notification) {
+		this.notification = notification;
+	}
+    
+    
 }
 
Index: src/main/java/com/example/homecleanapi/dtos/NotificationRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.dtos;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class NotificationRequest {\n    private String message;\n    private String type;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/dtos/NotificationRequest.java b/src/main/java/com/example/homecleanapi/dtos/NotificationRequest.java
--- a/src/main/java/com/example/homecleanapi/dtos/NotificationRequest.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/dtos/NotificationRequest.java	(date 1743672482120)
@@ -10,4 +10,18 @@
 public class NotificationRequest {
     private String message;
     private String type;
+	public String getMessage() {
+		return message;
+	}
+	public void setMessage(String message) {
+		this.message = message;
+	}
+	public String getType() {
+		return type;
+	}
+	public void setType(String type) {
+		this.type = type;
+	}
+    
+    
 }
Index: src/main/java/com/example/homecleanapi/dtos/ForgotPasswordRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.dtos;\n\npublic class ForgotPasswordRequest {\n    private String phone;\n    private String email;\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/dtos/ForgotPasswordRequest.java b/src/main/java/com/example/homecleanapi/dtos/ForgotPasswordRequest.java
--- a/src/main/java/com/example/homecleanapi/dtos/ForgotPasswordRequest.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/dtos/ForgotPasswordRequest.java	(date 1743672482118)
@@ -1,22 +1,10 @@
 package com.example.homecleanapi.dtos;
 
+import lombok.Getter;
+import lombok.Setter;
+
+@Setter
+@Getter
 public class ForgotPasswordRequest {
-    private String phone;
     private String email;
-
-    public String getPhone() {
-        return phone;
-    }
-
-    public void setPhone(String phone) {
-        this.phone = phone;
-    }
-
-    public String getEmail() {
-        return email;
-    }
-
-    public void setEmail(String email) {
-        this.email = email;
-    }
 }
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/dtos/BookJobRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.dtos;\r\n\r\nimport java.util.List;\r\n\r\npublic class BookJobRequest {\r\n\r\n    private Integer customerAddressId;  \r\n    private String jobTime;  \r\n    private List<ServiceRequest> services;  \r\n\r\n    // Getter và Setter cho customerAddressId\r\n    public Integer getCustomerAddressId() {\r\n        return customerAddressId;\r\n    }\r\n\r\n    public void setCustomerAddressId(Integer customerAddressId) {\r\n        this.customerAddressId = customerAddressId;\r\n    }\r\n\r\n    // Getter và Setter cho jobTime\r\n    public String getJobTime() {\r\n        return jobTime;\r\n    }\r\n\r\n    public void setJobTime(String jobTime) {\r\n        this.jobTime = jobTime;\r\n    }\r\n\r\n    // Getter và Setter cho services\r\n    public List<ServiceRequest> getServices() {\r\n        return services;\r\n    }\r\n\r\n    public void setServices(List<ServiceRequest> services) {\r\n        this.services = services;\r\n    }\r\n\r\n    // Đối tượng đại diện cho một dịch vụ và chi tiết dịch vụ\r\n    public static class ServiceRequest {\r\n        private Long serviceId;  // ID dịch vụ\r\n        private Long serviceDetailId;  // ID chi tiết dịch vụ\r\n        private String imageUrl;  // Link ảnh liên quan đến dịch vụ\r\n\r\n        // Getter và Setter cho serviceId\r\n        public Long getServiceId() {\r\n            return serviceId;\r\n        }\r\n\r\n        public void setServiceId(Long serviceId) {\r\n            this.serviceId = serviceId;\r\n        }\r\n\r\n        // Getter và Setter cho serviceDetailId\r\n        public Long getServiceDetailId() {\r\n            return serviceDetailId;\r\n        }\r\n\r\n        public void setServiceDetailId(Long serviceDetailId) {\r\n            this.serviceDetailId = serviceDetailId;\r\n        }\r\n\r\n        // Getter và Setter cho imageUrl\r\n        public String getImageUrl() {\r\n            return imageUrl;\r\n        }\r\n\r\n        public void setImageUrl(String imageUrl) {\r\n            this.imageUrl = imageUrl;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/dtos/BookJobRequest.java b/src/main/java/com/example/homecleanapi/dtos/BookJobRequest.java
--- a/src/main/java/com/example/homecleanapi/dtos/BookJobRequest.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/dtos/BookJobRequest.java	(date 1743672482113)
@@ -6,14 +6,34 @@
 
     private Integer customerAddressId;  
     private String jobTime;  
-    private List<ServiceRequest> services;  
+    private List<ServiceRequest> services; 
+    private String paymentMethod;
+    private String reminder;
 
     // Getter và Setter cho customerAddressId
+    
+    
     public Integer getCustomerAddressId() {
         return customerAddressId;
     }
 
-    public void setCustomerAddressId(Integer customerAddressId) {
+    public String getReminder() {
+		return reminder;
+	}
+
+	public void setReminder(String reminder) {
+		this.reminder = reminder;
+	}
+
+	public String getPaymentMethod() {
+		return paymentMethod;
+	}
+
+	public void setPaymentMethod(String paymentMethod) {
+		this.paymentMethod = paymentMethod;
+	}
+
+	public void setCustomerAddressId(Integer customerAddressId) {
         this.customerAddressId = customerAddressId;
     }
 
@@ -37,9 +57,9 @@
 
     // Đối tượng đại diện cho một dịch vụ và chi tiết dịch vụ
     public static class ServiceRequest {
-        private Long serviceId;  // ID dịch vụ
-        private Long serviceDetailId;  // ID chi tiết dịch vụ
-        private String imageUrl;  // Link ảnh liên quan đến dịch vụ
+        private Long serviceId;  
+        private Long serviceDetailId;  
+        private String imageUrl;  
 
         // Getter và Setter cho serviceId
         public Long getServiceId() {
Index: src/main/java/com/example/homecleanapi/dtos/NotificationDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.dtos;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class NotificationDTO implements Serializable {\n    private Integer userId;\n    private String message;\n    private String type;\n    private LocalDate timestamp;\n\n    public Integer getUserId() {\n        return userId;\n    }\n\n    public void setUserId(Integer userId) {\n        this.userId = userId;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public LocalDate getTimestamp() {\n        return timestamp;\n    }\n\n    public void setTimestamp(LocalDate timestamp) {\n        this.timestamp = timestamp;\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/dtos/NotificationDTO.java b/src/main/java/com/example/homecleanapi/dtos/NotificationDTO.java
--- a/src/main/java/com/example/homecleanapi/dtos/NotificationDTO.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/dtos/NotificationDTO.java	(date 1743672482120)
@@ -1,21 +1,28 @@
 package com.example.homecleanapi.dtos;
 
-import lombok.AllArgsConstructor;
+
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
 import java.io.Serializable;
 import java.time.LocalDate;
-import java.util.List;
+
 
 @Data
-@AllArgsConstructor
 @NoArgsConstructor
 public class NotificationDTO implements Serializable {
     private Integer userId;
     private String message;
     private String type;
     private LocalDate timestamp;
+    
+    
+    public NotificationDTO(Integer userId, String message, String type, LocalDate timestamp) {
+        this.userId = userId;
+        this.message = message;
+        this.type = type;
+        this.timestamp = timestamp;
+    }
 
     public Integer getUserId() {
         return userId;
@@ -48,5 +55,4 @@
     public void setTimestamp(LocalDate timestamp) {
         this.timestamp = timestamp;
     }
-}
-
+}
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/dtos/NotificationContent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.dtos;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class NotificationContent {\n    private String message;\n    private String type;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/dtos/NotificationContent.java b/src/main/java/com/example/homecleanapi/dtos/NotificationContent.java
--- a/src/main/java/com/example/homecleanapi/dtos/NotificationContent.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/dtos/NotificationContent.java	(date 1743672482119)
@@ -8,4 +8,18 @@
 public class NotificationContent {
     private String message;
     private String type;
+	public String getMessage() {
+		return message;
+	}
+	public void setMessage(String message) {
+		this.message = message;
+	}
+	public String getType() {
+		return type;
+	}
+	public void setType(String type) {
+		this.type = type;
+	}
+    
+    
 }
Index: src/main/java/com/example/homecleanapi/dtos/EmployeeDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.dtos;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class EmployeeDTO {\n    private long id;\n    private String fullName;\n    private String email;\n    private String experience;\n    private String phoneNumber;\n    private byte[] profileImage;\n    private double latitude;\n    private double longitude;\n    private double distance;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/dtos/EmployeeDTO.java b/src/main/java/com/example/homecleanapi/dtos/EmployeeDTO.java
--- a/src/main/java/com/example/homecleanapi/dtos/EmployeeDTO.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/dtos/EmployeeDTO.java	(date 1743672482117)
@@ -17,4 +17,60 @@
     private double latitude;
     private double longitude;
     private double distance;
+	public long getId() {
+		return id;
+	}
+	public void setId(long id) {
+		this.id = id;
+	}
+	public String getFullName() {
+		return fullName;
+	}
+	public void setFullName(String fullName) {
+		this.fullName = fullName;
+	}
+	public String getEmail() {
+		return email;
+	}
+	public void setEmail(String email) {
+		this.email = email;
+	}
+	public String getExperience() {
+		return experience;
+	}
+	public void setExperience(String experience) {
+		this.experience = experience;
+	}
+	public String getPhoneNumber() {
+		return phoneNumber;
+	}
+	public void setPhoneNumber(String phoneNumber) {
+		this.phoneNumber = phoneNumber;
+	}
+	public byte[] getProfileImage() {
+		return profileImage;
+	}
+	public void setProfileImage(byte[] profileImage) {
+		this.profileImage = profileImage;
+	}
+	public double getLatitude() {
+		return latitude;
+	}
+	public void setLatitude(double latitude) {
+		this.latitude = latitude;
+	}
+	public double getLongitude() {
+		return longitude;
+	}
+	public void setLongitude(double longitude) {
+		this.longitude = longitude;
+	}
+	public double getDistance() {
+		return distance;
+	}
+	public void setDistance(double distance) {
+		this.distance = distance;
+	}
+    
+    
 }
Index: src/main/java/com/example/homecleanapi/enums/ReportStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.enums;\r\n\r\npublic enum ReportStatus {\r\n    PENDING,      // Báo cáo đang chờ xử lý\r\n    REVIEWED,     // Đã xem xét\r\n    RESOLVED,     // Đã giải quyết\r\n    DISMISSED     // Đã bác bỏ\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/enums/ReportStatus.java b/src/main/java/com/example/homecleanapi/enums/ReportStatus.java
--- a/src/main/java/com/example/homecleanapi/enums/ReportStatus.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/enums/ReportStatus.java	(date 1743672482122)
@@ -2,7 +2,9 @@
 
 public enum ReportStatus {
     PENDING,      // Báo cáo đang chờ xử lý
-    REVIEWED,     // Đã xem xét
+    REVIEWING,     // Đang xem xét
     RESOLVED,     // Đã giải quyết
-    DISMISSED     // Đã bác bỏ
+    DISMISSED,     // Đã bác bỏ
+    CANCEL,       // Đã hủy
+    FAIL,         // Thất bại
 }
Index: src/main/java/com/example/homecleanapi/enums/JobStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.enums;\r\n\r\npublic enum JobStatus {\r\n\tOPEN,\r\n    PENDING_APPROVAL,\r\n    IN_PROGRESS,\r\n    ARRIVED,       \r\n    STARTED,       \r\n    COMPLETED,     \r\n    CANCELLED,\r\n    DONE,\r\n    BOOKED\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/enums/JobStatus.java b/src/main/java/com/example/homecleanapi/enums/JobStatus.java
--- a/src/main/java/com/example/homecleanapi/enums/JobStatus.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/enums/JobStatus.java	(date 1743672482122)
@@ -9,5 +9,6 @@
     COMPLETED,     
     CANCELLED,
     DONE,
-    BOOKED
+    BOOKED,
+    PAID
 }
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/controllers/CustomerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.controllers;\n\nimport com.example.homecleanapi.dtos.*;\nimport com.example.homecleanapi.services.CustomerAuthService;\nimport com.example.homecleanapi.services.CustomerService;\nimport com.example.homecleanapi.utils.JwtUtils;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.io.IOException;\nimport java.util.Map;\n\n\n@Tag(name = \"Customer Profile API\")\n@RestController\n@RequestMapping(\"/api/customer\")\npublic class CustomerController {\n\n    private JwtUtils jwtUtils;\n    private final CustomerAuthService customerAuthService;\n    private CustomerService customerService;\n\n\n    public CustomerController(CustomerAuthService customerAuthService, JwtUtils jwtUtils, CustomerService customerService) {\n        this.customerAuthService = customerAuthService;\n        this.jwtUtils = jwtUtils;\n        this.customerService = customerService;\n    }\n\n    @PostMapping(value = \"/register\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> register(@RequestBody CustomerRegisterRequest request) {\n        return customerAuthService.customerRegister(request);\n    }\n\n    @PostMapping(value = \"/login\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> login(@RequestBody LoginRequest request) {\n        return customerAuthService.customerLogin(request);\n    }\n\n    @PostMapping(value = \"/forgot-password\",  produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> forgotPassword(@RequestBody ForgotPasswordRequest request) {\n        return customerAuthService.customerForgotPassword(request);\n    }\n\n    @PutMapping(value = \"/{customer_id}/profile\",  produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> updateProfile(@RequestBody CustomerProfileRequest request, @PathVariable int customer_id) {\n\n        return customerService.updateProfile(customer_id, request);\n    }\n\n    @GetMapping(value = \"/{customer_id}/profile\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> getProfile(@PathVariable int customer_id) {\n        return customerService.getProfile(customer_id);\n    }\n\n    @PostMapping(value = \"/{customer_id}/create-address\",  produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> createAddress(@RequestBody CustomerAddressesDTO request, @PathVariable int customer_id) throws IOException {\n        return customerService.addAddress(request, customer_id);\n    }\n\n    @PutMapping(value = \"/{customer_id}/update-address\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> updateEmployeeAddress(@RequestBody CustomerAddressesDTO request, @PathVariable int employeeId) throws IOException {\n        // Gọi service để xử lý update địa chỉ\n        return customerService.updateCustomerAddress(request, employeeId);\n    }\n\n    // API xóa địa chỉ theo locationId\n    @DeleteMapping(value = \"/{locationId}/delete_address\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> deleteEmployeeAddress(@PathVariable int locationId) {\n        return customerService.deleteCustomerAddress(locationId);\n    }\n\n    // API lấy danh sách địa chỉ của employee theo employeeId\n    @GetMapping(value = \"/{customer_id}/all-addresses\",  produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> getAllEmployeeAddresses(@PathVariable int employeeId) {\n        return customerService.getAllCusomterAddresses(employeeId);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/controllers/CustomerController.java b/src/main/java/com/example/homecleanapi/controllers/CustomerController.java
--- a/src/main/java/com/example/homecleanapi/controllers/CustomerController.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/controllers/CustomerController.java	(date 1743672482109)
@@ -4,6 +4,7 @@
 import com.example.homecleanapi.services.CustomerAuthService;
 import com.example.homecleanapi.services.CustomerService;
 import com.example.homecleanapi.utils.JwtUtils;
+import io.swagger.v3.oas.annotations.security.SecurityRequirement;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
@@ -16,6 +17,7 @@
 @Tag(name = "Customer Profile API")
 @RestController
 @RequestMapping("/api/customer")
+@SecurityRequirement(name = "BearerAuth")
 public class CustomerController {
 
     private JwtUtils jwtUtils;
@@ -39,31 +41,31 @@
         return customerAuthService.customerLogin(request);
     }
 
-    @PostMapping(value = "/forgot-password",  produces = MediaType.APPLICATION_JSON_VALUE)
-    public ResponseEntity<Map<String, Object>> forgotPassword(@RequestBody ForgotPasswordRequest request) {
-        return customerAuthService.customerForgotPassword(request);
+    @PostMapping(value = "/{customerId}/forgot-password",  produces = MediaType.APPLICATION_JSON_VALUE)
+    public ResponseEntity<Map<String, Object>> forgotPassword(@RequestBody ForgotPasswordRequest request, @PathVariable Integer customerId) {
+        return customerAuthService.customerForgotPassword(request, customerId);
     }
 
-    @PutMapping(value = "/{customer_id}/profile",  produces = MediaType.APPLICATION_JSON_VALUE)
-    public ResponseEntity<Map<String, Object>> updateProfile(@RequestBody CustomerProfileRequest request, @PathVariable int customer_id) {
+    @PatchMapping(value = "/{customer_id}/profile",  produces = MediaType.APPLICATION_JSON_VALUE)
+    public ResponseEntity<Map<String, Object>> updateProfile(@RequestBody CustomerProfileRequest request, @PathVariable Long customer_id) {
 
         return customerService.updateProfile(customer_id, request);
     }
 
     @GetMapping(value = "/{customer_id}/profile", produces = MediaType.APPLICATION_JSON_VALUE)
-    public ResponseEntity<Map<String, Object>> getProfile(@PathVariable int customer_id) {
+    public ResponseEntity<Map<String, Object>> getProfile(@PathVariable long customer_id) {
         return customerService.getProfile(customer_id);
     }
 
     @PostMapping(value = "/{customer_id}/create-address",  produces = MediaType.APPLICATION_JSON_VALUE)
-    public ResponseEntity<Map<String, Object>> createAddress(@RequestBody CustomerAddressesDTO request, @PathVariable int customer_id) throws IOException {
+    public ResponseEntity<Map<String, Object>> createAddress(@RequestBody CustomerAddressesDTO request, @PathVariable Long customer_id) throws IOException {
         return customerService.addAddress(request, customer_id);
     }
 
-    @PutMapping(value = "/{customer_id}/update-address", produces = MediaType.APPLICATION_JSON_VALUE)
-    public ResponseEntity<Map<String, Object>> updateEmployeeAddress(@RequestBody CustomerAddressesDTO request, @PathVariable int employeeId) throws IOException {
+    @PutMapping(value = "/{customerId}/update-address/{addressId}", produces = MediaType.APPLICATION_JSON_VALUE)
+    public ResponseEntity<Map<String, Object>> updateEmployeeAddress(@RequestBody CustomerAddressesDTO request, @PathVariable Long customerId, @PathVariable Integer addressId) throws IOException {
         // Gọi service để xử lý update địa chỉ
-        return customerService.updateCustomerAddress(request, employeeId);
+        return customerService.updateCustomerAddress(request, customerId, addressId);
     }
 
     // API xóa địa chỉ theo locationId
@@ -73,8 +75,14 @@
     }
 
     // API lấy danh sách địa chỉ của employee theo employeeId
-    @GetMapping(value = "/{customer_id}/all-addresses",  produces = MediaType.APPLICATION_JSON_VALUE)
-    public ResponseEntity<Map<String, Object>> getAllEmployeeAddresses(@PathVariable int employeeId) {
-        return customerService.getAllCusomterAddresses(employeeId);
+    @GetMapping(value = "/{customerId}/all-addresses",  produces = MediaType.APPLICATION_JSON_VALUE)
+    public ResponseEntity<Map<String, Object>> getAllEmployeeAddresses(@PathVariable Long customerId) {
+        return customerService.getAllCustomerAddresses(customerId);
+    }
+
+    // API xóa account
+    @DeleteMapping(value = "/{customer_id}/delete_account", produces = MediaType.APPLICATION_JSON_VALUE)
+    public ResponseEntity<Map<String, Object>> deleteAccount(@PathVariable Long customer_id) {
+        return customerService.deleteCustomerAccount(customer_id);
     }
 }
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/utils/UserStatusWebSocketHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.utils;\r\n\r\n\r\n\r\nimport org.springframework.web.socket.CloseStatus;\r\nimport org.springframework.web.socket.WebSocketSession;\r\nimport org.springframework.web.socket.handler.TextWebSocketHandler;\r\n\r\nimport com.example.homecleanapi.dtos.CleanerSessionInfo;\r\nimport com.example.homecleanapi.models.Employee;\r\nimport com.example.homecleanapi.repositories.CleanerRepository;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.messaging.simp.SimpMessagingTemplate;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\n\r\n@Component\r\npublic class UserStatusWebSocketHandler extends TextWebSocketHandler {\r\n\r\n    private static final Map<String, CleanerSessionInfo> onlineCleaners = new HashMap<>();\r\n\r\n    @Autowired\r\n    private SimpMessagingTemplate messagingTemplate;\r\n\r\n    @Autowired\r\n    private CleanerRepository cleanerRepository; \r\n\r\n    @Override\r\n    public void afterConnectionEstablished(WebSocketSession session) throws Exception {\r\n        String cleanerId = session.getUri().getQuery(); // Hoặc lấy từ message\r\n        CleanerSessionInfo sessionInfo = new CleanerSessionInfo(cleanerId, \"Cleaner Name\", \"Profile Image URL\");\r\n\r\n        onlineCleaners.put(cleanerId, sessionInfo);\r\n\r\n        Optional<Employee> cleanerOpt = cleanerRepository.findById(Long.valueOf(cleanerId)); \r\n        cleanerOpt.ifPresent(cleaner -> {\r\n            cleaner.setStatus(true); // Cập nhật trạng thái\r\n            cleanerRepository.save(cleaner); // Lưu thay đổi\r\n        });\r\n\r\n\r\n        messagingTemplate.convertAndSend(\"/topic/onlineCleaners\", getOnlineCleaners());\r\n        System.out.println(\"Cleaner \" + cleanerId + \" is online\");\r\n    }\r\n\r\n    @Override\r\n    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {\r\n        String cleanerId = session.getUri().getQuery(); // Hoặc cách khác để lấy cleanerId từ session\r\n\r\n        // Xóa cleaner khỏi danh sách online\r\n        onlineCleaners.remove(cleanerId);\r\n        System.out.println(\"Cleaner \" + cleanerId + \" is offline\");\r\n\r\n        // Cập nhật trạng thái cleaner là offline (status = false)\r\n        Optional<Employee> cleanerOpt = cleanerRepository.findById(Long.valueOf(cleanerId)); \r\n        cleanerOpt.ifPresent(cleaner -> {\r\n            cleaner.setStatus(false); \r\n            cleanerRepository.save(cleaner); \r\n        });\r\n    }\r\n\r\n    public static Map<String, CleanerSessionInfo> getOnlineCleaners() {\r\n        return onlineCleaners;\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/utils/UserStatusWebSocketHandler.java b/src/main/java/com/example/homecleanapi/utils/UserStatusWebSocketHandler.java
--- a/src/main/java/com/example/homecleanapi/utils/UserStatusWebSocketHandler.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/utils/UserStatusWebSocketHandler.java	(date 1743672482142)
@@ -1,18 +1,14 @@
 package com.example.homecleanapi.utils;
 
-
-
-import org.springframework.web.socket.CloseStatus;
-import org.springframework.web.socket.WebSocketSession;
-import org.springframework.web.socket.handler.TextWebSocketHandler;
-
 import com.example.homecleanapi.dtos.CleanerSessionInfo;
 import com.example.homecleanapi.models.Employee;
 import com.example.homecleanapi.repositories.CleanerRepository;
-
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.messaging.simp.SimpMessagingTemplate;
 import org.springframework.stereotype.Component;
+import org.springframework.web.socket.*;
+import org.springframework.web.socket.handler.TextWebSocketHandler;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -23,49 +19,58 @@
 
     private static final Map<String, CleanerSessionInfo> onlineCleaners = new HashMap<>();
 
-    @Autowired
-    private SimpMessagingTemplate messagingTemplate;
-
     @Autowired
-    private CleanerRepository cleanerRepository; 
+    private CleanerRepository cleanerRepository;
 
+    private final ObjectMapper objectMapper = new ObjectMapper();
+
+
     @Override
-    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
-        String cleanerId = session.getUri().getQuery(); // Hoặc lấy từ message
-        CleanerSessionInfo sessionInfo = new CleanerSessionInfo(cleanerId, "Cleaner Name", "Profile Image URL");
+    public void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
+        String payload = message.getPayload();
+        JsonNode jsonNode = objectMapper.readTree(payload);
+        String cleanerId = jsonNode.get("cleanerId").asText();
+
+        // Log thêm để kiểm tra cleanerId
+        System.out.println("Received cleaner login with cleanerId...: " + cleanerId);
 
-        onlineCleaners.put(cleanerId, sessionInfo);
+        // Thêm cleaner vào onlineCleaners
+        
+            CleanerSessionInfo sessionInfo = new CleanerSessionInfo(cleanerId, "", "");
+            onlineCleaners.put(cleanerId, sessionInfo);
+            System.out.println("Added cleaner " + cleanerId + " to onlineCleaners");
+        
 
-        Optional<Employee> cleanerOpt = cleanerRepository.findById(Long.valueOf(cleanerId)); 
+        // Cập nhật trạng thái trong database
+        Optional<Employee> cleanerOpt = cleanerRepository.findById(Long.valueOf(cleanerId));
         cleanerOpt.ifPresent(cleaner -> {
-            cleaner.setStatus(true); // Cập nhật trạng thái
-            cleanerRepository.save(cleaner); // Lưu thay đổi
+            cleaner.setStatus(true);  // Đánh dấu online
+            cleanerRepository.save(cleaner);
+            System.out.println("Cleaner " + cleanerId + " is now online in DB....");
         });
-
-
-        messagingTemplate.convertAndSend("/topic/onlineCleaners", getOnlineCleaners());
-        System.out.println("Cleaner " + cleanerId + " is online");
     }
 
     @Override
     public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
-        String cleanerId = session.getUri().getQuery(); // Hoặc cách khác để lấy cleanerId từ session
+        // Log khi kết nối WebSocket bị đóng
+        System.out.println("WebSocket connection closed: " + session.getId());
 
-        // Xóa cleaner khỏi danh sách online
-        onlineCleaners.remove(cleanerId);
-        System.out.println("Cleaner " + cleanerId + " is offline");
+        // Lấy cleanerId từ session nếu có
+        String cleanerId = getCleanerIdFromSession(session);
+        if (cleanerId != null) {
+            onlineCleaners.remove(cleanerId);  // Xóa cleaner khỏi onlineCleaners khi kết nối đóng
+            System.out.println("Removed cleaner " + cleanerId + " from onlineCleaners due to connection closed.");
+        }
+    }
 
-        // Cập nhật trạng thái cleaner là offline (status = false)
-        Optional<Employee> cleanerOpt = cleanerRepository.findById(Long.valueOf(cleanerId)); 
-        cleanerOpt.ifPresent(cleaner -> {
-            cleaner.setStatus(false); 
-            cleanerRepository.save(cleaner); 
-        });
+    private String getCleanerIdFromSession(WebSocketSession session) {
+        // Giả sử bạn lưu cleanerId trong session attributes
+        return session.getAttributes().get("cleanerId") != null ? session.getAttributes().get("cleanerId").toString() : null;
     }
 
     public static Map<String, CleanerSessionInfo> getOnlineCleaners() {
+        // Log để kiểm tra thông tin trước khi trả về
+        System.out.println("Getting online cleaners: " + onlineCleaners);
         return onlineCleaners;
     }
 }
-
-
Index: src/main/java/com/example/homecleanapi/dtos/CleanerRegisterRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.dtos;\n\npublic class CleanerRegisterRequest {\n    private String password;\n    private String name;\n    private String phone;\n    private String email;\n    private Integer age;\n    private String address;\n    private String identity_number;\n    private String experience;\n\n    public CleanerRegisterRequest() {\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public String getIdentity_number() {\n        return identity_number;\n    }\n\n    public void setIdentity_number(String identity_number) {\n        this.identity_number = identity_number;\n    }\n\n    public String getExperience() {\n        return experience;\n    }\n\n    public void setExperience(String experience) {\n        this.experience = experience;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/dtos/CleanerRegisterRequest.java b/src/main/java/com/example/homecleanapi/dtos/CleanerRegisterRequest.java
--- a/src/main/java/com/example/homecleanapi/dtos/CleanerRegisterRequest.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/dtos/CleanerRegisterRequest.java	(date 1743672482115)
@@ -1,5 +1,10 @@
 package com.example.homecleanapi.dtos;
 
+import lombok.Getter;
+import lombok.Setter;
+
+@Setter
+@Getter
 public class CleanerRegisterRequest {
     private String password;
     private String name;
@@ -13,67 +18,4 @@
     public CleanerRegisterRequest() {
     }
 
-    public String getPassword() {
-        return password;
-    }
-
-    public void setPassword(String password) {
-        this.password = password;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getPhone() {
-        return phone;
-    }
-
-    public void setPhone(String phone) {
-        this.phone = phone;
-    }
-
-    public String getEmail() {
-        return email;
-    }
-
-    public void setEmail(String email) {
-        this.email = email;
-    }
-
-    public Integer getAge() {
-        return age;
-    }
-
-    public void setAge(Integer age) {
-        this.age = age;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    public String getIdentity_number() {
-        return identity_number;
-    }
-
-    public void setIdentity_number(String identity_number) {
-        this.identity_number = identity_number;
-    }
-
-    public String getExperience() {
-        return experience;
-    }
-
-    public void setExperience(String experience) {
-        this.experience = experience;
-    }
 }
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/models/Wallet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.models;\r\n\r\nimport jakarta.persistence.*;\r\n\r\n@Entity\r\n@Table(name = \"wallets\")\r\npublic class Wallet {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"cleaner_id\", nullable = false)\r\n    private Employee cleaner; // Liên kết với bảng cleaner\r\n\r\n    private Double balance;\r\n\r\n    // Getters and Setters\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public Employee getCleaner() {\r\n        return cleaner;\r\n    }\r\n\r\n    public void setCleaner(Employee cleaner) {\r\n        this.cleaner = cleaner;\r\n    }\r\n\r\n    public Double getBalance() {\r\n        return balance;\r\n    }\r\n\r\n    public void setBalance(Double balance) {\r\n        this.balance = balance;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/models/Wallet.java b/src/main/java/com/example/homecleanapi/models/Wallet.java
--- a/src/main/java/com/example/homecleanapi/models/Wallet.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/models/Wallet.java	(date 1743672482129)
@@ -12,10 +12,13 @@
 
     @ManyToOne
     @JoinColumn(name = "cleaner_id", nullable = false)
-    private Employee cleaner; // Liên kết với bảng cleaner
+    private Employee cleaner; 
 
     private Double balance;
 
+    @Column(name = "txn_ref")  
+    private String txnRef;  
+
     // Getters and Setters
     public Long getId() {
         return id;
@@ -40,4 +43,12 @@
     public void setBalance(Double balance) {
         this.balance = balance;
     }
+
+    public String getTxnRef() {
+        return txnRef;
+    }
+
+    public void setTxnRef(String txnRef) {
+        this.txnRef = txnRef;
+    }
 }
Index: src/main/java/com/example/homecleanapi/controllers/EmployeeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.controllers;\n\n\nimport com.example.homecleanapi.dtos.CleanerRegisterRequest;\nimport com.example.homecleanapi.dtos.EmployeeLocationsDTO;\nimport com.example.homecleanapi.dtos.ForgotPasswordRequest;\nimport com.example.homecleanapi.dtos.LoginRequest;\nimport com.example.homecleanapi.services.EmployeeService;\nimport com.example.homecleanapi.services.EmployeeAuthService;\nimport io.swagger.v3.oas.annotations.security.SecurityRequirement;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.io.IOException;\nimport java.util.Map;\n\n@RestController\n@Tag(name = \"Employee API\")\n@SecurityRequirement(name = \"BearerAuth\")\n@RequestMapping(\"/api/employee\")\npublic class EmployeeController {\n    private final EmployeeAuthService cleanerAuthService;\n    private final EmployeeService employeeService;\n\n    public EmployeeController(EmployeeAuthService cleanerAuthService, EmployeeService employeeService) {\n        this.cleanerAuthService = cleanerAuthService;\n        this.employeeService = employeeService;\n    }\n\n    @GetMapping(value = \"/{employeeId}/get-employee-profile\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> getEmployeeProfile(@PathVariable int employeeId) {\n        return employeeService.getEmployeeInformation(employeeId);\n    }\n\n    @PostMapping(value = \"/{employeeId}/create-address\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> createEmployeeAddress(@RequestBody EmployeeLocationsDTO request, @PathVariable int employeeId) throws IOException {\n        return employeeService.employeeCreateAddress(request, employeeId);\n    }\n\n    @PutMapping(value = \"/{employeeId}/{addressId}/update-address\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> updateEmployeeAddress(@RequestBody EmployeeLocationsDTO request, @PathVariable int employeeId, @PathVariable int addressId) throws IOException {\n        // Gọi service để xử lý update địa chỉ\n        return employeeService.updateEmployeeAddress(request, employeeId, addressId);\n    }\n\n    // API xóa địa chỉ theo locationId\n    @DeleteMapping(value = \"/{locationId}/delete_address\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> deleteEmployeeAddress(@PathVariable int locationId) {\n        return employeeService.deleteEmployeeAddress(locationId);\n    }\n\n    // API lấy danh sách địa chỉ của employee theo employeeId\n    @GetMapping(value = \"/{employeeId}/all-addresses\",  produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> getAllEmployeeAddresses(@PathVariable int employeeId) {\n        return employeeService.getAllEmployeeAddresses(employeeId);\n    }\n\n    @PostMapping(value = \"/register\",  produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> register(@RequestBody CleanerRegisterRequest request) {\n        return cleanerAuthService.cleanerRegister(request);\n    }\n\n    @PostMapping(value = \"/login\",   produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> login(@RequestBody LoginRequest request) {\n        return cleanerAuthService.cleanerLogin(request);\n    }\n\n    @PostMapping(value = \"/forgot-password\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Map<String, Object>> forgotPassword(@RequestBody ForgotPasswordRequest request) {\n        return cleanerAuthService.cleanerForgotPassword(request);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/controllers/EmployeeController.java b/src/main/java/com/example/homecleanapi/controllers/EmployeeController.java
--- a/src/main/java/com/example/homecleanapi/controllers/EmployeeController.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/controllers/EmployeeController.java	(date 1743672482110)
@@ -1,10 +1,7 @@
 package com.example.homecleanapi.controllers;
 
 
-import com.example.homecleanapi.dtos.CleanerRegisterRequest;
-import com.example.homecleanapi.dtos.EmployeeLocationsDTO;
-import com.example.homecleanapi.dtos.ForgotPasswordRequest;
-import com.example.homecleanapi.dtos.LoginRequest;
+import com.example.homecleanapi.dtos.*;
 import com.example.homecleanapi.services.EmployeeService;
 import com.example.homecleanapi.services.EmployeeAuthService;
 import io.swagger.v3.oas.annotations.security.SecurityRequirement;
@@ -39,7 +36,7 @@
         return employeeService.employeeCreateAddress(request, employeeId);
     }
 
-    @PutMapping(value = "/{employeeId}/{addressId}/update-address", produces = MediaType.APPLICATION_JSON_VALUE)
+    @PutMapping(value = "/{employeeId}//update-address/{addressId}", produces = MediaType.APPLICATION_JSON_VALUE)
     public ResponseEntity<Map<String, Object>> updateEmployeeAddress(@RequestBody EmployeeLocationsDTO request, @PathVariable int employeeId, @PathVariable int addressId) throws IOException {
         // Gọi service để xử lý update địa chỉ
         return employeeService.updateEmployeeAddress(request, employeeId, addressId);
@@ -67,8 +64,18 @@
         return cleanerAuthService.cleanerLogin(request);
     }
 
-    @PostMapping(value = "/forgot-password", produces = MediaType.APPLICATION_JSON_VALUE)
-    public ResponseEntity<Map<String, Object>> forgotPassword(@RequestBody ForgotPasswordRequest request) {
-        return cleanerAuthService.cleanerForgotPassword(request);
+    @PostMapping(value = "/{employeeId}/forgot-password", produces = MediaType.APPLICATION_JSON_VALUE)
+    public ResponseEntity<Map<String, Object>> forgotPassword(@RequestBody ForgotPasswordRequest request, @PathVariable Integer employeeId) {
+        return cleanerAuthService.cleanerForgotPassword(request, employeeId);
+    }
+
+    @PatchMapping(value = "/{employeeId}/update_profile", produces = MediaType.APPLICATION_JSON_VALUE)
+    public ResponseEntity<Map<String, Object>> updateEmployeeProfile(@RequestBody CleanerUpdateProfile request, @PathVariable int employeeId) throws IOException {
+        return employeeService.updateEmployeeInformation(request, employeeId);
+    }
+
+    @DeleteMapping(value = "/{employeeId}/delete_account", produces = MediaType.APPLICATION_JSON_VALUE)
+    public ResponseEntity<Map<String, Object>> deleteEmployeeAccount(@PathVariable int employeeId) throws IOException {
+        return employeeService.deleteEmployeeAccount(employeeId);
     }
 }
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/models/Job.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.models;\r\n\r\nimport jakarta.persistence.*;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\nimport com.example.homecleanapi.enums.JobStatus;\r\n\r\n@Entity\r\n@Table(name = \"jobs\")\r\npublic class Job {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @OneToMany(mappedBy = \"job\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<JobServiceDetail> jobServiceDetails;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"customer_id\", nullable = false)\r\n    private Customers customer;\r\n\r\n//    @ManyToOne\r\n//    @JoinColumn(name = \"service_id\")\r\n//    private Services service;\r\n    \r\n    @OneToOne(mappedBy = \"job\", fetch = FetchType.LAZY)\r\n    private JobDetails jobDetails;\r\n    \r\n    @ManyToOne\r\n    @JoinColumn(name = \"cleaner_id\")\r\n    private Employee cleaner;\r\n\r\n//    @ManyToOne\r\n//    @JoinColumn(name = \"service_detail_id\")\r\n//    private ServiceDetail serviceDetail;\r\n\r\n    \r\n    @ManyToOne\r\n    @JoinColumn(name = \"customer_address_id\", referencedColumnName = \"id\")\r\n    private CustomerAddresses customerAddress; // Mối quan hệ với CustomerAddress\r\n\r\n    @Column(name = \"scheduled_time\")\r\n    private LocalDateTime scheduledTime; \r\n\r\n    @Column(name = \"created_at\")\r\n    private LocalDateTime createdAt;\r\n\r\n    private Double totalPrice;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private JobStatus status;  // Import JobStatus ở đây \r\n\r\n    // Getters and Setters\r\n    \r\n    \r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public List<JobServiceDetail> getJobServiceDetails() {\r\n\t\treturn jobServiceDetails;\r\n\t}\r\n\r\n\tpublic void setJobServiceDetails(List<JobServiceDetail> jobServiceDetails) {\r\n\t\tthis.jobServiceDetails = jobServiceDetails;\r\n\t}\r\n\r\n\tpublic LocalDateTime getCreatedAt() {\r\n\t\treturn createdAt;\r\n\t}\r\n\r\n\tpublic void setCreatedAt(LocalDateTime createdAt) {\r\n\t\tthis.createdAt = createdAt;\r\n\t}\r\n\r\n\tpublic void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public Customers getCustomer() {\r\n        return customer;\r\n    }\r\n\r\n    public void setCustomer(Customers customer) {\r\n        this.customer = customer;\r\n    }\r\n\r\n//    public Services getService() {\r\n//        return service;\r\n//    }\r\n//\r\n//    public void setService(Services service) {\r\n//        this.service = service;\r\n//    }\r\n//\r\n//    public ServiceDetail getServiceDetail() {\r\n//        return serviceDetail;\r\n//    }\r\n//\r\n//    public void setServiceDetail(ServiceDetail serviceDetail) {\r\n//        this.serviceDetail = serviceDetail;\r\n//    }\r\n\r\n    public CustomerAddresses getCustomerAddress() {\r\n        return customerAddress;\r\n    }\r\n\r\n    public void setCustomerAddress(CustomerAddresses customerAddress) {\r\n        this.customerAddress = customerAddress;\r\n    }\r\n\r\n    public LocalDateTime getScheduledTime() {\r\n        return scheduledTime;\r\n    }\r\n\r\n    public void setScheduledTime(LocalDateTime scheduledTime) {\r\n        this.scheduledTime = scheduledTime;\r\n    }\r\n\r\n    public Double getTotalPrice() {\r\n        return totalPrice;\r\n    }\r\n\r\n    public void setTotalPrice(Double totalPrice) {\r\n        this.totalPrice = totalPrice;\r\n    }\r\n\r\n    public JobStatus getStatus() {\r\n        return status;\r\n    }\r\n\r\n    public void setStatus(JobStatus status) {\r\n        this.status = status;\r\n    }\r\n\r\n    public JobDetails getJobDetails() {\r\n        return jobDetails;\r\n    }\r\n\r\n    public void setJobDetails(JobDetails jobDetails) {\r\n        this.jobDetails = jobDetails;\r\n    }\r\n\r\n    public Employee getCleaner() {\r\n        return cleaner;\r\n    }\r\n\r\n    public void setCleaner(Employee cleaner) {\r\n        this.cleaner = cleaner;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/models/Job.java b/src/main/java/com/example/homecleanapi/models/Job.java
--- a/src/main/java/com/example/homecleanapi/models/Job.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/models/Job.java	(date 1743672482126)
@@ -48,18 +48,52 @@
     private LocalDateTime createdAt;
 
     private Double totalPrice;
+    
+    @Column(name = "payment_method", nullable = false)
+    private String paymentMethod;
 
     @Enumerated(EnumType.STRING)
     private JobStatus status;  // Import JobStatus ở đây 
+    
+    @Column(name = "txn_ref")
+    private String txnRef;
+    
+    @Column(name = "reminder")
+    private String reminder;  
 
     // Getters and Setters
     
     
+    
     public Long getId() {
         return id;
     }
 
-    public List<JobServiceDetail> getJobServiceDetails() {
+    public String getReminder() {
+		return reminder;
+	}
+
+	public void setReminder(String reminder) {
+		this.reminder = reminder;
+	}
+
+	public String getTxnRef() {
+		return txnRef;
+	}
+
+	public void setTxnRef(String txnRef) {
+		this.txnRef = txnRef;
+	}
+
+	public String getPaymentMethod() {
+		return paymentMethod;
+	}
+
+	public void setPaymentMethod(String paymentMethod) {
+		this.paymentMethod = paymentMethod;
+	}
+
+	public List<JobServiceDetail> getJobServiceDetails() {
 		return jobServiceDetails;
 	}
 
Index: src/main/java/com/example/homecleanapi/models/Conversation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.models;\n\nimport jakarta.persistence.*;\n\nimport java.time.LocalDateTime;\n\n@Entity\n@Table(name = \"conversations\")\npublic class Conversation {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"customer_id\")\n    private Integer customerId;\n\n    @Column(name = \"cleaner_id\")\n    private Integer cleanerId;\n\n    public Conversation() {\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public Integer getCustomerId() {\n        return customerId;\n    }\n\n    public void setCustomerId(Integer customerId) {\n        this.customerId = customerId;\n    }\n\n    public Integer getCleanerId() {\n        return cleanerId;\n    }\n\n    public void setCleanerId(Integer cleanerId) {\n        this.cleanerId = cleanerId;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/models/Conversation.java b/src/main/java/com/example/homecleanapi/models/Conversation.java
--- a/src/main/java/com/example/homecleanapi/models/Conversation.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/models/Conversation.java	(date 1743672482123)
@@ -1,9 +1,13 @@
 package com.example.homecleanapi.models;
 
 import jakarta.persistence.*;
+import lombok.Getter;
+import lombok.Setter;
 
 import java.time.LocalDateTime;
 
+@Setter
+@Getter
 @Entity
 @Table(name = "conversations")
 public class Conversation {
@@ -11,36 +15,11 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
-    @Column(name = "customer_id")
-    private Integer customerId;
-
-    @Column(name = "cleaner_id")
-    private Integer cleanerId;
-
-    public Conversation() {
-    }
-
-    public Long getId() {
-        return id;
-    }
+    @ManyToOne
+    @JoinColumn(name = "customer_id", referencedColumnName = "id")
+    private Customers customer;
 
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Integer getCustomerId() {
-        return customerId;
-    }
-
-    public void setCustomerId(Integer customerId) {
-        this.customerId = customerId;
-    }
-
-    public Integer getCleanerId() {
-        return cleanerId;
-    }
-
-    public void setCleanerId(Integer cleanerId) {
-        this.cleanerId = cleanerId;
-    }
+    @ManyToOne
+    @JoinColumn(name = "cleaner_id", referencedColumnName = "id")
+    private Employee cleaner;
 }
Index: src/main/java/com/example/homecleanapi/models/Report.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.models;\r\n\r\nimport com.example.homecleanapi.enums.ReportStatus;  // Import đúng enum ReportStatus\r\nimport jakarta.persistence.*;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Table(name = \"reports\")\r\npublic class Report {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"reporter_id\")\r\n    private Customers reporter; \r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"reported_user_id\")\r\n    private Employee reportedUser;  \r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"job_id\")\r\n    private Job job; \r\n\r\n    private String reportType;  \r\n    private String description; \r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private ReportStatus status;  \r\n    private LocalDateTime createdAt = LocalDateTime.now();  \r\n    private LocalDateTime updatedAt = LocalDateTime.now(); \r\n    private LocalDateTime resolvedAt;  \r\n    private String adminResponse; \r\n    // Getters and Setters\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public Customers getReporter() {\r\n        return reporter;\r\n    }\r\n\r\n    public void setReporter(Customers reporter) {\r\n        this.reporter = reporter;\r\n    }\r\n\r\n    public Employee getReportedUser() {\r\n        return reportedUser;\r\n    }\r\n\r\n    public void setReportedUser(Employee reportedUser) {\r\n        this.reportedUser = reportedUser;\r\n    }\r\n\r\n    public Job getJob() {\r\n        return job;\r\n    }\r\n\r\n    public void setJob(Job job) {\r\n        this.job = job;\r\n    }\r\n\r\n    public String getReportType() {\r\n        return reportType;\r\n    }\r\n\r\n    public void setReportType(String reportType) {\r\n        this.reportType = reportType;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public ReportStatus getStatus() {\r\n        return status;\r\n    }\r\n\r\n    public void setStatus(ReportStatus status) {\r\n        this.status = status;\r\n    }\r\n\r\n    public LocalDateTime getCreatedAt() {\r\n        return createdAt;\r\n    }\r\n\r\n    public void setCreatedAt(LocalDateTime createdAt) {\r\n        this.createdAt = createdAt;\r\n    }\r\n\r\n    public LocalDateTime getUpdatedAt() {\r\n        return updatedAt;\r\n    }\r\n\r\n    public void setUpdatedAt(LocalDateTime updatedAt) {\r\n        this.updatedAt = updatedAt;\r\n    }\r\n\r\n    public LocalDateTime getResolvedAt() {\r\n        return resolvedAt;\r\n    }\r\n\r\n    public void setResolvedAt(LocalDateTime resolvedAt) {\r\n        this.resolvedAt = resolvedAt;\r\n    }\r\n\r\n    public String getAdminResponse() {\r\n        return adminResponse;\r\n    }\r\n\r\n    public void setAdminResponse(String adminResponse) {\r\n        this.adminResponse = adminResponse;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/models/Report.java b/src/main/java/com/example/homecleanapi/models/Report.java
--- a/src/main/java/com/example/homecleanapi/models/Report.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/models/Report.java	(date 1743672482127)
@@ -2,7 +2,8 @@
 
 import com.example.homecleanapi.enums.ReportStatus;  // Import đúng enum ReportStatus
 import jakarta.persistence.*;
-import java.time.LocalDateTime;
+
+import java.time.LocalDate;
 
 @Entity
 @Table(name = "reports")
@@ -12,26 +13,20 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
-    @ManyToOne
-    @JoinColumn(name = "reporter_id")
-    private Customers reporter; 
+//    @ManyToOne
+//    @JoinColumn(name = "job_id")
+//    private Job job;
 
-    @ManyToOne
-    @JoinColumn(name = "reported_user_id")
-    private Employee reportedUser;  
-
-    @ManyToOne
-    @JoinColumn(name = "job_id")
-    private Job job; 
+    private long job_id;
 
     private String reportType;  
     private String description; 
 
     @Enumerated(EnumType.STRING)
     private ReportStatus status;  
-    private LocalDateTime createdAt = LocalDateTime.now();  
-    private LocalDateTime updatedAt = LocalDateTime.now(); 
-    private LocalDateTime resolvedAt;  
+    private LocalDate createdAt = LocalDate.now();
+    private LocalDate updatedAt = LocalDate.now();
+    private LocalDate resolvedAt;
     private String adminResponse; 
     // Getters and Setters
     public Long getId() {
@@ -42,28 +37,21 @@
         this.id = id;
     }
 
-    public Customers getReporter() {
-        return reporter;
-    }
-
-    public void setReporter(Customers reporter) {
-        this.reporter = reporter;
-    }
+//    public Job getJob() {
+//        return job;
+//    }
+//
+//    public void setJob(Job job) {
+//        this.job = job;
+//    }
 
-    public Employee getReportedUser() {
-        return reportedUser;
-    }
 
-    public void setReportedUser(Employee reportedUser) {
-        this.reportedUser = reportedUser;
+    public long getJob_id() {
+        return job_id;
     }
 
-    public Job getJob() {
-        return job;
-    }
-
-    public void setJob(Job job) {
-        this.job = job;
+    public void setJob_id(long job_id) {
+        this.job_id = job_id;
     }
 
     public String getReportType() {
@@ -90,27 +78,27 @@
         this.status = status;
     }
 
-    public LocalDateTime getCreatedAt() {
+    public LocalDate getCreatedAt() {
         return createdAt;
     }
 
-    public void setCreatedAt(LocalDateTime createdAt) {
+    public void setCreatedAt(LocalDate createdAt) {
         this.createdAt = createdAt;
     }
 
-    public LocalDateTime getUpdatedAt() {
+    public LocalDate getUpdatedAt() {
         return updatedAt;
     }
 
-    public void setUpdatedAt(LocalDateTime updatedAt) {
+    public void setUpdatedAt(LocalDate updatedAt) {
         this.updatedAt = updatedAt;
     }
 
-    public LocalDateTime getResolvedAt() {
+    public LocalDate getResolvedAt() {
         return resolvedAt;
     }
 
-    public void setResolvedAt(LocalDateTime resolvedAt) {
+    public void setResolvedAt(LocalDate resolvedAt) {
         this.resolvedAt = resolvedAt;
     }
 
Index: src/main/java/com/example/homecleanapi/models/Feedback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.models;\r\n\r\nimport jakarta.persistence.*;\r\n\r\n@Entity\r\n@Table(name = \"feedback\")\r\npublic class Feedback {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"job_id\", nullable = false)\r\n    private Job job; // Liên kết với bảng job\r\n\r\n    private Integer rating; // Đánh giá (1-5)\r\n    private String comment;\r\n\r\n    // Getters and Setters\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public Job getJob() {\r\n        return job;\r\n    }\r\n\r\n    public void setJob(Job job) {\r\n        this.job = job;\r\n    }\r\n\r\n    public Integer getRating() {\r\n        return rating;\r\n    }\r\n\r\n    public void setRating(Integer rating) {\r\n        this.rating = rating;\r\n    }\r\n\r\n    public String getComment() {\r\n        return comment;\r\n    }\r\n\r\n    public void setComment(String comment) {\r\n        this.comment = comment;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/models/Feedback.java b/src/main/java/com/example/homecleanapi/models/Feedback.java
--- a/src/main/java/com/example/homecleanapi/models/Feedback.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/models/Feedback.java	(date 1743672482125)
@@ -14,7 +14,7 @@
     @JoinColumn(name = "job_id", nullable = false)
     private Job job; // Liên kết với bảng job
 
-    private Integer rating; // Đánh giá (1-5)
+    private Double rating; // Đánh giá (1-5)
     private String comment;
 
     // Getters and Setters
@@ -34,11 +34,11 @@
         this.job = job;
     }
 
-    public Integer getRating() {
+    public Double getRating() {
         return rating;
     }
 
-    public void setRating(Integer rating) {
+    public void setRating(Double rating) {
         this.rating = rating;
     }
 
Index: .idea/dataSources.local.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"dataSourceStorageLocal\" created-in=\"IU-243.24978.46\">\n    <data-source name=\"SEP490_v1@localhost\" uuid=\"80258432-1304-43cc-ba00-a5b4a1351605\">\n      <database-info product=\"PostgreSQL\" version=\"16.6 (Ubuntu 16.6-0ubuntu0.24.04.1)\" jdbc-version=\"4.2\" driver-name=\"PostgreSQL JDBC Driver\" driver-version=\"42.7.3\" dbms=\"POSTGRES\" exact-version=\"16.6\" exact-driver-version=\"42.7\">\n        <identifier-quote-string>&quot;</identifier-quote-string>\n      </database-info>\n      <case-sensitivity plain-identifiers=\"lower\" quoted-identifiers=\"exact\" />\n      <secret-storage>master_key</secret-storage>\n      <user-name>sep490</user-name>\n      <schema-mapping>\n        <introspection-scope>\n          <node kind=\"database\" qname=\"@\">\n            <node kind=\"schema\" qname=\"@\" />\n          </node>\n        </introspection-scope>\n      </schema-mapping>\n    </data-source>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.local.xml b/.idea/dataSources.local.xml
--- a/.idea/dataSources.local.xml	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/.idea/dataSources.local.xml	(date 1743672482095)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="dataSourceStorageLocal" created-in="IU-243.24978.46">
+  <component name="dataSourceStorageLocal" created-in="IU-243.23654.189">
     <data-source name="SEP490_v1@localhost" uuid="80258432-1304-43cc-ba00-a5b4a1351605">
       <database-info product="PostgreSQL" version="16.6 (Ubuntu 16.6-0ubuntu0.24.04.1)" jdbc-version="4.2" driver-name="PostgreSQL JDBC Driver" driver-version="42.7.3" dbms="POSTGRES" exact-version="16.6" exact-driver-version="42.7">
         <identifier-quote-string>&quot;</identifier-quote-string>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"6dd32c25-99a1-4da0-a769-374f6713cd9c\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CleanerJobController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CleanerJobController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CustomerController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CustomerController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CustomerJobController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CustomerJobController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/MessageController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/MessageController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/ProfileController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/ProfileController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/ServiceController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/ServiceController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/application.properties\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$/..\" value=\"HOME_CLEAN_DEMO\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RequestMappingsPanelOrder0\": \"0\",\n    \"RequestMappingsPanelOrder1\": \"1\",\n    \"RequestMappingsPanelWidth0\": \"895\",\n    \"RequestMappingsPanelWidth1\": \"894\",\n    \"Spring Boot.HomeCleanApiApplication.executor\": \"Run\",\n    \"git-widget-placeholder\": \"api/find-cleaner-by-zone\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\"\n  }\n}]]></component>\n  <component name=\"TaskManager\">\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/.idea/workspace.xml	(date 1743672482097)
@@ -5,14 +5,10 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="6dd32c25-99a1-4da0-a769-374f6713cd9c" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CleanerJobController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CleanerJobController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CustomerController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CustomerController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CustomerJobController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/CustomerJobController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/MessageController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/MessageController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/ProfileController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/ProfileController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/ServiceController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/homecleanapi/controllers/ServiceController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/application.properties" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -22,27 +18,79 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$/.." value="HOME_CLEAN_DEMO" />
+        <entry key="$PROJECT_DIR$/.." value="main" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
+  </component>
+  <component name="MavenImportPreferences">
+    <option name="generalSettings">
+      <MavenGeneralSettings>
+        <option name="mavenHomeTypeForPersistence" value="WRAPPER" />
+      </MavenGeneralSettings>
+    </option>
+  </component>
+  <component name="ProjectColorInfo"><![CDATA[{
+  "associatedIndex": 8
+}]]></component>
+  <component name="ProjectId" id="2uuDl5vx1Ay1Lpe06u3pRyNIUWe" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "RequestMappingsPanelOrder0": "0",
     "RequestMappingsPanelOrder1": "1",
-    "RequestMappingsPanelWidth0": "895",
-    "RequestMappingsPanelWidth1": "894",
+    "RequestMappingsPanelWidth0": "75",
+    "RequestMappingsPanelWidth1": "75",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "RunOnceActivity.git.unshallow": "true",
     "Spring Boot.HomeCleanApiApplication.executor": "Run",
-    "git-widget-placeholder": "api/find-cleaner-by-zone",
+    "git-widget-placeholder": "manhtt3",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "D:/doan/SEP490-G30/HomeCleanAPI",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)"
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "advanced.settings",
+    "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
+  <component name="RunManager">
+    <configuration name="HomeCleanApiApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
+      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
+      <module name="HomeCleanAPI" />
+      <option name="SPRING_BOOT_MAIN_CLASS" value="com.example.homecleanapi.HomeCleanApiApplication" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+  </component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-jdk-9823dce3aa75-125ca727e0f0-intellij.indexing.shared.core-IU-243.23654.189" />
+        <option value="bundled-js-predefined-d6986cc7102b-822845ee3bb5-JavaScript-IU-243.23654.189" />
+      </set>
+    </attachedChunks>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="6dd32c25-99a1-4da0-a769-374f6713cd9c" name="Changes" comment="" />
+      <created>1743089713659</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1743089713659</updated>
+      <workItem from="1743089715291" duration="689000" />
+    </task>
     <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
     <option name="TAB_STATES">
@@ -58,4 +106,8 @@
   <component name="VcsManagerConfiguration">
     <option name="LAST_COMMIT_MESSAGE" value="" />
   </component>
+  <component name="XSLT-Support.FileAssociations.UIState">
+    <expand />
+    <select />
+  </component>
 </project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <annotationProcessing>\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\n        <outputRelativeToContentRoot value=\"true\" />\n        <module name=\"HomeCleanAPI\" />\n      </profile>\n    </annotationProcessing>\n  </component>\n  <component name=\"JavacSettings\">\n    <option name=\"ADDITIONAL_OPTIONS_OVERRIDE\">\n      <module name=\"HomeCleanAPI\" options=\"-parameters\" />\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/.idea/compiler.xml	(date 1743672564504)
@@ -2,13 +2,16 @@
 <project version="4">
   <component name="CompilerConfiguration">
     <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
       <profile name="Maven default annotation processors profile" enabled="true">
         <sourceOutputDir name="target/generated-sources/annotations" />
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
         <outputRelativeToContentRoot value="true" />
-        <module name="HomeCleanAPI" />
       </profile>
     </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="HomeCleanAPI" target="17" />
+    </bytecodeTargetLevel>
   </component>
   <component name="JavacSettings">
     <option name="ADDITIONAL_OPTIONS_OVERRIDE">
Index: src/main/java/com/example/homecleanapi/models/Transaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.models;\r\n\r\nimport jakarta.persistence.*;\r\n\r\n@Entity\r\n@Table(name = \"transactions\")\r\npublic class Transaction {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"customer_id\")\r\n    private Customers customer; // Liên kết với bảng customers\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"cleaner_id\")\r\n    private Employee cleaner; // Liên kết với bảng cleaners\r\n\r\n    private Double amount;\r\n    private String transactionType;  // \"Credit\" hoặc \"Debit\"\r\n    private String paymentMethod;    // \"Credit Card\", \"Debit Card\", \"E-Wallet\", etc.\r\n    private String transactionStatus; // \"Pending\", \"Completed\", \"Failed\"\r\n\r\n    // Getters and Setters\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public Customers getCustomer() {\r\n        return customer;\r\n    }\r\n\r\n    public void setCustomer(Customers customer) {\r\n        this.customer = customer;\r\n    }\r\n\r\n    public Employee getCleaner() {\r\n        return cleaner;\r\n    }\r\n\r\n    public void setCleaner(Employee cleaner) {\r\n        this.cleaner = cleaner;\r\n    }\r\n\r\n    public Double getAmount() {\r\n        return amount;\r\n    }\r\n\r\n    public void setAmount(Double amount) {\r\n        this.amount = amount;\r\n    }\r\n\r\n    public String getTransactionType() {\r\n        return transactionType;\r\n    }\r\n\r\n    public void setTransactionType(String transactionType) {\r\n        this.transactionType = transactionType;\r\n    }\r\n\r\n    public String getPaymentMethod() {\r\n        return paymentMethod;\r\n    }\r\n\r\n    public void setPaymentMethod(String paymentMethod) {\r\n        this.paymentMethod = paymentMethod;\r\n    }\r\n\r\n    public String getTransactionStatus() {\r\n        return transactionStatus;\r\n    }\r\n\r\n    public void setTransactionStatus(String transactionStatus) {\r\n        this.transactionStatus = transactionStatus;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/models/Transaction.java b/src/main/java/com/example/homecleanapi/models/Transaction.java
--- a/src/main/java/com/example/homecleanapi/models/Transaction.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/models/Transaction.java	(date 1743672482129)
@@ -1,6 +1,8 @@
 package com.example.homecleanapi.models;
 
 import jakarta.persistence.*;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
 
 @Entity
 @Table(name = "transactions")
@@ -10,20 +12,32 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
 
-    @ManyToOne
-    @JoinColumn(name = "customer_id")
-    private Customers customer; // Liên kết với bảng customers
+    @Column(name = "transaction_id", nullable = false, unique = true)
+    private String transactionId;
+
+    @Column(name = "job_id", nullable = false)
+    private Long jobId;
 
-    @ManyToOne
-    @JoinColumn(name = "cleaner_id")
-    private Employee cleaner; // Liên kết với bảng cleaners
+    @Column(name = "amount", nullable = false)
+    private BigDecimal amount;
 
-    private Double amount;
-    private String transactionType;  // "Credit" hoặc "Debit"
-    private String paymentMethod;    // "Credit Card", "Debit Card", "E-Wallet", etc.
-    private String transactionStatus; // "Pending", "Completed", "Failed"
+    @Column(name = "transaction_date", nullable = false)
+    private LocalDateTime transactionDate;
+
+    @Column(name = "status", nullable = false)
+    private String status; // 'Pending', 'Completed', 'Failed', 'Refunded'
+
+    @Column(name = "payment_method", nullable = false)
+    private String paymentMethod; // 'Credit Card', 'Debit Card', 'Bank Transfer', 'Cash', 'E-Wallet', etc.
+
+    @Column(name = "created_at", nullable = false)
+    private LocalDateTime createdAt;
+
+    @Column(name = "updated_at", nullable = false)
+    private LocalDateTime updatedAt;
 
     // Getters and Setters
+
     public Long getId() {
         return id;
     }
@@ -32,36 +46,44 @@
         this.id = id;
     }
 
-    public Customers getCustomer() {
-        return customer;
+    public String getTransactionId() {
+        return transactionId;
     }
 
-    public void setCustomer(Customers customer) {
-        this.customer = customer;
+    public void setTransactionId(String transactionId) {
+        this.transactionId = transactionId;
     }
 
-    public Employee getCleaner() {
-        return cleaner;
+    public Long getJobId() {
+        return jobId;
     }
 
-    public void setCleaner(Employee cleaner) {
-        this.cleaner = cleaner;
+    public void setJobId(Long jobId) {
+        this.jobId = jobId;
     }
 
-    public Double getAmount() {
+    public BigDecimal getAmount() {
         return amount;
     }
 
-    public void setAmount(Double amount) {
+    public void setAmount(BigDecimal amount) {
         this.amount = amount;
     }
 
-    public String getTransactionType() {
-        return transactionType;
+    public LocalDateTime getTransactionDate() {
+        return transactionDate;
+    }
+
+    public void setTransactionDate(LocalDateTime transactionDate) {
+        this.transactionDate = transactionDate;
+    }
+
+    public String getStatus() {
+        return status;
     }
 
-    public void setTransactionType(String transactionType) {
-        this.transactionType = transactionType;
+    public void setStatus(String status) {
+        this.status = status;
     }
 
     public String getPaymentMethod() {
@@ -72,11 +94,19 @@
         this.paymentMethod = paymentMethod;
     }
 
-    public String getTransactionStatus() {
-        return transactionStatus;
+    public LocalDateTime getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(LocalDateTime createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    public LocalDateTime getUpdatedAt() {
+        return updatedAt;
     }
 
-    public void setTransactionStatus(String transactionStatus) {
-        this.transactionStatus = transactionStatus;
+    public void setUpdatedAt(LocalDateTime updatedAt) {
+        this.updatedAt = updatedAt;
     }
 }
Index: src/main/java/com/example/homecleanapi/models/Customers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.models;\n\nimport jakarta.persistence.*;\n\nimport java.time.LocalDateTime;\n\n\n@Entity\n@Table(name = \"customers\")\npublic class Customers {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n    private String password_hash;\n    private String full_name;\n    @Column(name = \"phone_number\")\n    private String phone;\n    @Column(name = \"created_at\", nullable = false, updatable = false)\n    private LocalDateTime created_at;\n\n    public Customers() {\n    }\n\n    @PrePersist\n    protected void onCreate() {\n        this.created_at = LocalDateTime.now();\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getPassword_hash() {\n        return password_hash;\n    }\n\n    public void setPassword_hash(String password_hash) {\n        this.password_hash = password_hash;\n    }\n\n    public String getFull_name() {\n        return full_name;\n    }\n\n    public void setFull_name(String full_name) {\n        this.full_name = full_name;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public LocalDateTime getCreated_at() {\n        return created_at;\n    }\n\n    public void setCreated_at(LocalDateTime created_at) {\n        this.created_at = created_at;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/models/Customers.java b/src/main/java/com/example/homecleanapi/models/Customers.java
--- a/src/main/java/com/example/homecleanapi/models/Customers.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/models/Customers.java	(date 1743672482124)
@@ -17,6 +17,7 @@
     private String phone;
     @Column(name = "created_at", nullable = false, updatable = false)
     private LocalDateTime created_at;
+    private boolean is_deleted;
 
     public Customers() {
     }
@@ -65,4 +66,12 @@
     public void setCreated_at(LocalDateTime created_at) {
         this.created_at = created_at;
     }
+
+    public boolean isIs_deleted() {
+        return is_deleted;
+    }
+
+    public void setIs_deleted(boolean is_deleted) {
+        this.is_deleted = is_deleted;
+    }
 }
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/repositories/CustomerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.repositories;\n\nimport com.example.homecleanapi.models.Customers;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository<Customers, Long> {\n    Customers findByPhone(String phone);\n    Customers findById(Integer id);\n    boolean existsByPhone(String phone);\n\n    \n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/repositories/CustomerRepository.java b/src/main/java/com/example/homecleanapi/repositories/CustomerRepository.java
--- a/src/main/java/com/example/homecleanapi/repositories/CustomerRepository.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/repositories/CustomerRepository.java	(date 1743672482131)
@@ -7,8 +7,8 @@
 @Repository
 public interface CustomerRepository extends JpaRepository<Customers, Long> {
     Customers findByPhone(String phone);
-    Customers findById(Integer id);
     boolean existsByPhone(String phone);
 
-    
+
+    Customers findCustomersById(Integer id);
 }
\ No newline at end of file
Index: docker-compose.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>version: \"3.9\"\nservices:\n  web:\n    build: .\n    ports:\n      - \"8080:8080\"\n    network_mode: host\n    environment:\n      - SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/SEP490_v1\n      - SPRING_DATASOURCE_USERNAME=sep490\n      - SPRING_DATASOURCE_PASSWORD=123456\n\n  rabbitmq:\n    image: \"rabbitmq:3-management\"\n    container_name: rabbitmq\n    environment:\n      RABBITMQ_DEFAULT_USER: guest\n      RABBITMQ_DEFAULT_PASS: guest\n    ports:\n      - \"5672:5672\"   # Cổng giao tiếp AMQP\n      - \"15672:15672\" # RabbitMQ Management UI\n    networks:\n      - backend\n\n  redis:\n    image: \"redis:latest\"\n    container_name: redis\n    command: [ \"redis-server\", \"--requirepass\", \"guest\" ]\n    environment:\n      - REDIS_PASSWORD=guest\n    ports:\n      - \"6379:6379\"\n    networks:\n      - backend\n\n  redis_insight:\n    image: \"redislabs/redisinsight:latest\"\n    container_name: redis_insight\n    ports:\n      - \"5540:5540\"\n    networks:\n      - backend\n\nnetworks:\n  backend:\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docker-compose.yml b/docker-compose.yml
--- a/docker-compose.yml	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/docker-compose.yml	(date 1743672482097)
@@ -1,4 +1,4 @@
-version: "3.9"
+#version: "3.9"
 services:
   web:
     build: .
@@ -6,9 +6,9 @@
       - "8080:8080"
     network_mode: host
     environment:
-      - SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/SEP490_v1
-      - SPRING_DATASOURCE_USERNAME=sep490
-      - SPRING_DATASOURCE_PASSWORD=123456
+      - SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/doan
+      - SPRING_DATASOURCE_USERNAME=postgres
+      - SPRING_DATASOURCE_PASSWORD=123
 
   rabbitmq:
     image: "rabbitmq:3-management"
Index: src/main/java/com/example/homecleanapi/services/ConversationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.services;\n\n\nimport com.example.homecleanapi.models.Conversation;\nimport com.example.homecleanapi.repositories.ConversationRepository;\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Service\n@RequiredArgsConstructor\npublic class ConversationService {\n\t\n\t@Autowired\n    private ConversationRepository conversationRepository;\n\n    public Conversation getOrCreateConversation(Integer customerId, Integer cleanerId) {\n        return conversationRepository.findByCustomerIdAndCleanerId(customerId, cleanerId)\n                .orElseGet(() -> {\n                    Conversation conversation = new Conversation();\n                    conversation.setCustomerId(customerId);\n                    conversation.setCleanerId(cleanerId);\n                    return conversationRepository.save(conversation);\n                });\n    }\n\n    public ResponseEntity<Map<String, Object>> getConversationsByCustomerId(Integer customerId) {\n        Map<String, Object> response = new HashMap<>();\n\n        List<Map<String, Object>> list_conversation = conversationRepository.findConversationByCustomerId(customerId)\n                .stream()\n                .map(conversation -> {\n                    Map<String, Object> allConversation = new HashMap<>();\n                    allConversation.put(\"customer_id\", conversation.getCustomerId());\n                    allConversation.put(\"cleaner_id\", conversation.getCleanerId());\n                    allConversation.put(\"conversation_id\", conversation.getId());\n                    return allConversation;\n                })\n                .toList();\n        response.put(\"conversations\", list_conversation);\n        return ResponseEntity.ok(response);\n    }\n\n    public ResponseEntity<Map<String, Object>> getConversationsByCleanerId(Integer cleanerId) {\n        Map<String, Object> response = new HashMap<>();\n\n        List<Map<String, Object>> list_conversation = conversationRepository.findConversationByCleanerId(cleanerId)\n                .stream()\n                .map(conversation -> {\n                    Map<String, Object> allConversation = new HashMap<>();\n                    allConversation.put(\"customer_id\", conversation.getCustomerId());\n                    allConversation.put(\"cleaner_id\", conversation.getCleanerId());\n                    allConversation.put(\"conversation_id\", conversation.getId());\n                    return allConversation;\n                })\n                .toList();\n        response.put(\"conversations\", list_conversation);\n        return ResponseEntity.ok(response);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/services/ConversationService.java b/src/main/java/com/example/homecleanapi/services/ConversationService.java
--- a/src/main/java/com/example/homecleanapi/services/ConversationService.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/services/ConversationService.java	(date 1743672482137)
@@ -2,7 +2,11 @@
 
 
 import com.example.homecleanapi.models.Conversation;
+import com.example.homecleanapi.models.Customers;
+import com.example.homecleanapi.models.Employee;
 import com.example.homecleanapi.repositories.ConversationRepository;
+import com.example.homecleanapi.repositories.CustomerRepository;
+import com.example.homecleanapi.repositories.EmployeeRepository;
 import lombok.RequiredArgsConstructor;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -19,13 +23,20 @@
 	
 	@Autowired
     private ConversationRepository conversationRepository;
+    private final EmployeeRepository employeeRepository;
+    private final CustomerRepository customerRepository;
 
-    public Conversation getOrCreateConversation(Integer customerId, Integer cleanerId) {
-        return conversationRepository.findByCustomerIdAndCleanerId(customerId, cleanerId)
+    public Conversation getOrCreateConversation(Long customerId, Integer cleanerId) {
+        Customers customer = customerRepository.findById(customerId)
+                .orElseThrow(() -> new RuntimeException("Customer not found"));
+        Employee cleaner = employeeRepository.findById(cleanerId)
+                .orElseThrow(() -> new RuntimeException("Cleaner not found"));
+
+        return conversationRepository.findByCustomerAndCleaner(customer, cleaner)
                 .orElseGet(() -> {
                     Conversation conversation = new Conversation();
-                    conversation.setCustomerId(customerId);
-                    conversation.setCleanerId(cleanerId);
+                    conversation.setCustomer(customer);
+                    conversation.setCleaner(cleaner);
                     return conversationRepository.save(conversation);
                 });
     }
@@ -37,9 +48,11 @@
                 .stream()
                 .map(conversation -> {
                     Map<String, Object> allConversation = new HashMap<>();
-                    allConversation.put("customer_id", conversation.getCustomerId());
-                    allConversation.put("cleaner_id", conversation.getCleanerId());
+                    allConversation.put("customer_id", conversation.getCustomer().getId());
+                    allConversation.put("cleaner_id", conversation.getCleaner().getId());
                     allConversation.put("conversation_id", conversation.getId());
+                    allConversation.put("customer_name", conversation.getCustomer().getFull_name());
+                    allConversation.put("cleaner_name", conversation.getCleaner().getName());
                     return allConversation;
                 })
                 .toList();
@@ -54,9 +67,11 @@
                 .stream()
                 .map(conversation -> {
                     Map<String, Object> allConversation = new HashMap<>();
-                    allConversation.put("customer_id", conversation.getCustomerId());
-                    allConversation.put("cleaner_id", conversation.getCleanerId());
+                    allConversation.put("customer_id", conversation.getCustomer().getId());
+                    allConversation.put("cleaner_id", conversation.getCleaner().getId());
                     allConversation.put("conversation_id", conversation.getId());
+                    allConversation.put("customer_name", conversation.getCustomer().getFull_name());
+                    allConversation.put("cleaner_name", conversation.getCleaner().getName());
                     return allConversation;
                 })
                 .toList();
Index: src/main/java/com/example/homecleanapi/services/EmailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.services;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class EmailService {\n\n    @Autowired\n    private JavaMailSender mailSender;\n\n    public void sendEmail(String to, String subject, String text) {\n        SimpleMailMessage message = new SimpleMailMessage();\n        message.setTo(to);\n        message.setSubject(subject);\n        message.setText(text);\n        mailSender.send(message);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/services/EmailService.java b/src/main/java/com/example/homecleanapi/services/EmailService.java
--- a/src/main/java/com/example/homecleanapi/services/EmailService.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/services/EmailService.java	(date 1743672482139)
@@ -1,8 +1,11 @@
 package com.example.homecleanapi.services;
 
+import jakarta.mail.MessagingException;
+import jakarta.mail.internet.MimeMessage;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.mail.SimpleMailMessage;
 import org.springframework.mail.javamail.JavaMailSender;
+import org.springframework.mail.javamail.MimeMessageHelper;
 import org.springframework.stereotype.Service;
 
 @Service
@@ -11,11 +14,16 @@
     @Autowired
     private JavaMailSender mailSender;
 
-    public void sendEmail(String to, String subject, String text) {
-        SimpleMailMessage message = new SimpleMailMessage();
-        message.setTo(to);
-        message.setSubject(subject);
-        message.setText(text);
-        mailSender.send(message);
+    public void sendEmail(String to, String subject, String text, boolean isHtml) {
+        try {
+            MimeMessage message = mailSender.createMimeMessage();
+            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
+            helper.setTo(to);
+            helper.setSubject(subject);
+            helper.setText(text, isHtml);
+            mailSender.send(message);
+        } catch (MessagingException e) {
+            throw new RuntimeException(e);
+        }
     }
 }
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/services/EmployeeAuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.services;\n\nimport com.example.homecleanapi.dtos.CleanerRegisterRequest;\nimport com.example.homecleanapi.dtos.ForgotPasswordRequest;\nimport com.example.homecleanapi.dtos.LoginRequest;\nimport com.example.homecleanapi.models.Employee;\nimport com.example.homecleanapi.repositories.EmployeeRepository;\nimport com.example.homecleanapi.utils.JwtUtils;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\n@Service\npublic class EmployeeAuthService {\n    private final EmployeeRepository employeeRepository;\n    private final PasswordEncoder passwordEncoder;\n    private final JwtUtils jwtUtils;\n    private final AvatarService avatarService;\n\n    public EmployeeAuthService(EmployeeRepository employeeRepository, PasswordEncoder passwordEncoder, JwtUtils jwtUtils, AvatarService avatarService) {\n        this.employeeRepository = employeeRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.jwtUtils = jwtUtils;\n        this.avatarService = avatarService;\n    }\n\n    public ResponseEntity<Map<String, Object>> cleanerRegister(CleanerRegisterRequest request) {\n        Map<String, Object> response = new HashMap<>();\n\n        if (request == null || request.getPhone() == null || request.getPassword() == null || request.getName() == null\n                || request.getAge() == null || request.getAddress() == null || request.getExperience() == null || request.getIdentity_number() == null) {\n            response.put(\"message\", \"Thông tin đăng ký không hợp lệ!\");\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\n        }\n\n        if (employeeRepository.existsByPhone(request.getPhone())) {\n            response.put(\"message\", \"Số điện thoại đã tồn tại!\");\n            return ResponseEntity.status(HttpStatus.CONFLICT).body(response);\n        }\n\n        Employee employee = new Employee();\n        employee.setPhone(request.getPhone());\n        employee.setPassword(passwordEncoder.encode(request.getPassword()));\n        employee.setName(request.getName());\n        employee.setEmail(request.getEmail());\n        employee.setAge(request.getAge());\n        employee.setAddress(request.getAddress());\n        employee.setExperience(request.getExperience());\n        employee.setIdentity_number(request.getIdentity_number().toString());\n        employee.setProfile_image(avatarService.generateIdenticon(request.getName()));\n//    customer.setRole(\"USER\"); // Kiểm tra lại nếu role là enum hoặc bảng riêng\n\n        employeeRepository.save(employee);\n\n        response.put(\"EmployeeID\", employee.getId());\n        response.put(\"phone\", employee.getPhone());\n        response.put(\"name\", employee.getName());\n        response.put(\"created_at\", employee.getCreated_at());\n        return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n\n\n    public ResponseEntity<Map<String, Object>> cleanerLogin(LoginRequest request) {\n        Employee employee = employeeRepository.findByPhone(request.getPhone());\n\n        Map<String, Object> response = new HashMap<>();\n\n        if (employee == null) {\n            response.put(\"message\", \"Số điện thoại không tồn tại!\");\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\n        }\n\n        if (!passwordEncoder.matches(request.getPassword(), employee.getPassword())) {\n            response.put(\"message\", \"Sai mật khẩu!\");\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);\n        }\n\n        String token = jwtUtils.generateToken(employee.getPhone(), employee.getName(), employee.getId().toString(), \"Cleaner\");\n\n        response.put(\"token\", token);\n        response.put(\"phone\", employee.getPhone());\n        response.put(\"cleanerId\", employee.getId());\n        response.put(\"name\", employee.getName());\n\n        return ResponseEntity.ok(response);\n    }\n\n    public ResponseEntity<Map<String, Object>> cleanerForgotPassword(ForgotPasswordRequest request) {\n        Employee employee = employeeRepository.findByPhone(request.getPhone());\n\n        Map<String, Object> response = new HashMap<>();\n\n        if (employee == null) {\n            response.put(\"message\", \"Số điện thoại không tồn tại!\");\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\n        }\n\n        String newPassword = UUID.randomUUID().toString().substring(0, 8);\n        employee.setPassword(passwordEncoder.encode(newPassword));\n        employeeRepository.save(employee);\n\n        // Gửi mật khẩu mới qua SMS (giả lập)\n        System.out.println(\"Gửi mật khẩu mới: \" + newPassword + \" đến số điện thoại: \" + request.getPhone());\n\n        response.put(\"message\", \"Mật khẩu mới đã được gửi!\");\n        response.put(\"phone\", request.getPhone());\n        response.put(\"newPassword\", newPassword); // Chỉ hiển thị trong môi trường phát triển, có thể ẩn trong production.\n        return ResponseEntity.ok(response);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/services/EmployeeAuthService.java b/src/main/java/com/example/homecleanapi/services/EmployeeAuthService.java
--- a/src/main/java/com/example/homecleanapi/services/EmployeeAuthService.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/services/EmployeeAuthService.java	(date 1743672482139)
@@ -21,12 +21,14 @@
     private final PasswordEncoder passwordEncoder;
     private final JwtUtils jwtUtils;
     private final AvatarService avatarService;
+    private final EmailService emailService;
 
-    public EmployeeAuthService(EmployeeRepository employeeRepository, PasswordEncoder passwordEncoder, JwtUtils jwtUtils, AvatarService avatarService) {
+    public EmployeeAuthService(EmployeeRepository employeeRepository, PasswordEncoder passwordEncoder, JwtUtils jwtUtils, AvatarService avatarService, EmailService emailService) {
         this.employeeRepository = employeeRepository;
         this.passwordEncoder = passwordEncoder;
         this.jwtUtils = jwtUtils;
         this.avatarService = avatarService;
+        this.emailService = emailService;
     }
 
     public ResponseEntity<Map<String, Object>> cleanerRegister(CleanerRegisterRequest request) {
@@ -86,12 +88,13 @@
         response.put("phone", employee.getPhone());
         response.put("cleanerId", employee.getId());
         response.put("name", employee.getName());
+        response.put("role", "Employee");
 
         return ResponseEntity.ok(response);
     }
 
-    public ResponseEntity<Map<String, Object>> cleanerForgotPassword(ForgotPasswordRequest request) {
-        Employee employee = employeeRepository.findByPhone(request.getPhone());
+    public ResponseEntity<Map<String, Object>> cleanerForgotPassword(ForgotPasswordRequest request, Integer employeeId) {
+        Employee employee = employeeRepository.findEmployeeById(employeeId);
 
         Map<String, Object> response = new HashMap<>();
 
@@ -103,12 +106,14 @@
         String newPassword = UUID.randomUUID().toString().substring(0, 8);
         employee.setPassword(passwordEncoder.encode(newPassword));
         employeeRepository.save(employee);
-
+        String subject = "Password Reset Request";
+        String text = "<p>Your new password is: <strong>" + newPassword + "</strong></p>"
+                + "<p>Please change it after logging in.</p>";
+        emailService.sendEmail(request.getEmail(), subject, text, true);
         // Gửi mật khẩu mới qua SMS (giả lập)
-        System.out.println("Gửi mật khẩu mới: " + newPassword + " đến số điện thoại: " + request.getPhone());
+        System.out.println("Gửi mật khẩu mới: " + newPassword + " email: " + request.getEmail());
 
         response.put("message", "Mật khẩu mới đã được gửi!");
-        response.put("phone", request.getPhone());
         response.put("newPassword", newPassword); // Chỉ hiển thị trong môi trường phát triển, có thể ẩn trong production.
         return ResponseEntity.ok(response);
     }
Index: ../FE/home-clean-fe/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"home-clean-fe\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@stomp/stompjs\": \"^7.0.1\",\n    \"antd\": \"^5.24.0\",\n    \"axios\": \"^1.7.9\",\n    \"jwt-decode\": \"^3.1.2\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-icons\": \"^5.4.0\",\n    \"react-router-dom\": \"^6.29.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"sockjs-client\": \"^1.6.1\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/package.json b/../FE/home-clean-fe/package.json
--- a/../FE/home-clean-fe/package.json	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/package.json	(date 1743672481994)
@@ -10,6 +10,7 @@
     "react": "^18.2.0",
     "react-dom": "^18.2.0",
     "react-icons": "^5.4.0",
+    "react-responsive": "^10.0.1",
     "react-router-dom": "^6.29.0",
     "react-scripts": "5.0.1",
     "sockjs-client": "^1.6.1",
Index: ../FE/home-clean-fe/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/package-lock.json b/../FE/home-clean-fe/package-lock.json
--- a/../FE/home-clean-fe/package-lock.json	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/package-lock.json	(date 1743672481993)
@@ -15,6 +15,7 @@
         "react": "^18.2.0",
         "react-dom": "^18.2.0",
         "react-icons": "^5.4.0",
+        "react-responsive": "^10.0.1",
         "react-router-dom": "^6.29.0",
         "react-scripts": "5.0.1",
         "sockjs-client": "^1.6.1",
@@ -6317,6 +6318,12 @@
         }
       }
     },
+    "node_modules/css-mediaquery": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/css-mediaquery/-/css-mediaquery-0.1.2.tgz",
+      "integrity": "sha512-COtn4EROW5dBGlE/4PiKnh6rZpAPxDeFLaEEwt4i10jpDMFt2EhQGS79QmmrO+iKCHv0PU/HrOWEhijFd1x99Q==",
+      "license": "BSD"
+    },
     "node_modules/css-minimizer-webpack-plugin": {
       "version": "3.4.1",
       "resolved": "https://registry.npmjs.org/css-minimizer-webpack-plugin/-/css-minimizer-webpack-plugin-3.4.1.tgz",
@@ -9349,6 +9356,12 @@
         "node": ">=10.17.0"
       }
     },
+    "node_modules/hyphenate-style-name": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/hyphenate-style-name/-/hyphenate-style-name-1.1.0.tgz",
+      "integrity": "sha512-WDC/ui2VVRrz3jOVi+XtjqkDjiVjTtFaAGiW37k6b+ohyQ5wYDOGkvCZa8+H0nx3gyvv0+BST9xuOgIyGQ00gw==",
+      "license": "BSD-3-Clause"
+    },
     "node_modules/iconv-lite": {
       "version": "0.6.3",
       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
@@ -11508,6 +11521,15 @@
         "tmpl": "1.0.5"
       }
     },
+    "node_modules/matchmediaquery": {
+      "version": "0.4.2",
+      "resolved": "https://registry.npmjs.org/matchmediaquery/-/matchmediaquery-0.4.2.tgz",
+      "integrity": "sha512-wrZpoT50ehYOudhDjt/YvUJc6eUzcdFPdmbizfgvswCKNHD1/OBOHYJpHie+HXpu6bSkEGieFMYk6VuutaiRfA==",
+      "license": "MIT",
+      "dependencies": {
+        "css-mediaquery": "^0.1.2"
+      }
+    },
     "node_modules/math-intrinsics": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
@@ -14784,6 +14806,24 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/react-responsive": {
+      "version": "10.0.1",
+      "resolved": "https://registry.npmjs.org/react-responsive/-/react-responsive-10.0.1.tgz",
+      "integrity": "sha512-OM5/cRvbtUWEX8le8RCT8scA8y2OPtb0Q/IViEyCEM5FBN8lRrkUOZnu87I88A6njxDldvxG+rLBxWiA7/UM9g==",
+      "license": "MIT",
+      "dependencies": {
+        "hyphenate-style-name": "^1.0.0",
+        "matchmediaquery": "^0.4.2",
+        "prop-types": "^15.6.1",
+        "shallow-equal": "^3.1.0"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "peerDependencies": {
+        "react": ">=16.8.0"
+      }
+    },
     "node_modules/react-router": {
       "version": "6.29.0",
       "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.29.0.tgz",
@@ -15788,6 +15828,12 @@
       "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
       "license": "ISC"
     },
+    "node_modules/shallow-equal": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/shallow-equal/-/shallow-equal-3.1.0.tgz",
+      "integrity": "sha512-pfVOw8QZIXpMbhBWvzBISicvToTiM5WBF1EeAUZDDSb5Dt29yl4AYbyywbJFSEsRUMr7gJaxqCdr4L3tQf9wVg==",
+      "license": "MIT"
+    },
     "node_modules/shebang-command": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
Index: ../FE/home-clean-fe/src/assets/CSS/work/WorkDetails.module.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.container {\n    display: flex;\n    justify-content: center;\n    padding: 50px;\n}\n\n.containerbody {\n    max-width: 1200px;\n}\n\n.backButton {\n    width: 200px;\n    height: 40px;\n    background: rgb(229, 229, 229);\n    border-radius: 8px;\n    margin-bottom: 20px;\n}\n\n.backLink {\n    width: 100%;\n    height: 100%;\n    text-decoration: none;\n    color: #000000;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n\n.similarServices {\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n    padding-top: 100px;\n}\n\n.sectionTitle {\n    border-bottom: 4px solid #039855;\n    padding-bottom: 10px;\n    width: fit-content;\n}\n\n.serviceList {\n    display: flex;\n    gap: 20px;\n    justify-content: space-between;\n}\n\n@media (max-width: 768px) {\n    .container {\n        padding: 20px;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/CSS/work/WorkDetails.module.css b/../FE/home-clean-fe/src/assets/CSS/work/WorkDetails.module.css
--- a/../FE/home-clean-fe/src/assets/CSS/work/WorkDetails.module.css	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/assets/CSS/work/WorkDetails.module.css	(date 1743672481995)
@@ -2,6 +2,7 @@
     display: flex;
     justify-content: center;
     padding: 50px;
+    min-height: 600px;
 }
 
 .containerbody {
Index: ../FE/home-clean-fe/src/components/Home/Owner/Navbar.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Link, useNavigate } from \"react-router-dom\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { AuthContext } from \"../../../context/AuthContext\";\nimport houseCleanLogo from '../../../assets/HouseClean_logo.png';\nimport Notification from \"../../Notification/Notification\";\nimport styles from \"../../../assets/CSS/Notification/Notification.module.css\";\nimport { message, Button, Dropdown, Avatar, Badge, Popover } from \"antd\";\nimport { UserOutlined, LogoutOutlined, BellOutlined, MessageOutlined } from \"@ant-design/icons\";\nimport SockJS from \"sockjs-client\";\nimport { Stomp } from \"@stomp/stompjs\";\nimport ChatWindow from \"../../Chat/ChatWindow\";\nimport ConversationList from \"../../Chat/ConversationList\";\nimport { getUnreadNotificationCount } from \"../../../services/NotificationService\";\nimport { getUnreadMessageCount } from \"../../../services/ChatService\";\nimport { BASE_URL } from \"../../../utils/config\";\nimport { URL_WEB_SOCKET } from \"../../../utils/config\";\n\nfunction Navbar() {\n  const { user, dispatch } = useContext(AuthContext);\n  const navigate = useNavigate();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isPopupNotification, setIsPopupNotification] = useState(false);\n  const [notificationCount, setNotificationCount] = useState(0);\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [isPopupMessage, setIsPopupMessage] = useState(false);\n  const [messageCount, setMessageCount] = useState(0);\n  const [isMessageLoading, setIsMessageLoading] = useState(false);\n\n  const roleStr = localStorage.getItem(\"role\");\n  const role = roleStr ? roleStr.toLowerCase() : null;\n  const userId = localStorage.getItem(\"customerId\")\n\n  const [stompClient, setStompClient] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n\n  // Track screen size changes\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Fetch notification count when component mounts and when user changes\n  useEffect(() => {\n    const fetchNotificationCount = async () => {\n      if (user) {\n        try {\n          setIsLoading(true);\n          const count = await getUnreadNotificationCount();\n          setNotificationCount(count);\n        } catch (error) {\n          console.error(\"Failed to fetch notification count:\", error);\n        } finally {\n          setIsLoading(false);\n        }\n      } else {\n        setNotificationCount(0);\n      }\n    };\n\n    fetchNotificationCount();\n\n    // Set up polling to refresh notification count every minute\n    const intervalId = setInterval(fetchNotificationCount, 60000);\n\n    return () => clearInterval(intervalId);\n  }, [user]);\n\n  // Fetch message count when component mounts and when user changes\n  useEffect(() => {\n    const fetchMessageCount = async () => {\n      if (user) {\n        try {\n          setIsMessageLoading(true);\n          const count = await getUnreadMessageCount();\n          setMessageCount(count);\n        } catch (error) {\n          console.error(\"Failed to fetch message count:\", error);\n        } finally {\n          setIsMessageLoading(false);\n        }\n      } else {\n        setMessageCount(0);\n      }\n    };\n\n    fetchMessageCount();\n\n    // Set up polling to refresh message count every minute\n    const intervalId = setInterval(fetchMessageCount, 60000);\n\n    return () => clearInterval(intervalId);\n  }, [user]);\n\n  // Close the menu when notification popup is opened on mobile\n  useEffect(() => {\n    if (isPopupNotification && isMobile && isMenuOpen) {\n      setIsMenuOpen(false);\n    }\n  }, [isPopupNotification, isMobile, isMenuOpen]);\n\n  const toggleMenu = () => {\n    // Close notification popup when opening menu on mobile\n    if (isMobile && isPopupNotification) {\n      setIsPopupNotification(false);\n    }\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleLogout = () => {\n    dispatch({ type: \"LOGOUT\" });\n    message.success(\"Đăng xuất thành công!\");\n    navigate(\"/\");\n  };\n\n  const toggleNotification = () => {\n    setIsPopupNotification(!isPopupNotification);\n    // Close menu when toggling notification on mobile\n    if (isMobile && isMenuOpen) {\n      setIsMenuOpen(false);\n    }\n  };\n\n  // Refresh notifications manually\n  const refreshNotifications = async () => {\n    if (user) {\n      try {\n        setIsLoading(true);\n        const count = await getUnreadNotificationCount();\n        setNotificationCount(count);\n      } catch (error) {\n        console.error(\"Failed to refresh notifications:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // Lấy tên user từ localStorage nếu chưa có trong context\n  const getUserName = () => {\n    if (user && user.customerName) {\n      return user.customerName;\n    }\n    const storedName = localStorage.getItem(\"name\");\n    return storedName ? storedName : '';\n  };\n\n  // Dropdown menu cho user\n  const userMenu = {\n    items: [\n      {\n        key: '1',\n        label: <Link to=\"/infomation\">Thông tin tài khoản</Link>,\n        icon: <UserOutlined />\n      },\n      {\n        key: '2',\n        label: 'Đăng xuất',\n        icon: <LogoutOutlined />,\n        onClick: handleLogout\n      }\n    ]\n  };\n\n  // Notification icon với animation khi có thông báo mới\n  const notificationIcon = (\n    <Badge\n      count={notificationCount}\n      size=\"small\"\n      offset={[-2, 6]}\n      className={styles.notification_badge}\n    >\n      <div\n        className={styles.notification_icon_wrapper}\n        onClick={isMobile ? toggleNotification : undefined}\n      >\n        <BellOutlined\n          className={`${styles.notification_icon} ${notificationCount > 0 ? styles.notification_active : ''}`}\n          style={{ fontSize: '20px' }}\n          spin={isLoading}\n        />\n      </div>\n    </Badge>\n  );\n\n  // Mobile notification content\n  const mobileNotificationContent = isPopupNotification && isMobile && user ? (\n    <div className={styles.mobile_notification_overlay} onClick={() => setIsPopupNotification(false)}>\n      <div\n        className={styles.mobile_notification_container}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <Notification\n          onClose={() => setIsPopupNotification(false)}\n          onViewAll={() => {\n            setIsPopupNotification(false);\n            // Navigate to full notification page if you have one\n            // navigate(\"/notifications\");\n          }}\n        />\n      </div>\n    </div>\n  ) : null;\n\n  // Notification popover component (for desktop)\n  const notificationPopover = isMobile ? (\n    user ? notificationIcon : null\n  ) : (\n    user ? (\n      <Popover\n        content={\n          <Notification\n            onClose={() => setIsPopupNotification(false)}\n            onViewAll={() => {\n              setIsPopupNotification(false);\n              // Navigate to full notification page if you have one\n              // navigate(\"/notifications\");\n            }}\n          />\n        }\n        trigger=\"click\"\n        open={isPopupNotification}\n        onOpenChange={(visible) => {\n          setIsPopupNotification(visible);\n          if (visible) {\n            // Refresh notification count when opening the popover\n            refreshNotifications();\n          }\n        }}\n        placement=\"bottomRight\"\n        overlayClassName={styles.notification_popover}\n      >\n        {notificationIcon}\n      </Popover>\n    ) : null\n  );\n\n  // User profile component\n  const userProfile = (\n    <Dropdown menu={userMenu} placement=\"bottomRight\">\n      <div style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\n        <Avatar icon={<UserOutlined />} style={{ marginRight: '8px' }} />\n        <span>{getUserName()}</span>\n      </div>\n    </Dropdown>\n  );\n\n  // Login and Register buttons\n  const authButtons = (\n    <div style={{ display: 'flex', gap: '10px' }}>\n      <Link to=\"/login\" className=\"login-btn\" style={{ width: '110px' }}>Đăng nhập</Link>\n      <Link to=\"/register\" className=\"login-btn\" style={{\n        width: '110px',\n        textAlign: 'center',\n        background: 'white',\n        border: '2px solid #00a651',\n        color: 'black'\n      }}>Đăng ký</Link>\n    </div >\n  );\n\n  const toggleMessage = () => {\n    setIsPopupMessage(!isPopupMessage);\n    // Close menu when toggling message on mobile\n    if (isMobile && isMenuOpen) {\n      setIsMenuOpen(false);\n    }\n  };\n\n  // Message icon with loading and count\n  const messageIcon = (\n    <Badge\n      count={messageCount}\n      size=\"small\"\n      offset={[-2, 6]}\n      className={styles.message_badge}\n    >\n      <div\n        className={styles.message_icon_wrapper}\n        onClick={isMobile ? toggleMessage : undefined}\n      >\n        <MessageOutlined\n          className={`${styles.message_icon} ${messageCount > 0 ? styles.message_active : ''}`}\n          style={{ fontSize: '20px' }}\n          spin={isMessageLoading}\n        />\n      </div>\n    </Badge>\n  );\n\n\n  // WebSocket connection for real-time message updates\n  useEffect(() => {\n    if (!role || !userId) {\n      console.error(\"Missing role or userId in URL!\");\n      return;\n    }\n\n    const socket = new SockJS(`${URL_WEB_SOCKET}/websocket-chat`);\n    const client = Stomp.over(socket);\n\n    client.connect({}, () => {\n      console.log(`User ${userId} (${role}) connected to WebSocket`);\n      setStompClient(client);\n\n      const queueName = `/queue/messages-${userId}`;\n      client.subscribe(queueName, (message) => {\n        const msg = JSON.parse(message.body);\n\n        // Update messages\n        setMessages((prev) => [...prev, msg]);\n\n        // Increment message count for new unread message\n        setMessageCount(prevCount => prevCount + 1);\n      });\n    });\n\n    return () => {\n      if (client && client.connected) {\n        client.disconnect();\n      }\n    };\n  }, [role, userId]);\n\n  // Refresh messages manually\n  const refreshMessages = async () => {\n    if (user) {\n      try {\n        setIsMessageLoading(true);\n        const count = await getUnreadMessageCount();\n        setMessageCount(count);\n      } catch (error) {\n        console.error(\"Failed to refresh message count:\", error);\n      } finally {\n        setIsMessageLoading(false);\n      }\n    }\n  };\n\n  const handleConversationSelect = (conversation) => {\n    console.log(\"\uD83D\uDD0D Chọn cuộc trò chuyện:\", conversation);\n\n    if (!conversation || !conversation.id) {\n      console.error(\"Lỗi: Cuộc trò chuyện không hợp lệ!\", conversation);\n      return;\n    }\n\n    setSelectedConversation(conversation);\n\n    const apiUrl = `${BASE_URL}/messages/${conversation.id}`;\n\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data && Array.isArray(data.messages)) {\n          setMessages(data.messages);\n        } else {\n          console.error(\"API không trả về mảng tin nhắn hợp lệ:\", data);\n          setMessages([]);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Lỗi khi tải tin nhắn cũ:\", error);\n        setMessages([]);\n      });\n  };\n\n  const sendMessage = (messageContent) => {\n    if (stompClient && selectedConversation) {\n      const message = {\n        content: messageContent,\n        senderId: userId,\n        conversationId: selectedConversation.id,\n      };\n\n      const headers = {\n        customerId: selectedConversation.customerId.toString(),\n        employeeId: selectedConversation.employeeId.toString(),\n      };\n\n      stompClient.send('/app/chat', headers, JSON.stringify(message));\n      setMessages((prev) => [...prev, { ...message, sentAt: new Date().toISOString() }]);\n    }\n  };\n  // Kết thúc xử lý Chat\n\n  // Message popover component (for desktop)\n  const messagePopover = isMobile ? (\n    user ? messageIcon : null\n  ) : (\n    user ? (\n      <Popover\n        content={\n          <div className={styles.message_container}>\n            <div className={styles.message__title}>\n              <h2>Tin nhắn</h2>\n            </div>\n            <div className={styles.message__main}>\n              <div className={styles.message_sidebar}>\n                <div className={styles.message_user_list}>\n                  <ConversationList\n                    onSelect={(conversation) => {\n                      handleConversationSelect(conversation);\n                      // Reset message count when a conversation is selected\n                      setMessageCount(0);\n                    }}\n                    userId={userId}\n                    role={role}\n                  />\n                </div>\n              </div>\n              <div className={styles.message_outlet}>\n                <ChatWindow\n                  messages={messages}\n                  onSendMessage={sendMessage}\n                  conversation={selectedConversation}\n                  userId={userId}\n                />\n              </div>\n            </div>\n          </div>\n        }\n        trigger=\"click\"\n        open={isPopupMessage}\n        onOpenChange={(visible) => {\n          setIsPopupMessage(visible);\n          if (visible) {\n            // Refresh message count when opening the popover\n            refreshMessages();\n          }\n        }}\n        placement=\"top\"\n        overlayClassName={styles.message_popover}\n        getPopupContainer={() => document.querySelector(`.${styles.message_icon_wrapper}`)}\n      >\n        {messageIcon}\n      </Popover>\n    ) : null\n  );\n\n  return (\n    <div className=\"Container\">\n      <nav className=\"navbar\">\n        <div className=\"logo\">\n          <Link to=\"/\">\n            <img src={houseCleanLogo} alt=\"House Clean Logo\" className=\"logo-img\" />\n          </Link>\n        </div>\n\n        <div className=\"hamburger\" onClick={toggleMenu}>\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n\n        <div className={`nav-content ${isMenuOpen ? 'active' : ''}`}>\n          <ul className=\"menu\">\n            <li><Link to=\"/about\" className=\"nav-link\">Giới thiệu</Link></li>\n            <li><Link to=\"/activitylist\" className=\"nav-link\">Theo dõi dịch vụ</Link></li>\n            <li><Link to=\"/\" className=\"nav-link\">Tin tức</Link></li>\n            <li><Link to=\"/contact\" className=\"nav-link\">Liên hệ</Link></li>\n\n            {/* Only show these elements on mobile */}\n            <li className=\"mobile-login\">\n              {isMobile && (\n                <>\n                  {user && (\n                    <li className=\"mobile-notification\">\n                      {notificationPopover}\n                      {messagePopover}\n                    </li>\n                  )}\n                  {user ? userProfile : authButtons}\n                </>\n              )}\n            </li>\n          </ul>\n        </div>\n\n        {/* Only show these elements on desktop */}\n        <div className=\"desktop-login\">\n          {!isMobile && (\n            <>\n              {user && (\n                <div className=\"desktop-notification\" style={{ marginRight: '12px', display: 'flex', gap: 12, alignItems: 'center' }}>\n                  {notificationPopover}\n                  {messagePopover}\n                </div>\n              )}\n              {user ? userProfile : authButtons}\n            </>\n          )}\n        </div>\n      </nav>\n\n      {/* Render mobile notification panel outside navbar structure */}\n      {mobileNotificationContent}\n    </div>\n  );\n}\n\nexport default Navbar;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/Home/Owner/Navbar.jsx b/../FE/home-clean-fe/src/components/Home/Owner/Navbar.jsx
--- a/../FE/home-clean-fe/src/components/Home/Owner/Navbar.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/Home/Owner/Navbar.jsx	(date 1743672482071)
@@ -1,11 +1,16 @@
 import { Link, useNavigate } from "react-router-dom";
 import { useState, useContext, useEffect } from "react";
 import { AuthContext } from "../../../context/AuthContext";
-import houseCleanLogo from '../../../assets/HouseClean_logo.png';
+import houseCleanLogo from "../../../assets/HouseClean_logo.png";
 import Notification from "../../Notification/Notification";
 import styles from "../../../assets/CSS/Notification/Notification.module.css";
 import { message, Button, Dropdown, Avatar, Badge, Popover } from "antd";
-import { UserOutlined, LogoutOutlined, BellOutlined, MessageOutlined } from "@ant-design/icons";
+import {
+  UserOutlined,
+  LogoutOutlined,
+  BellOutlined,
+  MessageOutlined,
+} from "@ant-design/icons";
 import SockJS from "sockjs-client";
 import { Stomp } from "@stomp/stompjs";
 import ChatWindow from "../../Chat/ChatWindow";
@@ -30,7 +35,7 @@
 
   const roleStr = localStorage.getItem("role");
   const role = roleStr ? roleStr.toLowerCase() : null;
-  const userId = localStorage.getItem("customerId")
+  const userId = localStorage.getItem("customerId");
 
   const [stompClient, setStompClient] = useState(null);
   const [messages, setMessages] = useState([]);
@@ -42,8 +47,8 @@
       setIsMobile(window.innerWidth < 768);
     };
 
-    window.addEventListener('resize', handleResize);
-    return () => window.removeEventListener('resize', handleResize);
+    window.addEventListener("resize", handleResize);
+    return () => window.removeEventListener("resize", handleResize);
   }, []);
 
   // Fetch notification count when component mounts and when user changes
@@ -148,24 +153,24 @@
       return user.customerName;
     }
     const storedName = localStorage.getItem("name");
-    return storedName ? storedName : '';
+    return storedName ? storedName : "";
   };
 
   // Dropdown menu cho user
   const userMenu = {
     items: [
       {
-        key: '1',
+        key: "1",
         label: <Link to="/infomation">Thông tin tài khoản</Link>,
-        icon: <UserOutlined />
+        icon: <UserOutlined />,
       },
       {
-        key: '2',
-        label: 'Đăng xuất',
+        key: "2",
+        label: "Đăng xuất",
         icon: <LogoutOutlined />,
-        onClick: handleLogout
-      }
-    ]
+        onClick: handleLogout,
+      },
+    ],
   };
 
   // Notification icon với animation khi có thông báo mới
@@ -181,8 +186,10 @@
         onClick={isMobile ? toggleNotification : undefined}
       >
         <BellOutlined
-          className={`${styles.notification_icon} ${notificationCount > 0 ? styles.notification_active : ''}`}
-          style={{ fontSize: '20px' }}
+          className={`${styles.notification_icon} ${
+            notificationCount > 0 ? styles.notification_active : ""
+          }`}
+          style={{ fontSize: "20px" }}
           spin={isLoading}
         />
       </div>
@@ -190,62 +197,66 @@
   );
 
   // Mobile notification content
-  const mobileNotificationContent = isPopupNotification && isMobile && user ? (
-    <div className={styles.mobile_notification_overlay} onClick={() => setIsPopupNotification(false)}>
+  const mobileNotificationContent =
+    isPopupNotification && isMobile && user ? (
       <div
-        className={styles.mobile_notification_container}
-        onClick={(e) => e.stopPropagation()}
-      >
-        <Notification
-          onClose={() => setIsPopupNotification(false)}
-          onViewAll={() => {
-            setIsPopupNotification(false);
-            // Navigate to full notification page if you have one
-            // navigate("/notifications");
-          }}
-        />
-      </div>
-    </div>
-  ) : null;
+        className={styles.mobile_notification_overlay}
+        onClick={() => setIsPopupNotification(false)}
+      >
+        <div
+          className={styles.mobile_notification_container}
+          onClick={(e) => e.stopPropagation()}
+        >
+          <Notification
+            onClose={() => setIsPopupNotification(false)}
+            onViewAll={() => {
+              setIsPopupNotification(false);
+              // Navigate to full notification page if you have one
+              // navigate("/notifications");
+            }}
+          />
+        </div>
+      </div>
+    ) : null;
 
   // Notification popover component (for desktop)
   const notificationPopover = isMobile ? (
-    user ? notificationIcon : null
-  ) : (
     user ? (
-      <Popover
-        content={
-          <Notification
-            onClose={() => setIsPopupNotification(false)}
-            onViewAll={() => {
-              setIsPopupNotification(false);
-              // Navigate to full notification page if you have one
-              // navigate("/notifications");
-            }}
-          />
-        }
-        trigger="click"
-        open={isPopupNotification}
-        onOpenChange={(visible) => {
-          setIsPopupNotification(visible);
-          if (visible) {
-            // Refresh notification count when opening the popover
-            refreshNotifications();
-          }
-        }}
-        placement="bottomRight"
-        overlayClassName={styles.notification_popover}
-      >
-        {notificationIcon}
-      </Popover>
-    ) : null
-  );
+      notificationIcon
+    ) : null
+  ) : user ? (
+    <Popover
+      content={
+        <Notification
+          onClose={() => setIsPopupNotification(false)}
+          onViewAll={() => {
+            setIsPopupNotification(false);
+            // Navigate to full notification page if you have one
+            // navigate("/notifications");
+          }}
+        />
+      }
+      trigger="click"
+      open={isPopupNotification}
+      onOpenChange={(visible) => {
+        setIsPopupNotification(visible);
+        if (visible) {
+          // Refresh notification count when opening the popover
+          refreshNotifications();
+        }
+      }}
+      placement="bottomRight"
+      overlayClassName={styles.notification_popover}
+    >
+      {notificationIcon}
+    </Popover>
+  ) : null;
 
   // User profile component
   const userProfile = (
     <Dropdown menu={userMenu} placement="bottomRight">
-      <div style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>
-        <Avatar icon={<UserOutlined />} style={{ marginRight: '8px' }} />
+      <div style={{ display: "flex", alignItems: "center", cursor: "pointer" }}>
+        <Avatar icon={<UserOutlined />} style={{ marginRight: "8px" }} />
         <span>{getUserName()}</span>
       </div>
     </Dropdown>
@@ -253,16 +264,24 @@
 
   // Login and Register buttons
   const authButtons = (
-    <div style={{ display: 'flex', gap: '10px' }}>
-      <Link to="/login" className="login-btn" style={{ width: '110px' }}>Đăng nhập</Link>
-      <Link to="/register" className="login-btn" style={{
-        width: '110px',
-        textAlign: 'center',
-        background: 'white',
-        border: '2px solid #00a651',
-        color: 'black'
-      }}>Đăng ký</Link>
-    </div >
+    <div style={{ display: "flex", gap: "10px" }}>
+      <Link to="/login" className="login-btn" style={{ width: "110px" }}>
+        Đăng nhập
+      </Link>
+      <Link
+        to="/register"
+        className="login-btn"
+        style={{
+          width: "110px",
+          textAlign: "center",
+          background: "white",
+          border: "2px solid #00a651",
+          color: "black",
+        }}
+      >
+        Đăng ký
+      </Link>
+    </div>
   );
 
   const toggleMessage = () => {
@@ -286,15 +305,16 @@
         onClick={isMobile ? toggleMessage : undefined}
       >
         <MessageOutlined
-          className={`${styles.message_icon} ${messageCount > 0 ? styles.message_active : ''}`}
-          style={{ fontSize: '20px' }}
+          className={`${styles.message_icon} ${
+            messageCount > 0 ? styles.message_active : ""
+          }`}
+          style={{ fontSize: "20px" }}
           spin={isMessageLoading}
         />
       </div>
     </Badge>
   );
 
-
   // WebSocket connection for real-time message updates
   useEffect(() => {
     if (!role || !userId) {
@@ -317,7 +337,7 @@
         setMessages((prev) => [...prev, msg]);
 
         // Increment message count for new unread message
-        setMessageCount(prevCount => prevCount + 1);
+        setMessageCount((prevCount) => prevCount + 1);
       });
     });
 
@@ -384,72 +404,81 @@
         employeeId: selectedConversation.employeeId.toString(),
       };
 
-      stompClient.send('/app/chat', headers, JSON.stringify(message));
-      setMessages((prev) => [...prev, { ...message, sentAt: new Date().toISOString() }]);
+      stompClient.send("/app/chat", headers, JSON.stringify(message));
+      setMessages((prev) => [
+        ...prev,
+        { ...message, sentAt: new Date().toISOString() },
+      ]);
     }
   };
   // Kết thúc xử lý Chat
 
   // Message popover component (for desktop)
   const messagePopover = isMobile ? (
-    user ? messageIcon : null
-  ) : (
     user ? (
-      <Popover
-        content={
-          <div className={styles.message_container}>
-            <div className={styles.message__title}>
-              <h2>Tin nhắn</h2>
-            </div>
-            <div className={styles.message__main}>
-              <div className={styles.message_sidebar}>
-                <div className={styles.message_user_list}>
-                  <ConversationList
-                    onSelect={(conversation) => {
-                      handleConversationSelect(conversation);
-                      // Reset message count when a conversation is selected
-                      setMessageCount(0);
-                    }}
-                    userId={userId}
-                    role={role}
-                  />
-                </div>
-              </div>
-              <div className={styles.message_outlet}>
-                <ChatWindow
-                  messages={messages}
-                  onSendMessage={sendMessage}
-                  conversation={selectedConversation}
-                  userId={userId}
-                />
-              </div>
-            </div>
-          </div>
-        }
-        trigger="click"
-        open={isPopupMessage}
-        onOpenChange={(visible) => {
-          setIsPopupMessage(visible);
-          if (visible) {
-            // Refresh message count when opening the popover
-            refreshMessages();
-          }
-        }}
-        placement="top"
-        overlayClassName={styles.message_popover}
-        getPopupContainer={() => document.querySelector(`.${styles.message_icon_wrapper}`)}
-      >
-        {messageIcon}
-      </Popover>
-    ) : null
-  );
+      messageIcon
+    ) : null
+  ) : user ? (
+    <Popover
+      content={
+        <div className={styles.message_container}>
+          <div className={styles.message__title}>
+            <h2>Tin nhắn</h2>
+          </div>
+          <div className={styles.message__main}>
+            <div className={styles.message_sidebar}>
+              <div className={styles.message_user_list}>
+                <ConversationList
+                  onSelect={(conversation) => {
+                    handleConversationSelect(conversation);
+                    // Reset message count when a conversation is selected
+                    setMessageCount(0);
+                  }}
+                  userId={userId}
+                  role={role}
+                />
+              </div>
+            </div>
+            <div className={styles.message_outlet}>
+              <ChatWindow
+                messages={messages}
+                onSendMessage={sendMessage}
+                conversation={selectedConversation}
+                userId={userId}
+              />
+            </div>
+          </div>
+        </div>
+      }
+      trigger="click"
+      open={isPopupMessage}
+      onOpenChange={(visible) => {
+        setIsPopupMessage(visible);
+        if (visible) {
+          // Refresh message count when opening the popover
+          refreshMessages();
+        }
+      }}
+      placement="top"
+      overlayClassName={styles.message_popover}
+      getPopupContainer={() =>
+        document.querySelector(`.${styles.message_icon_wrapper}`)
+      }
+    >
+      {messageIcon}
+    </Popover>
+  ) : null;
 
   return (
     <div className="Container">
       <nav className="navbar">
         <div className="logo">
           <Link to="/">
-            <img src={houseCleanLogo} alt="House Clean Logo" className="logo-img" />
+            <img
+              src={houseCleanLogo}
+              alt="House Clean Logo"
+              className="logo-img"
+            />
           </Link>
         </div>
 
@@ -459,12 +488,28 @@
           <span></span>
         </div>
 
-        <div className={`nav-content ${isMenuOpen ? 'active' : ''}`}>
+        <div className={`nav-content ${isMenuOpen ? "active" : ""}`}>
           <ul className="menu">
-            <li><Link to="/about" className="nav-link">Giới thiệu</Link></li>
-            <li><Link to="/activitylist" className="nav-link">Theo dõi dịch vụ</Link></li>
-            <li><Link to="/" className="nav-link">Tin tức</Link></li>
-            <li><Link to="/contact" className="nav-link">Liên hệ</Link></li>
+            <li>
+              <Link to="/about" className="nav-link">
+                Giới thiệu
+              </Link>
+            </li>
+            <li>
+              <Link to="/activitylist" className="nav-link">
+                Theo dõi dịch vụ
+              </Link>
+            </li>
+            <li>
+              <Link to="/" className="nav-link">
+                Tin tức
+              </Link>
+            </li>
+            <li>
+              <Link to="/contact" className="nav-link">
+                Liên hệ
+              </Link>
+            </li>
 
             {/* Only show these elements on mobile */}
             <li className="mobile-login">
@@ -488,7 +533,15 @@
           {!isMobile && (
             <>
               {user && (
-                <div className="desktop-notification" style={{ marginRight: '12px', display: 'flex', gap: 12, alignItems: 'center' }}>
+                <div
+                  className="desktop-notification"
+                  style={{
+                    marginRight: "12px",
+                    display: "flex",
+                    gap: 12,
+                    alignItems: "center",
+                  }}
+                >
                   {notificationPopover}
                   {messagePopover}
                 </div>
@@ -505,4 +558,4 @@
   );
 }
 
-export default Navbar;
\ No newline at end of file
+export default Navbar;
Index: ../FE/home-clean-fe/src/components/Home/Cleaner/Navbar.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Link, useNavigate } from \"react-router-dom\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { AuthContext } from \"../../../context/AuthContext\";\nimport houseCleanLogo from '../../../assets/HouseClean_logo.png';\nimport Notification from \"../../Notification/Notification\";\nimport styles from \"../../../assets/CSS/Notification/Notification.module.css\";\nimport { message, Button, Dropdown, Avatar, Badge, Popover } from \"antd\";\nimport { UserOutlined, LogoutOutlined, BellOutlined, MessageOutlined } from \"@ant-design/icons\";\nimport SockJS from \"sockjs-client\";\nimport { Stomp } from \"@stomp/stompjs\";\nimport ChatWindow from \"../../Chat/ChatWindow\";\nimport ConversationList from \"../../Chat/ConversationList\";\nimport { getUnreadNotificationCount } from \"../../../services/NotificationService\";\nimport { getUnreadMessageCount } from \"../../../services/ChatService\";\nimport { BASE_URL } from \"../../../utils/config\";\nimport { URL_WEB_SOCKET } from \"../../../utils/config\";\n\nfunction Navbar() {\n    const { cleaner, dispatch } = useContext(AuthContext);\n    const navigate = useNavigate();\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const [isPopupNotification, setIsPopupNotification] = useState(false);\n    const [notificationCount, setNotificationCount] = useState(0);\n    const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const [isPopupMessage, setIsPopupMessage] = useState(false);\n    const [messageCount, setMessageCount] = useState(0);\n    const [isMessageLoading, setIsMessageLoading] = useState(false);\n\n    //Them phan khai báo Chat\n    const roleStr = localStorage.getItem(\"role\");\n    const role = roleStr ? roleStr.toLowerCase() : null;\n    const userId = localStorage.getItem(\"cleanerId\")\n\n    const [stompClient, setStompClient] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [selectedConversation, setSelectedConversation] = useState(null);\n    //Kết thúc phần khai báo cho Chat\n\n    // Track screen size changes\n    useEffect(() => {\n        const handleResize = () => {\n            setIsMobile(window.innerWidth < 768);\n        };\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    // Fetch notification count when component mounts and when user changes\n    useEffect(() => {\n        const fetchNotificationCount = async () => {\n            if (cleaner) {\n                try {\n                    setIsLoading(true);\n                    const count = await getUnreadNotificationCount();\n                    setNotificationCount(count);\n                } catch (error) {\n                    console.error(\"Failed to fetch notification count:\", error);\n                    message.error(\"Không thể tải số lượng thông báo. Vui lòng thử lại sau!\");\n                } finally {\n                    setIsLoading(false);\n                }\n            } else {\n                setNotificationCount(0);\n            }\n        };\n\n        fetchNotificationCount();\n\n        // Set up polling to refresh notification count every minute\n        const intervalId = setInterval(fetchNotificationCount, 60000);\n\n        return () => clearInterval(intervalId);\n    }, [cleaner]);\n\n    // Fetch message count when component mounts and when user changes\n    useEffect(() => {\n        const fetchMessageCount = async () => {\n            if (cleaner) {\n                try {\n                    setIsMessageLoading(true);\n                    const count = await getUnreadMessageCount();\n                    setMessageCount(count);\n                } catch (error) {\n                    console.error(\"Failed to fetch message count:\", error);\n                } finally {\n                    setIsMessageLoading(false);\n                }\n            } else {\n                setMessageCount(0);\n            }\n        };\n\n        fetchMessageCount();\n\n        // Set up polling to refresh message count every minute\n        const intervalId = setInterval(fetchMessageCount, 60000);\n\n        return () => clearInterval(intervalId);\n    }, [cleaner]);\n\n\n    // Close the menu when notification popup is opened on mobile\n    useEffect(() => {\n        if (isPopupNotification && isMobile && isMenuOpen) {\n            setIsMenuOpen(false);\n        }\n    }, [isPopupNotification, isMobile, isMenuOpen]);\n\n    const toggleMenu = () => {\n        // Close notification popup when opening menu on mobile\n        if (isMobile && isPopupNotification) {\n            setIsPopupNotification(false);\n        }\n        setIsMenuOpen(!isMenuOpen);\n    };\n\n    const handleLogout = () => {\n        dispatch({ type: \"LOGOUT\" });\n        message.success(\"Đăng xuất thành công!\");\n        navigate(\"/homeclean\");\n    };\n\n    const toggleNotification = () => {\n        setIsPopupNotification(!isPopupNotification);\n        // Close menu when toggling notification on mobile\n        if (isMobile && isMenuOpen) {\n            setIsMenuOpen(false);\n        }\n    };\n\n    // Refresh notifications manually\n    const refreshNotifications = async () => {\n        if (cleaner) {\n            try {\n                setIsLoading(true);\n                const count = await getUnreadNotificationCount();\n                setNotificationCount(count);\n            } catch (error) {\n                console.error(\"Failed to refresh notifications:\", error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n    };\n\n    // Lấy tên user từ localStorage nếu chưa có trong context\n    const getCleanerName = () => {\n        if (cleaner && cleaner.name) {\n            return cleaner.name;\n        }\n        const storedName = localStorage.getItem(\"name\");\n        return storedName ? storedName : '';\n    };\n\n    // Dropdown menu cho cleaner\n    const cleanerMenu = {\n        items: [\n            {\n                key: '1',\n                label: <Link to=\"/infomationcleaner\">Thông tin tài khoản</Link>,\n                icon: <UserOutlined />\n            },\n            {\n                key: '2',\n                label: 'Đăng xuất',\n                icon: <LogoutOutlined />,\n                onClick: handleLogout\n            }\n        ]\n    };\n\n    // Notification icon với animation khi có thông báo mới\n    const notificationIcon = (\n        <Badge\n            count={notificationCount}\n            size=\"small\"\n            offset={[-2, 6]}\n            className={styles.notification_badge}\n        >\n            <div\n                className={styles.notification_icon_wrapper}\n                onClick={isMobile ? toggleNotification : undefined}\n            >\n                <BellOutlined\n                    className={`${styles.notification_icon} ${notificationCount > 0 ? styles.notification_active : ''}`}\n                    style={{ fontSize: '20px' }}\n                    spin={isLoading}\n                />\n            </div>\n        </Badge>\n    );\n\n    // Mobile notification content\n    const mobileNotificationContent = isPopupNotification && isMobile && cleaner ? (\n        <div className={styles.mobile_notification_overlay} onClick={() => setIsPopupNotification(false)}>\n            <div\n                className={styles.mobile_notification_container}\n                onClick={(e) => e.stopPropagation()}\n            >\n                <Notification\n                    onClose={() => setIsPopupNotification(false)}\n                    onViewAll={() => {\n                        setIsPopupNotification(false);\n                        // Navigate to full notification page if you have one\n                        // navigate(\"/notifications\");\n                    }}\n                />\n            </div>\n        </div>\n    ) : null;\n\n    // Notification popover component (for desktop)\n    const notificationPopover = isMobile ? (\n        cleaner ? notificationIcon : null\n    ) : (\n        cleaner ? (\n            <Popover\n                content={\n                    <Notification\n                        onClose={() => setIsPopupNotification(false)}\n                        onViewAll={() => {\n                            setIsPopupNotification(false);\n                            // Navigate to full notification page if you have one\n                            // navigate(\"/notifications\");\n                        }}\n                    />\n                }\n                trigger=\"click\"\n                open={isPopupNotification}\n                onOpenChange={(visible) => {\n                    setIsPopupNotification(visible);\n                    if (visible) {\n                        // Refresh notification count when opening the popover\n                        refreshNotifications();\n                    }\n                }}\n                placement=\"bottomRight\"\n                overlayClassName={styles.notification_popover}\n            >\n                {notificationIcon}\n            </Popover>\n        ) : null\n    );\n\n    // User profile component\n    const cleanerProfile = (\n        <Dropdown menu={cleanerMenu} placement=\"bottomRight\">\n            <div style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\n                <Avatar icon={<UserOutlined />} style={{ marginRight: '8px' }} />\n                <span>{getCleanerName()}</span>\n            </div>\n        </Dropdown>\n    );\n    // Login and Register buttons\n    const authButtons = (\n        <div style={{ display: 'flex', gap: '10px' }}>\n            <Link to=\"/login\" className=\"login-btn\" style={{ width: '110px' }}>Đăng nhập</Link>\n            <Link to=\"/register\" className=\"login-btn\" style={{\n                width: '110px',\n                textAlign: 'center',\n                background: 'white',\n                border: '2px solid #00a651',\n                color: 'black'\n            }}>Đăng ký</Link>\n        </div >\n    );\n\n    const toggleMessage = () => {\n        setIsPopupMessage(!isPopupMessage);\n        // Close menu when toggling message on mobile\n        if (isMobile && isMenuOpen) {\n            setIsMenuOpen(false);\n        }\n    };\n\n    // Message icon with loading and count\n    const messageIcon = (\n        <Badge\n            count={messageCount}\n            size=\"small\"\n            offset={[-2, 6]}\n            className={styles.message_badge}\n        >\n            <div\n                className={styles.message_icon_wrapper}\n                onClick={isMobile ? toggleMessage : undefined}\n            >\n                <MessageOutlined\n                    className={`${styles.message_icon} ${messageCount > 0 ? styles.message_active : ''}`}\n                    style={{ fontSize: '20px' }}\n                    spin={isMessageLoading}\n                />\n            </div>\n        </Badge>\n    );\n\n\n    // WebSocket connection for real-time message updates\n    useEffect(() => {\n        if (!role || !userId) {\n            console.error(\"Missing role or userId in URL!\");\n            return;\n        }\n\n        const socket = new SockJS(`${URL_WEB_SOCKET}/websocket-chat`);\n        const client = Stomp.over(socket);\n\n        client.connect({}, () => {\n            console.log(`User ${userId} (${role}) connected to WebSocket`);\n            setStompClient(client);\n\n            const queueName = `/queue/messages-${userId}`;\n            client.subscribe(queueName, (message) => {\n                const msg = JSON.parse(message.body);\n\n                // Update messages\n                setMessages((prev) => [...prev, msg]);\n\n                // Increment message count for new unread message\n                setMessageCount(prevCount => prevCount + 1);\n            });\n        });\n\n        return () => {\n            if (client && client.connected) {\n                client.disconnect();\n            }\n        };\n    }, [role, userId]);\n\n    // Refresh messages manually\n    const refreshMessages = async () => {\n        if (cleaner) {\n            try {\n                setIsMessageLoading(true);\n                const count = await getUnreadMessageCount();\n                setMessageCount(count);\n            } catch (error) {\n                console.error(\"Failed to refresh message count:\", error);\n            } finally {\n                setIsMessageLoading(false);\n            }\n        }\n    };\n\n    const handleConversationSelect = (conversation) => {\n        console.log(\"\uD83D\uDD0D Chọn cuộc trò chuyện:\", conversation);\n\n        if (!conversation || !conversation.id) {\n            console.error(\"Lỗi: Cuộc trò chuyện không hợp lệ!\", conversation);\n            return;\n        }\n\n        setSelectedConversation(conversation);\n\n        const apiUrl = `${BASE_URL}/messages/${conversation.id}`;\n\n        fetch(apiUrl)\n            .then((response) => response.json())\n            .then((data) => {\n                if (data && Array.isArray(data.messages)) {\n                    setMessages(data.messages);\n                } else {\n                    console.error(\"API không trả về mảng tin nhắn hợp lệ:\", data);\n                    setMessages([]);\n                }\n            })\n            .catch((error) => {\n                console.error(\"Lỗi khi tải tin nhắn cũ:\", error);\n                setMessages([]);\n            });\n    };\n\n    const sendMessage = (messageContent) => {\n        if (stompClient && selectedConversation) {\n            const message = {\n                content: messageContent,\n                senderId: userId,\n                conversationId: selectedConversation.id,\n            };\n\n            const headers = {\n                customerId: selectedConversation.customerId.toString(),\n                employeeId: selectedConversation.employeeId.toString(),\n            };\n\n            stompClient.send('/app/chat', headers, JSON.stringify(message));\n            setMessages((prev) => [...prev, { ...message, sentAt: new Date().toISOString() }]);\n        }\n    };\n\n\n    // Message popover component (for desktop)\n    const messagePopover = isMobile ? (\n        cleaner ? messageIcon : null\n    ) : (\n        cleaner ? (\n            <Popover\n                content={\n                    <div className={styles.message_container}>\n                        <div className={styles.message__title}>\n                            <h2>Tin nhắn</h2>\n                        </div>\n                        <div className={styles.message__main}>\n                            <div className={styles.message_sidebar}>\n                                <div className={styles.message_user_list}>\n                                    <ConversationList\n                                        onSelect={(conversation) => {\n                                            handleConversationSelect(conversation);\n                                            // Reset message count when a conversation is selected\n                                            setMessageCount(0);\n                                        }}\n                                        userId={userId}\n                                        role={role}\n                                    />\n                                </div>\n                            </div>\n                            <div className={styles.message_outlet}>\n                                <ChatWindow\n                                    messages={messages}\n                                    onSendMessage={sendMessage}\n                                    conversation={selectedConversation}\n                                    userId={userId}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                }\n                trigger=\"click\"\n                open={isPopupMessage}\n                onOpenChange={(visible) => {\n                    setIsPopupMessage(visible);\n                    if (visible) {\n                        // Refresh message count when opening the popover\n                        refreshMessages();\n                    }\n                }}\n                placement=\"top\"\n                overlayClassName={styles.message_popover}\n                getPopupContainer={() => document.querySelector(`.${styles.message_icon_wrapper}`)}\n            >\n                {messageIcon}\n            </Popover>\n        ) : null\n    );\n\n    return (\n        <div className=\"Container\">\n            <nav className=\"navbar\">\n                <div className=\"logo\">\n                    <Link to=\"/homeclean\">\n                        <img src={houseCleanLogo} alt=\"House Clean Logo\" className=\"logo-img\" />\n                    </Link>\n                </div>\n\n                <div className=\"hamburger\" onClick={toggleMenu}>\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                </div>\n\n                <div className={`nav-content ${isMenuOpen ? 'active' : ''}`}>\n                    <ul className=\"menu\">\n                        {/* <li><Link to=\"/homeclean\" className=\"nav-link\"></Link></li> */}\n                        <li><Link to=\"/activityjob\" className=\"nav-link\">Công việc </Link></li>\n                        <li><Link to=\"/homeclean\" className=\"nav-link\">Tin tức</Link></li>\n                        <li><Link to=\"/homeclean\" className=\"nav-link\">Bảng giá dịch vụ</Link></li>\n\n                        {/* Only show these elements on mobile */}\n                        <li className=\"mobile-login\">\n                            {isMobile && (\n                                <>\n                                    {cleaner && (\n                                        <li className=\"mobile-notification\">\n                                            {notificationPopover}\n                                            {messagePopover}\n                                        </li>\n                                    )}\n                                    {cleaner ? cleanerProfile : authButtons}\n                                </>\n                            )}\n                        </li>\n                    </ul>\n                </div>\n\n                {/* Only show these elements on desktop */}\n                <div className=\"desktop-login\">\n                    {!isMobile && (\n                        <>\n                            {cleaner && (\n                                <div className=\"desktop-notification\" style={{ marginRight: '12px', display: 'flex', gap: 12, alignItems: 'center' }}>\n                                    {notificationPopover}\n                                    {messagePopover}\n                                </div>\n                            )}\n                            {cleaner ? cleanerProfile : authButtons}\n                        </>\n                    )}\n                </div>\n            </nav>\n\n            {/* Render mobile notification panel outside navbar structure */}\n            {mobileNotificationContent}\n        </div>\n    );\n}\n\nexport default Navbar;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/Home/Cleaner/Navbar.jsx b/../FE/home-clean-fe/src/components/Home/Cleaner/Navbar.jsx
--- a/../FE/home-clean-fe/src/components/Home/Cleaner/Navbar.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/Home/Cleaner/Navbar.jsx	(date 1743672482070)
@@ -1,11 +1,16 @@
 import { Link, useNavigate } from "react-router-dom";
 import { useState, useContext, useEffect } from "react";
 import { AuthContext } from "../../../context/AuthContext";
-import houseCleanLogo from '../../../assets/HouseClean_logo.png';
+import houseCleanLogo from "../../../assets/HouseClean_logo.png";
 import Notification from "../../Notification/Notification";
 import styles from "../../../assets/CSS/Notification/Notification.module.css";
 import { message, Button, Dropdown, Avatar, Badge, Popover } from "antd";
-import { UserOutlined, LogoutOutlined, BellOutlined, MessageOutlined } from "@ant-design/icons";
+import {
+  UserOutlined,
+  LogoutOutlined,
+  BellOutlined,
+  MessageOutlined,
+} from "@ant-design/icons";
 import SockJS from "sockjs-client";
 import { Stomp } from "@stomp/stompjs";
 import ChatWindow from "../../Chat/ChatWindow";
@@ -16,496 +21,541 @@
 import { URL_WEB_SOCKET } from "../../../utils/config";
 
 function Navbar() {
-    const { cleaner, dispatch } = useContext(AuthContext);
-    const navigate = useNavigate();
-    const [isMenuOpen, setIsMenuOpen] = useState(false);
-    const [isPopupNotification, setIsPopupNotification] = useState(false);
-    const [notificationCount, setNotificationCount] = useState(0);
-    const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
-    const [isLoading, setIsLoading] = useState(false);
+  const { cleaner, dispatch } = useContext(AuthContext);
+  const navigate = useNavigate();
+  const [isMenuOpen, setIsMenuOpen] = useState(false);
+  const [isPopupNotification, setIsPopupNotification] = useState(false);
+  const [notificationCount, setNotificationCount] = useState(0);
+  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
+  const [isLoading, setIsLoading] = useState(false);
 
-    const [isPopupMessage, setIsPopupMessage] = useState(false);
-    const [messageCount, setMessageCount] = useState(0);
-    const [isMessageLoading, setIsMessageLoading] = useState(false);
+  const [isPopupMessage, setIsPopupMessage] = useState(false);
+  const [messageCount, setMessageCount] = useState(0);
+  const [isMessageLoading, setIsMessageLoading] = useState(false);
 
-    //Them phan khai báo Chat
-    const roleStr = localStorage.getItem("role");
-    const role = roleStr ? roleStr.toLowerCase() : null;
-    const userId = localStorage.getItem("cleanerId")
+  //Them phan khai báo Chat
+  const roleStr = localStorage.getItem("role");
+  const role = roleStr ? roleStr.toLowerCase() : null;
+  const userId = localStorage.getItem("cleanerId");
 
-    const [stompClient, setStompClient] = useState(null);
-    const [messages, setMessages] = useState([]);
-    const [selectedConversation, setSelectedConversation] = useState(null);
-    //Kết thúc phần khai báo cho Chat
+  const [stompClient, setStompClient] = useState(null);
+  const [messages, setMessages] = useState([]);
+  const [selectedConversation, setSelectedConversation] = useState(null);
+  //Kết thúc phần khai báo cho Chat
 
-    // Track screen size changes
-    useEffect(() => {
-        const handleResize = () => {
-            setIsMobile(window.innerWidth < 768);
-        };
+  // Track screen size changes
+  useEffect(() => {
+    const handleResize = () => {
+      setIsMobile(window.innerWidth < 768);
+    };
 
-        window.addEventListener('resize', handleResize);
-        return () => window.removeEventListener('resize', handleResize);
-    }, []);
+    window.addEventListener("resize", handleResize);
+    return () => window.removeEventListener("resize", handleResize);
+  }, []);
 
-    // Fetch notification count when component mounts and when user changes
-    useEffect(() => {
-        const fetchNotificationCount = async () => {
-            if (cleaner) {
-                try {
-                    setIsLoading(true);
-                    const count = await getUnreadNotificationCount();
-                    setNotificationCount(count);
-                } catch (error) {
-                    console.error("Failed to fetch notification count:", error);
-                    message.error("Không thể tải số lượng thông báo. Vui lòng thử lại sau!");
-                } finally {
-                    setIsLoading(false);
-                }
-            } else {
-                setNotificationCount(0);
-            }
-        };
+  // Fetch notification count when component mounts and when user changes
+  useEffect(() => {
+    const fetchNotificationCount = async () => {
+      if (cleaner) {
+        try {
+          setIsLoading(true);
+          const count = await getUnreadNotificationCount();
+          setNotificationCount(count);
+        } catch (error) {
+          console.error("Failed to fetch notification count:", error);
+          message.error(
+            "Không thể tải số lượng thông báo. Vui lòng thử lại sau!"
+          );
+        } finally {
+          setIsLoading(false);
+        }
+      } else {
+        setNotificationCount(0);
+      }
+    };
 
-        fetchNotificationCount();
+    fetchNotificationCount();
 
-        // Set up polling to refresh notification count every minute
-        const intervalId = setInterval(fetchNotificationCount, 60000);
+    // Set up polling to refresh notification count every minute
+    const intervalId = setInterval(fetchNotificationCount, 60000);
 
-        return () => clearInterval(intervalId);
-    }, [cleaner]);
+    return () => clearInterval(intervalId);
+  }, [cleaner]);
 
-    // Fetch message count when component mounts and when user changes
-    useEffect(() => {
-        const fetchMessageCount = async () => {
-            if (cleaner) {
-                try {
-                    setIsMessageLoading(true);
-                    const count = await getUnreadMessageCount();
-                    setMessageCount(count);
-                } catch (error) {
-                    console.error("Failed to fetch message count:", error);
-                } finally {
-                    setIsMessageLoading(false);
-                }
-            } else {
-                setMessageCount(0);
-            }
-        };
+  // Fetch message count when component mounts and when user changes
+  useEffect(() => {
+    const fetchMessageCount = async () => {
+      if (cleaner) {
+        try {
+          setIsMessageLoading(true);
+          const count = await getUnreadMessageCount();
+          setMessageCount(count);
+        } catch (error) {
+          console.error("Failed to fetch message count:", error);
+        } finally {
+          setIsMessageLoading(false);
+        }
+      } else {
+        setMessageCount(0);
+      }
+    };
 
-        fetchMessageCount();
+    fetchMessageCount();
 
-        // Set up polling to refresh message count every minute
-        const intervalId = setInterval(fetchMessageCount, 60000);
+    // Set up polling to refresh message count every minute
+    const intervalId = setInterval(fetchMessageCount, 60000);
 
-        return () => clearInterval(intervalId);
-    }, [cleaner]);
+    return () => clearInterval(intervalId);
+  }, [cleaner]);
 
-
-    // Close the menu when notification popup is opened on mobile
-    useEffect(() => {
-        if (isPopupNotification && isMobile && isMenuOpen) {
-            setIsMenuOpen(false);
-        }
-    }, [isPopupNotification, isMobile, isMenuOpen]);
+  // Close the menu when notification popup is opened on mobile
+  useEffect(() => {
+    if (isPopupNotification && isMobile && isMenuOpen) {
+      setIsMenuOpen(false);
+    }
+  }, [isPopupNotification, isMobile, isMenuOpen]);
 
-    const toggleMenu = () => {
-        // Close notification popup when opening menu on mobile
-        if (isMobile && isPopupNotification) {
-            setIsPopupNotification(false);
-        }
-        setIsMenuOpen(!isMenuOpen);
-    };
+  const toggleMenu = () => {
+    // Close notification popup when opening menu on mobile
+    if (isMobile && isPopupNotification) {
+      setIsPopupNotification(false);
+    }
+    setIsMenuOpen(!isMenuOpen);
+  };
 
-    const handleLogout = () => {
-        dispatch({ type: "LOGOUT" });
-        message.success("Đăng xuất thành công!");
-        navigate("/homeclean");
-    };
+  const handleLogout = () => {
+    dispatch({ type: "LOGOUT" });
+    message.success("Đăng xuất thành công!");
+    navigate("/homeclean");
+  };
 
-    const toggleNotification = () => {
-        setIsPopupNotification(!isPopupNotification);
-        // Close menu when toggling notification on mobile
-        if (isMobile && isMenuOpen) {
-            setIsMenuOpen(false);
-        }
-    };
+  const toggleNotification = () => {
+    setIsPopupNotification(!isPopupNotification);
+    // Close menu when toggling notification on mobile
+    if (isMobile && isMenuOpen) {
+      setIsMenuOpen(false);
+    }
+  };
 
-    // Refresh notifications manually
-    const refreshNotifications = async () => {
-        if (cleaner) {
-            try {
-                setIsLoading(true);
-                const count = await getUnreadNotificationCount();
-                setNotificationCount(count);
-            } catch (error) {
-                console.error("Failed to refresh notifications:", error);
-            } finally {
-                setIsLoading(false);
-            }
-        }
-    };
+  // Refresh notifications manually
+  const refreshNotifications = async () => {
+    if (cleaner) {
+      try {
+        setIsLoading(true);
+        const count = await getUnreadNotificationCount();
+        setNotificationCount(count);
+      } catch (error) {
+        console.error("Failed to refresh notifications:", error);
+      } finally {
+        setIsLoading(false);
+      }
+    }
+  };
 
-    // Lấy tên user từ localStorage nếu chưa có trong context
-    const getCleanerName = () => {
-        if (cleaner && cleaner.name) {
-            return cleaner.name;
-        }
-        const storedName = localStorage.getItem("name");
-        return storedName ? storedName : '';
-    };
+  // Lấy tên user từ localStorage nếu chưa có trong context
+  const getCleanerName = () => {
+    if (cleaner && cleaner.cleanerName) {
+      return cleaner.cleanerName;
+    }
+    // Fallback to localStorage for compatibility
+    const storedName = localStorage.getItem("name");
+    return storedName ? storedName : "";
+  };
 
-    // Dropdown menu cho cleaner
-    const cleanerMenu = {
-        items: [
-            {
-                key: '1',
-                label: <Link to="/infomationcleaner">Thông tin tài khoản</Link>,
-                icon: <UserOutlined />
-            },
-            {
-                key: '2',
-                label: 'Đăng xuất',
-                icon: <LogoutOutlined />,
-                onClick: handleLogout
-            }
-        ]
-    };
+  // Dropdown menu cho cleaner
+  const cleanerMenu = {
+    items: [
+      {
+        key: "1",
+        label: <Link to="/infomationcleaner">Thông tin tài khoản</Link>,
+        icon: <UserOutlined />,
+      },
+      {
+        key: "2",
+        label: "Đăng xuất",
+        icon: <LogoutOutlined />,
+        onClick: handleLogout,
+      },
+    ],
+  };
 
-    // Notification icon với animation khi có thông báo mới
-    const notificationIcon = (
-        <Badge
-            count={notificationCount}
-            size="small"
-            offset={[-2, 6]}
-            className={styles.notification_badge}
-        >
-            <div
-                className={styles.notification_icon_wrapper}
-                onClick={isMobile ? toggleNotification : undefined}
-            >
-                <BellOutlined
-                    className={`${styles.notification_icon} ${notificationCount > 0 ? styles.notification_active : ''}`}
-                    style={{ fontSize: '20px' }}
-                    spin={isLoading}
-                />
-            </div>
-        </Badge>
-    );
+  // Notification icon với animation khi có thông báo mới
+  const notificationIcon = (
+    <Badge
+      count={notificationCount}
+      size="small"
+      offset={[-2, 6]}
+      className={styles.notification_badge}
+    >
+      <div
+        className={styles.notification_icon_wrapper}
+        onClick={isMobile ? toggleNotification : undefined}
+      >
+        <BellOutlined
+          className={`${styles.notification_icon} ${
+            notificationCount > 0 ? styles.notification_active : ""
+          }`}
+          style={{ fontSize: "20px" }}
+          spin={isLoading}
+        />
+      </div>
+    </Badge>
+  );
 
-    // Mobile notification content
-    const mobileNotificationContent = isPopupNotification && isMobile && cleaner ? (
-        <div className={styles.mobile_notification_overlay} onClick={() => setIsPopupNotification(false)}>
-            <div
-                className={styles.mobile_notification_container}
-                onClick={(e) => e.stopPropagation()}
-            >
-                <Notification
-                    onClose={() => setIsPopupNotification(false)}
-                    onViewAll={() => {
-                        setIsPopupNotification(false);
-                        // Navigate to full notification page if you have one
-                        // navigate("/notifications");
-                    }}
-                />
-            </div>
-        </div>
+  // Mobile notification content
+  const mobileNotificationContent =
+    isPopupNotification && isMobile && cleaner ? (
+      <div
+        className={styles.mobile_notification_overlay}
+        onClick={() => setIsPopupNotification(false)}
+      >
+        <div
+          className={styles.mobile_notification_container}
+          onClick={(e) => e.stopPropagation()}
+        >
+          <Notification
+            onClose={() => setIsPopupNotification(false)}
+            onViewAll={() => {
+              setIsPopupNotification(false);
+              // Navigate to full notification page if you have one
+              // navigate("/notifications");
+            }}
+          />
+        </div>
+      </div>
     ) : null;
 
-    // Notification popover component (for desktop)
-    const notificationPopover = isMobile ? (
-        cleaner ? notificationIcon : null
-    ) : (
-        cleaner ? (
-            <Popover
-                content={
-                    <Notification
-                        onClose={() => setIsPopupNotification(false)}
-                        onViewAll={() => {
-                            setIsPopupNotification(false);
-                            // Navigate to full notification page if you have one
-                            // navigate("/notifications");
-                        }}
-                    />
-                }
-                trigger="click"
-                open={isPopupNotification}
-                onOpenChange={(visible) => {
-                    setIsPopupNotification(visible);
-                    if (visible) {
-                        // Refresh notification count when opening the popover
-                        refreshNotifications();
-                    }
-                }}
-                placement="bottomRight"
-                overlayClassName={styles.notification_popover}
-            >
-                {notificationIcon}
-            </Popover>
-        ) : null
-    );
+  // Notification popover component (for desktop)
+  const notificationPopover = isMobile ? (
+    cleaner ? (
+      notificationIcon
+    ) : null
+  ) : cleaner ? (
+    <Popover
+      content={
+        <Notification
+          onClose={() => setIsPopupNotification(false)}
+          onViewAll={() => {
+            setIsPopupNotification(false);
+            // Navigate to full notification page if you have one
+            // navigate("/notifications");
+          }}
+        />
+      }
+      trigger="click"
+      open={isPopupNotification}
+      onOpenChange={(visible) => {
+        setIsPopupNotification(visible);
+        if (visible) {
+          // Refresh notification count when opening the popover
+          refreshNotifications();
+        }
+      }}
+      placement="bottomRight"
+      overlayClassName={styles.notification_popover}
+    >
+      {notificationIcon}
+    </Popover>
+  ) : null;
 
-    // User profile component
-    const cleanerProfile = (
-        <Dropdown menu={cleanerMenu} placement="bottomRight">
-            <div style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>
-                <Avatar icon={<UserOutlined />} style={{ marginRight: '8px' }} />
-                <span>{getCleanerName()}</span>
-            </div>
-        </Dropdown>
-    );
-    // Login and Register buttons
-    const authButtons = (
-        <div style={{ display: 'flex', gap: '10px' }}>
-            <Link to="/login" className="login-btn" style={{ width: '110px' }}>Đăng nhập</Link>
-            <Link to="/register" className="login-btn" style={{
-                width: '110px',
-                textAlign: 'center',
-                background: 'white',
-                border: '2px solid #00a651',
-                color: 'black'
-            }}>Đăng ký</Link>
-        </div >
-    );
+  // User profile component
+  const cleanerProfile = (
+    <Dropdown menu={cleanerMenu} placement="bottomRight">
+      <div style={{ display: "flex", alignItems: "center", cursor: "pointer" }}>
+        <Avatar icon={<UserOutlined />} style={{ marginRight: "8px" }} />
+        <span>{getCleanerName()}</span>
+      </div>
+    </Dropdown>
+  );
+  // Login and Register buttons
+  const authButtons = (
+    <div style={{ display: "flex", gap: "10px" }}>
+      <Link to="/login" className="login-btn" style={{ width: "110px" }}>
+        Đăng nhập
+      </Link>
+      <Link
+        to="/register"
+        className="login-btn"
+        style={{
+          width: "110px",
+          textAlign: "center",
+          background: "white",
+          border: "2px solid #00a651",
+          color: "black",
+        }}
+      >
+        Đăng ký
+      </Link>
+    </div>
+  );
 
-    const toggleMessage = () => {
-        setIsPopupMessage(!isPopupMessage);
-        // Close menu when toggling message on mobile
-        if (isMobile && isMenuOpen) {
-            setIsMenuOpen(false);
-        }
-    };
+  const toggleMessage = () => {
+    setIsPopupMessage(!isPopupMessage);
+    // Close menu when toggling message on mobile
+    if (isMobile && isMenuOpen) {
+      setIsMenuOpen(false);
+    }
+  };
 
-    // Message icon with loading and count
-    const messageIcon = (
-        <Badge
-            count={messageCount}
-            size="small"
-            offset={[-2, 6]}
-            className={styles.message_badge}
-        >
-            <div
-                className={styles.message_icon_wrapper}
-                onClick={isMobile ? toggleMessage : undefined}
-            >
-                <MessageOutlined
-                    className={`${styles.message_icon} ${messageCount > 0 ? styles.message_active : ''}`}
-                    style={{ fontSize: '20px' }}
-                    spin={isMessageLoading}
-                />
-            </div>
-        </Badge>
-    );
+  // Message icon with loading and count
+  const messageIcon = (
+    <Badge
+      count={messageCount}
+      size="small"
+      offset={[-2, 6]}
+      className={styles.message_badge}
+    >
+      <div
+        className={styles.message_icon_wrapper}
+        onClick={isMobile ? toggleMessage : undefined}
+      >
+        <MessageOutlined
+          className={`${styles.message_icon} ${
+            messageCount > 0 ? styles.message_active : ""
+          }`}
+          style={{ fontSize: "20px" }}
+          spin={isMessageLoading}
+        />
+      </div>
+    </Badge>
+  );
 
-
-    // WebSocket connection for real-time message updates
-    useEffect(() => {
-        if (!role || !userId) {
-            console.error("Missing role or userId in URL!");
-            return;
-        }
+  // WebSocket connection for real-time message updates
+  useEffect(() => {
+    if (!role || !userId) {
+      console.error("Missing role or userId in URL!");
+      return;
+    }
 
-        const socket = new SockJS(`${URL_WEB_SOCKET}/websocket-chat`);
-        const client = Stomp.over(socket);
+    const socket = new SockJS(`${URL_WEB_SOCKET}/websocket-chat`);
+    const client = Stomp.over(socket);
 
-        client.connect({}, () => {
-            console.log(`User ${userId} (${role}) connected to WebSocket`);
-            setStompClient(client);
+    client.connect({}, () => {
+      console.log(`User ${userId} (${role}) connected to WebSocket`);
+      setStompClient(client);
 
-            const queueName = `/queue/messages-${userId}`;
-            client.subscribe(queueName, (message) => {
-                const msg = JSON.parse(message.body);
+      const queueName = `/queue/messages-${userId}`;
+      client.subscribe(queueName, (message) => {
+        const msg = JSON.parse(message.body);
 
-                // Update messages
-                setMessages((prev) => [...prev, msg]);
+        // Update messages
+        setMessages((prev) => [...prev, msg]);
 
-                // Increment message count for new unread message
-                setMessageCount(prevCount => prevCount + 1);
-            });
-        });
+        // Increment message count for new unread message
+        setMessageCount((prevCount) => prevCount + 1);
+      });
+    });
 
-        return () => {
-            if (client && client.connected) {
-                client.disconnect();
-            }
-        };
-    }, [role, userId]);
+    return () => {
+      if (client && client.connected) {
+        client.disconnect();
+      }
+    };
+  }, [role, userId]);
 
-    // Refresh messages manually
-    const refreshMessages = async () => {
-        if (cleaner) {
-            try {
-                setIsMessageLoading(true);
-                const count = await getUnreadMessageCount();
-                setMessageCount(count);
-            } catch (error) {
-                console.error("Failed to refresh message count:", error);
-            } finally {
-                setIsMessageLoading(false);
-            }
-        }
-    };
+  // Refresh messages manually
+  const refreshMessages = async () => {
+    if (cleaner) {
+      try {
+        setIsMessageLoading(true);
+        const count = await getUnreadMessageCount();
+        setMessageCount(count);
+      } catch (error) {
+        console.error("Failed to refresh message count:", error);
+      } finally {
+        setIsMessageLoading(false);
+      }
+    }
+  };
 
-    const handleConversationSelect = (conversation) => {
-        console.log("🔍 Chọn cuộc trò chuyện:", conversation);
+  const handleConversationSelect = (conversation) => {
+    console.log("🔍 Chọn cuộc trò chuyện:", conversation);
 
-        if (!conversation || !conversation.id) {
-            console.error("Lỗi: Cuộc trò chuyện không hợp lệ!", conversation);
-            return;
-        }
+    if (!conversation || !conversation.id) {
+      console.error("Lỗi: Cuộc trò chuyện không hợp lệ!", conversation);
+      return;
+    }
 
-        setSelectedConversation(conversation);
+    setSelectedConversation(conversation);
 
-        const apiUrl = `${BASE_URL}/messages/${conversation.id}`;
+    const apiUrl = `${BASE_URL}/messages/${conversation.id}`;
 
-        fetch(apiUrl)
-            .then((response) => response.json())
-            .then((data) => {
-                if (data && Array.isArray(data.messages)) {
-                    setMessages(data.messages);
-                } else {
-                    console.error("API không trả về mảng tin nhắn hợp lệ:", data);
-                    setMessages([]);
-                }
-            })
-            .catch((error) => {
-                console.error("Lỗi khi tải tin nhắn cũ:", error);
-                setMessages([]);
-            });
-    };
+    fetch(apiUrl)
+      .then((response) => response.json())
+      .then((data) => {
+        if (data && Array.isArray(data.messages)) {
+          setMessages(data.messages);
+        } else {
+          console.error("API không trả về mảng tin nhắn hợp lệ:", data);
+          setMessages([]);
+        }
+      })
+      .catch((error) => {
+        console.error("Lỗi khi tải tin nhắn cũ:", error);
+        setMessages([]);
+      });
+  };
 
-    const sendMessage = (messageContent) => {
-        if (stompClient && selectedConversation) {
-            const message = {
-                content: messageContent,
-                senderId: userId,
-                conversationId: selectedConversation.id,
-            };
+  const sendMessage = (messageContent) => {
+    if (stompClient && selectedConversation) {
+      const message = {
+        content: messageContent,
+        senderId: userId,
+        conversationId: selectedConversation.id,
+      };
 
-            const headers = {
-                customerId: selectedConversation.customerId.toString(),
-                employeeId: selectedConversation.employeeId.toString(),
-            };
+      const headers = {
+        customerId: selectedConversation.customerId.toString(),
+        employeeId: selectedConversation.employeeId.toString(),
+      };
 
-            stompClient.send('/app/chat', headers, JSON.stringify(message));
-            setMessages((prev) => [...prev, { ...message, sentAt: new Date().toISOString() }]);
-        }
-    };
-
+      stompClient.send("/app/chat", headers, JSON.stringify(message));
+      setMessages((prev) => [
+        ...prev,
+        { ...message, sentAt: new Date().toISOString() },
+      ]);
+    }
+  };
 
-    // Message popover component (for desktop)
-    const messagePopover = isMobile ? (
-        cleaner ? messageIcon : null
-    ) : (
-        cleaner ? (
-            <Popover
-                content={
-                    <div className={styles.message_container}>
-                        <div className={styles.message__title}>
-                            <h2>Tin nhắn</h2>
-                        </div>
-                        <div className={styles.message__main}>
-                            <div className={styles.message_sidebar}>
-                                <div className={styles.message_user_list}>
-                                    <ConversationList
-                                        onSelect={(conversation) => {
-                                            handleConversationSelect(conversation);
-                                            // Reset message count when a conversation is selected
-                                            setMessageCount(0);
-                                        }}
-                                        userId={userId}
-                                        role={role}
-                                    />
-                                </div>
-                            </div>
-                            <div className={styles.message_outlet}>
-                                <ChatWindow
-                                    messages={messages}
-                                    onSendMessage={sendMessage}
-                                    conversation={selectedConversation}
-                                    userId={userId}
-                                />
-                            </div>
-                        </div>
-                    </div>
-                }
-                trigger="click"
-                open={isPopupMessage}
-                onOpenChange={(visible) => {
-                    setIsPopupMessage(visible);
-                    if (visible) {
-                        // Refresh message count when opening the popover
-                        refreshMessages();
-                    }
-                }}
-                placement="top"
-                overlayClassName={styles.message_popover}
-                getPopupContainer={() => document.querySelector(`.${styles.message_icon_wrapper}`)}
-            >
-                {messageIcon}
-            </Popover>
-        ) : null
-    );
+  // Message popover component (for desktop)
+  const messagePopover = isMobile ? (
+    cleaner ? (
+      messageIcon
+    ) : null
+  ) : cleaner ? (
+    <Popover
+      content={
+        <div className={styles.message_container}>
+          <div className={styles.message__title}>
+            <h2>Tin nhắn</h2>
+          </div>
+          <div className={styles.message__main}>
+            <div className={styles.message_sidebar}>
+              <div className={styles.message_user_list}>
+                <ConversationList
+                  onSelect={(conversation) => {
+                    handleConversationSelect(conversation);
+                    // Reset message count when a conversation is selected
+                    setMessageCount(0);
+                  }}
+                  userId={userId}
+                  role={role}
+                />
+              </div>
+            </div>
+            <div className={styles.message_outlet}>
+              <ChatWindow
+                messages={messages}
+                onSendMessage={sendMessage}
+                conversation={selectedConversation}
+                userId={userId}
+              />
+            </div>
+          </div>
+        </div>
+      }
+      trigger="click"
+      open={isPopupMessage}
+      onOpenChange={(visible) => {
+        setIsPopupMessage(visible);
+        if (visible) {
+          // Refresh message count when opening the popover
+          refreshMessages();
+        }
+      }}
+      placement="top"
+      overlayClassName={styles.message_popover}
+      getPopupContainer={() =>
+        document.querySelector(`.${styles.message_icon_wrapper}`)
+      }
+    >
+      {messageIcon}
+    </Popover>
+  ) : null;
 
-    return (
-        <div className="Container">
-            <nav className="navbar">
-                <div className="logo">
-                    <Link to="/homeclean">
-                        <img src={houseCleanLogo} alt="House Clean Logo" className="logo-img" />
-                    </Link>
-                </div>
+  return (
+    <div className="Container">
+      <nav className="navbar">
+        <div className="logo">
+          <Link to="/homeclean">
+            <img
+              src={houseCleanLogo}
+              alt="House Clean Logo"
+              className="logo-img"
+            />
+          </Link>
+        </div>
 
-                <div className="hamburger" onClick={toggleMenu}>
-                    <span></span>
-                    <span></span>
-                    <span></span>
-                </div>
+        <div className="hamburger" onClick={toggleMenu}>
+          <span></span>
+          <span></span>
+          <span></span>
+        </div>
 
-                <div className={`nav-content ${isMenuOpen ? 'active' : ''}`}>
-                    <ul className="menu">
-                        {/* <li><Link to="/homeclean" className="nav-link"></Link></li> */}
-                        <li><Link to="/activityjob" className="nav-link">Công việc </Link></li>
-                        <li><Link to="/homeclean" className="nav-link">Tin tức</Link></li>
-                        <li><Link to="/homeclean" className="nav-link">Bảng giá dịch vụ</Link></li>
+        <div className={`nav-content ${isMenuOpen ? "active" : ""}`}>
+          <ul className="menu">
+            {/* <li><Link to="/homeclean" className="nav-link"></Link></li> */}
+            <li>
+              <Link to="/activityjob" className="nav-link">
+                Công việc{" "}
+              </Link>
+            </li>
+            <li>
+              <Link to="/homeclean" className="nav-link">
+                Tin tức
+              </Link>
+            </li>
+            <li>
+              <Link to="/homeclean" className="nav-link">
+                Bảng giá dịch vụ
+              </Link>
+            </li>
 
-                        {/* Only show these elements on mobile */}
-                        <li className="mobile-login">
-                            {isMobile && (
-                                <>
-                                    {cleaner && (
-                                        <li className="mobile-notification">
-                                            {notificationPopover}
-                                            {messagePopover}
-                                        </li>
-                                    )}
-                                    {cleaner ? cleanerProfile : authButtons}
-                                </>
-                            )}
-                        </li>
-                    </ul>
-                </div>
+            {/* Only show these elements on mobile */}
+            <li className="mobile-login">
+              {isMobile && (
+                <>
+                  {cleaner && (
+                    <li className="mobile-notification">
+                      {notificationPopover}
+                      {messagePopover}
+                    </li>
+                  )}
+                  {cleaner ? cleanerProfile : authButtons}
+                </>
+              )}
+            </li>
+          </ul>
+        </div>
 
-                {/* Only show these elements on desktop */}
-                <div className="desktop-login">
-                    {!isMobile && (
-                        <>
-                            {cleaner && (
-                                <div className="desktop-notification" style={{ marginRight: '12px', display: 'flex', gap: 12, alignItems: 'center' }}>
-                                    {notificationPopover}
-                                    {messagePopover}
-                                </div>
-                            )}
-                            {cleaner ? cleanerProfile : authButtons}
-                        </>
-                    )}
-                </div>
-            </nav>
+        {/* Only show these elements on desktop */}
+        <div className="desktop-login">
+          {!isMobile && (
+            <>
+              {cleaner && (
+                <div
+                  className="desktop-notification"
+                  style={{
+                    marginRight: "12px",
+                    display: "flex",
+                    gap: 12,
+                    alignItems: "center",
+                  }}
+                >
+                  {notificationPopover}
+                  {messagePopover}
+                </div>
+              )}
+              {cleaner ? cleanerProfile : authButtons}
+            </>
+          )}
+        </div>
+      </nav>
 
-            {/* Render mobile notification panel outside navbar structure */}
-            {mobileNotificationContent}
-        </div>
-    );
+      {/* Render mobile notification panel outside navbar structure */}
+      {mobileNotificationContent}
+    </div>
+  );
 }
 
 export default Navbar;
Index: ../FE/home-clean-fe/src/components/activity/ActivityList.module.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.container {\n    display: flex;\n    flex-direction: column;\n    row-gap: 10px;\n    border-radius: 5px;\n    border: 1px solid rgb(231, 225, 225);\n    width: 100%;\n    max-width: 1000px;\n    margin: 0 auto;\n    padding: 20px 15px;\n    box-sizing: border-box;\n    background: #fff;\n}\n\n.actlist {\n    margin: 70px;\n}\n\n/* Tiêu đề */\n.title {\n    margin: 0;\n    font-size: 22px;\n    font-weight: bold;\n}\n\n/* Mô tả */\n.subtitle {\n    padding-bottom: 20px;\n    color: rgb(100, 100, 100);\n}\n\n/* Responsive */\n@media (max-width: 1024px) {\n    .container {\n        width: 95%;\n    }\n}\n\n@media (max-width: 768px) {\n    .container {\n        width: 100%;\n        /* padding: 20px; */\n        border-radius: 0;\n        border: none;\n    }\n\n    .title {\n        font-size: 20px;\n        text-align: center;\n    }\n\n    .subtitle {\n        font-size: 14px;\n        text-align: center;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/activity/ActivityList.module.css b/../FE/home-clean-fe/src/components/activity/ActivityList.module.css
--- a/../FE/home-clean-fe/src/components/activity/ActivityList.module.css	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/activity/ActivityList.module.css	(date 1743672482072)
@@ -14,6 +14,7 @@
 
 .actlist {
     margin: 70px;
+    min-height: 600px;
 }
 
 /* Tiêu đề */
Index: ../FE/home-clean-fe/src/components/activity/ActivityCard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState, useContext } from \"react\";\nimport { Modal, List, Button, Table, message, Empty, Badge } from \"antd\";\nimport { InfoCleanerCard } from \"../activity/InfoCleanerCard\";\nimport styles from \"../activity/ActivityCard.module.css\";\nimport { FaRegCommentAlt, FaRulerHorizontal } from \"react-icons/fa\";\nimport { MdCalendarToday, MdLocationOn, MdAccessTime } from \"react-icons/md\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport {\n    fetchCleanerApplications,\n    fetchCleanerDetail,\n    hireCleaner,\n    startJob,\n    completeJob,\n    deleteJobPosting,\n    rejectCleaner\n} from \"../../services/owner/StatusJobAPI\";\nimport { FeedbackModal } from \"../../components/activity/FeedbackModal\"; // Import the new FeedbackModal component\nimport { createConversation } from \"../../services/ChatService\";\nimport { sendNotification } from \"../../services/NotificationService\";\n\nexport const ActivityCard = ({ data, onDelete }) => {\n    const [activities, setActivities] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [cleanerList, setCleanerList] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [selectedCleaner, setSelectedCleaner] = useState(null);\n    const { customerId } = useContext(AuthContext);\n    const [selectedJobId, setSelectedJobId] = useState(null);\n    const [applicationsCount, setApplicationsCount] = useState({});\n    const [isFeedbackModalOpen, setIsFeedbackModalOpen] = useState(false); // New state for feedback modal\n    const [selectedJobIdForFeedback, setSelectedJobIdForFeedback] = useState(null); // New state for selected job ID for feedback\n\n    // Initialize activities from props\n    useEffect(() => {\n        if (data) {\n            setActivities(data);\n        }\n    }, [data]);\n\n\n    const getStatusColor = (status) => {\n        switch (status) {\n            case \"OPEN\": return \"#3498db\";\n            case \"PAID\": return \"#5dade2\";\n            case \"PENDING_APPROVAL\": return \"#f1c40f\";\n            case \"IN_PROGRESS\": return \"#e67e22\";\n            case \"COMPLETED\": return \"#2ecc71\";\n            case \"CANCELLED\": return \"#e74c3c\";\n            case \"DONE\": return \"#27ae60\";\n            case \"BOOKED\": return \"#8e44ad\";\n            default: return \"#bdc3c7\";\n        }\n    };\n    const getStatusText = (status) => {\n        switch (status) {\n            case \"OPEN\": return \"Đang chờ người nhận\";\n            case \"PAID\": return \"Đang chờ thanh toán qua VNPay\";\n            case \"PENDING_APPROVAL\": return \"Chờ phê duyệt\";\n            case \"IN_PROGRESS\": return \"Người nhận việc đang tới\";\n            case \"COMPLETED\": return \"Người nhận việc đã hoàn thành\";\n            case \"CANCELLED\": return \"Đã hủy\";\n            case \"DONE\": return \"Hoàn tất công việc\";\n            case \"BOOKED\": return \"Đã đặt lịch\";\n            default: return \"Không xác định\";\n        }\n    };\n\n    // Fetch cleaner applications\n    const fetchCleaners = async (jobId) => {\n        setLoading(true);\n        try {\n            const data = await fetchCleanerApplications(customerId, jobId);\n            setCleanerList(data);\n            setApplicationsCount(prev => ({\n                ...prev,\n                [jobId]: data.length\n            }));\n        } catch (error) {\n            message.error(\"Không thể tải danh sách Cleaner\");\n            setCleanerList([]);\n            setApplicationsCount(prev => ({\n                ...prev,\n                [jobId]: 0\n            }));\n        }\n        setLoading(false);\n    };\n\n    // Fetch application counts for all OPEN jobs on component mount\n    useEffect(() => {\n        if (activities && activities.length > 0) {\n            activities.forEach(async (activity) => {\n                if (activity.status === \"OPEN\") {\n                    try {\n                        const applications = await fetchCleanerApplications(customerId, activity.jobId);\n                        setApplicationsCount(prev => ({\n                            ...prev,\n                            [activity.jobId]: applications.length\n                        }));\n                    } catch (error) {\n                        console.error(\"Lỗi khi lấy số lượng ứng viên:\", error);\n                        setApplicationsCount(prev => ({\n                            ...prev,\n                            [activity.jobId]: 0\n                        }));\n                    }\n                }\n            });\n        }\n    }, [activities, customerId]);\n\n    // Fetch cleaner details\n    const handleFetchCleanerDetail = async (cleanerId) => {\n        setLoading(true);\n        try {\n            const data = await fetchCleanerDetail(cleanerId);\n            setSelectedCleaner(data);\n        } catch (error) {\n            message.error(\"Không thể tải thông tin Cleaner\");\n            setSelectedCleaner(null);\n        }\n        setLoading(false);\n    };\n\n    // Open cleaner modal\n    const openModal = (jobId) => {\n        setIsModalOpen(true);\n        fetchCleaners(jobId);\n        setSelectedJobId(jobId);\n    };\n\n    // Open feedback modal\n    const openFeedbackModal = (jobId) => {\n        setSelectedJobIdForFeedback(jobId);\n        setIsFeedbackModalOpen(true);\n    };\n\n    // Close feedback modal\n    const closeFeedbackModal = () => {\n        setIsFeedbackModalOpen(false);\n        setSelectedJobIdForFeedback(null);\n    };\n\n    // Update activity status locally\n    const updateActivityStatus = (jobId, newStatus) => {\n        setActivities(prevActivities =>\n            prevActivities.map(activity =>\n                activity.jobId === jobId\n                    ? { ...activity, status: newStatus }\n                    : activity\n            )\n        );\n    };\n\n    // Hire a cleaner\n    const handleHireCleaner = async (jobId, cleanerId, customerId) => {\n        if (!jobId) {\n            console.error(\"Không tìm thấy jobId!\");\n            return;\n        }\n\n        try {\n            // First, hire the cleaner\n            await hireCleaner(jobId, cleanerId, customerId);\n\n            // Then create a conversation\n            await createConversation(customerId, cleanerId);\n\n            console.log(\"Thuê cleaner thành công!\", { jobId, cleanerId, customerId });\n            message.success(\"Thuê cleaner thành công!\");\n            sendNotification(cleanerId,\n                `Người thuê ${localStorage.getItem('name')} đã chấp nhận công việc`,\n                'BOOKED',\n                'Cleaner'\n            )\n            updateActivityStatus(jobId, \"IN_PROGRESS\");\n            setIsModalOpen(false);\n        } catch (error) {\n            console.error(\"Lỗi khi thuê cleaner:\", error);\n            message.error(\"Lỗi khi thuê cleaner\");\n        }\n    };\n\n    // Handle reject cleaner\n    const handleRejectCleaner = async (jobId, cleanerId, customerId) => {\n        try {\n            await rejectCleaner(jobId, cleanerId, customerId);\n            console.log(\"Từ chối cleaner thành công!\", { jobId, cleanerId, customerId });\n            message.success(\"Từ chối cleaner thành công!\");\n            sendNotification(cleanerId,\n                `Người thuê ${localStorage.getItem('name')} từ chối công việc`,\n                'BOOKED',\n                'Cleaner'\n            )\n            // Refresh cleaner list\n            fetchCleaners(jobId);\n        } catch (error) {\n            console.error(\"Lỗi khi từ chối cleaner:\", error);\n            message.error(\"Lỗi khi từ chối cleaner\");\n        }\n    };\n\n    // Start a job\n    const handleStartJob = async (jobId) => {\n        try {\n            await startJob(jobId, customerId);\n            message.success(\"✅ Công việc đã bắt đầu!\");\n            updateActivityStatus(jobId, \"STARTED\");\n        } catch (error) {\n            console.error(\"❌ Lỗi khi bắt đầu công việc:\", error);\n            message.error(\"❌ Không thể bắt đầu công việc.\");\n        }\n    };\n\n    // Complete a job\n    const handleCompleteJob = async (jobId) => {\n        try {\n            await completeJob(jobId);\n            message.success(\"Công việc đã hoàn thành!\");\n            updateActivityStatus(jobId, \"DONE\");\n\n        } catch (error) {\n            console.error(\"Lỗi khi hoàn thành công việc:\", error);\n            message.error(\"Không thể hoàn thành công việc.\");\n        }\n    };\n\n    // Handle delete job posting with local state update\n    const handleDeleteJob = async (jobId) => {\n        try {\n            await onDelete(jobId);\n            // Remove deleted job from local state\n            setActivities(prevActivities =>\n                prevActivities.filter(activity => activity.jobId !== jobId)\n            );\n            message.success(\"Huỷ việc thành công\");\n        } catch (error) {\n            console.error(\"❌ Lỗi khi xóa công việc:\", error);\n            message.error(\"Lỗi khi không huỷ được công việc\");\n        }\n    };\n\n    const columns = [\n        {\n            title: \"Ảnh\",\n            dataIndex: \"profileImage\",\n            key: \"profileImage\",\n            render: (base64) => (\n                <img src={`data:image/png;base64,${base64}`} alt=\"Avatar\" style={{ width: 40, borderRadius: \"50%\" }} />\n            ),\n        },\n        {\n            title: \"Tên người dọn\",\n            dataIndex: \"cleanerName\",\n            key: \"cleanerName\",\n        },\n        {\n            title: \"Xem thông tin\",\n            key: \"actions\",\n            render: (_, record) => (\n                <Button\n                    type=\"default\"\n                    onClick={() => handleFetchCleanerDetail(record.cleanerId)}\n                    disabled={!record.cleanerId}\n                >\n                    Xem\n                </Button>\n            ),\n        },\n        {\n            title: \"Hành động\",\n            key: \"actions\",\n            render: (_, record) => (\n                <>\n                    <Button\n                        type=\"primary\"\n                        style={{ marginRight: 8 }}\n                        onClick={() => handleHireCleaner(selectedJobId, record.cleanerId, customerId)}\n                        disabled={!record.cleanerId}\n                    >\n                        Thuê\n                    </Button>\n                    <Button\n                        danger\n                        onClick={() => handleRejectCleaner(selectedJobId, record.cleanerId, customerId)}\n                        disabled={!record.cleanerId}\n                    >\n                        Từ chối\n                    </Button>\n                </>\n            ),\n        }\n    ];\n\n    return (\n        <div className={styles.cardlist}>\n            <div className={styles.container}>\n                {activities.map((activity, index) => (\n                    <div key={index} className={styles.card}>\n                        <div className={styles.cardContent}>\n                            <div className={styles.header}>\n                                {activity.services && activity.services.map((service, idx) => (\n                                    <div key={idx} className={styles.serviceItem}>\n                                        <h3>{service.serviceName}</h3>\n                                    </div>\n                                ))}\n\n                            </div>\n\n                            <p><MdCalendarToday className={styles.icon} /> {new Date(activity.scheduledTime).toLocaleDateString(\"vi-VN\")}</p>\n                            <p><MdAccessTime className={styles.icon} /> {new Date(activity.scheduledTime).toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\" })}</p>\n\n\n                            <div className={styles.location}>\n                                <MdLocationOn className={styles.icon} /> {activity.customerAddress}\n                            </div>\n                            <div className={styles.services}>\n                                {activity.services && activity.services.map((service, idx) => (\n                                    <div key={idx} className={styles.serviceItem}>\n                                        <p><strong>{service.serviceName}</strong>: {service.serviceDetailAreaRange}</p>\n                                    </div>\n                                ))}\n                            </div>\n\n                            {(activity.status === \"OPEN\"\n                                || activity.status === \"BOOKED\"\n                                || activity.status === \"IN_PROGRESS\") &&\n                                (\n                                    <div className={styles.deleteButton} onClick={() => handleDeleteJob(activity.jobId)}>\n                                        <b>Huỳ việc</b>\n                                    </div>\n                                )}\n\n                            <div className={styles.price}>\n                                <b>{activity.totalPrice.toLocaleString(\"vi-VN\")} VNĐ</b>\n                            </div>\n                        </div>\n\n                        <div className={styles.divider}></div>\n\n                        <div className={styles.footer}>\n                            <b style={{ color: getStatusColor(activity.status) }}>{getStatusText(activity.status)}</b>\n\n                            {(activity.status === \"DONE\") && (\n                                <Button\n                                    className={styles.reviewButton}\n                                    onClick={() => openFeedbackModal(activity.jobId)}\n                                >\n                                    <FaRegCommentAlt />\n                                    <span>\n                                        {activity.status === \"DONE\" ? \"Xem đánh giá\" : \"Đánh giá\"}\n                                    </span>\n                                </Button>\n                            )}\n\n                            {(activity.status === \"OPEN\" || activity.status === \"BOOKED\") &&\n                                (applicationsCount[activity.jobId] > 0) && (\n                                    <Badge count={applicationsCount[activity.jobId]} size=\"small\">\n                                        <Button type=\"primary\" className={styles.statusButton}\n                                            onClick={() => openModal(activity.jobId)}>\n                                            Xem thông tin Cleaner\n                                        </Button>\n                                    </Badge>\n                                )}\n\n\n                            {activity.status === \"COMPLETED\" && (\n                                <Button type=\"primary\" className={styles.statusButton}\n                                    onClick={() => handleCompleteJob(activity.jobId)}>\n                                    Đã hoàn thành\n                                </Button>\n                            )}\n                        </div>\n                    </div>\n                ))}\n            </div>\n\n            {/* Cleaner List Modal */}\n            <Modal\n                title=\"Danh sách Cleaner\"\n                open={isModalOpen}\n                onCancel={() => {\n                    setIsModalOpen(false);\n                    setSelectedCleaner(null);\n                }}\n                width={1050}\n                footer={null}\n            >\n                {selectedCleaner ? (\n                    <>\n                        <InfoCleanerCard cleaner={selectedCleaner} />\n                        <Button onClick={() => setSelectedCleaner(null)}>Quay lại</Button>\n                    </>\n                ) : (\n                    loading ? (\n                        <div style={{ textAlign: \"center\", padding: \"40px 0\" }}>\n                            {/* You can use Antd's Spin component here if needed */}\n                            Đang tải...\n                        </div>\n                    ) : cleanerList.length === 0 ? (\n                        <Empty\n                            image={Empty.PRESENTED_IMAGE_SIMPLE}\n                            description=\"Chưa có Cleaner nào nhận việc\"\n                        />\n                    ) : (\n                        <Table\n                            dataSource={cleanerList}\n                            columns={columns}\n                            rowKey=\"cleanerId\"\n                            loading={loading}\n                            pagination={{ pageSize: 5 }}\n                            locale={{ emptyText: <Empty description=\"Chưa có Cleaner nào nhận việc\" /> }}\n                        />\n                    )\n                )}\n            </Modal>\n\n            {/* Feedback Modal */}\n            <FeedbackModal\n                visible={isFeedbackModalOpen}\n                jobId={selectedJobIdForFeedback}\n                customerId={customerId}\n                onClose={closeFeedbackModal}\n            />\n        </div>\n    );\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/activity/ActivityCard.jsx b/../FE/home-clean-fe/src/components/activity/ActivityCard.jsx
--- a/../FE/home-clean-fe/src/components/activity/ActivityCard.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/activity/ActivityCard.jsx	(date 1743672482072)
@@ -2,427 +2,517 @@
 import { Modal, List, Button, Table, message, Empty, Badge } from "antd";
 import { InfoCleanerCard } from "../activity/InfoCleanerCard";
 import styles from "../activity/ActivityCard.module.css";
-import { FaRegCommentAlt, FaRulerHorizontal } from "react-icons/fa";
+import { FaRegCommentAlt, FaRulerHorizontal, FaFlag } from "react-icons/fa";
 import { MdCalendarToday, MdLocationOn, MdAccessTime } from "react-icons/md";
 import axios from "axios";
 import { AuthContext } from "../../context/AuthContext";
 import {
-    fetchCleanerApplications,
-    fetchCleanerDetail,
-    hireCleaner,
-    startJob,
-    completeJob,
-    deleteJobPosting,
-    rejectCleaner
+  fetchCleanerApplications,
+  fetchCleanerDetail,
+  hireCleaner,
+  startJob,
+  completeJob,
+  deleteJobPosting,
+  rejectCleaner,
 } from "../../services/owner/StatusJobAPI";
 import { FeedbackModal } from "../../components/activity/FeedbackModal"; // Import the new FeedbackModal component
 import { createConversation } from "../../services/ChatService";
 import { sendNotification } from "../../services/NotificationService";
+import { ReportModal } from "../../components/activity/ReportModal"; // Import the new ReportModal component
 
 export const ActivityCard = ({ data, onDelete }) => {
-    const [activities, setActivities] = useState([]);
-    const [isModalOpen, setIsModalOpen] = useState(false);
-    const [cleanerList, setCleanerList] = useState([]);
-    const [loading, setLoading] = useState(false);
-    const [selectedCleaner, setSelectedCleaner] = useState(null);
-    const { customerId } = useContext(AuthContext);
-    const [selectedJobId, setSelectedJobId] = useState(null);
-    const [applicationsCount, setApplicationsCount] = useState({});
-    const [isFeedbackModalOpen, setIsFeedbackModalOpen] = useState(false); // New state for feedback modal
-    const [selectedJobIdForFeedback, setSelectedJobIdForFeedback] = useState(null); // New state for selected job ID for feedback
+  const [activities, setActivities] = useState([]);
+  const [isModalOpen, setIsModalOpen] = useState(false);
+  const [cleanerList, setCleanerList] = useState([]);
+  const [loading, setLoading] = useState(false);
+  const [selectedCleaner, setSelectedCleaner] = useState(null);
+  const { customerId } = useContext(AuthContext);
+  const [selectedJobId, setSelectedJobId] = useState(null);
+  const [applicationsCount, setApplicationsCount] = useState({});
+  const [isFeedbackModalOpen, setIsFeedbackModalOpen] = useState(false); // New state for feedback modal
+  const [selectedJobIdForFeedback, setSelectedJobIdForFeedback] =
+    useState(null); // New state for selected job ID for feedback
+  const [isReportModalOpen, setIsReportModalOpen] = useState(false);
+  const [selectedJobIdForReport, setSelectedJobIdForReport] = useState(null);
 
-    // Initialize activities from props
-    useEffect(() => {
-        if (data) {
-            setActivities(data);
-        }
-    }, [data]);
+  // Initialize activities from props
+  useEffect(() => {
+    if (data) {
+      setActivities(data);
+    }
+  }, [data]);
 
-
-    const getStatusColor = (status) => {
-        switch (status) {
-            case "OPEN": return "#3498db";
-            case "PAID": return "#5dade2";
-            case "PENDING_APPROVAL": return "#f1c40f";
-            case "IN_PROGRESS": return "#e67e22";
-            case "COMPLETED": return "#2ecc71";
-            case "CANCELLED": return "#e74c3c";
-            case "DONE": return "#27ae60";
-            case "BOOKED": return "#8e44ad";
-            default: return "#bdc3c7";
-        }
-    };
-    const getStatusText = (status) => {
-        switch (status) {
-            case "OPEN": return "Đang chờ người nhận";
-            case "PAID": return "Đang chờ thanh toán qua VNPay";
-            case "PENDING_APPROVAL": return "Chờ phê duyệt";
-            case "IN_PROGRESS": return "Người nhận việc đang tới";
-            case "COMPLETED": return "Người nhận việc đã hoàn thành";
-            case "CANCELLED": return "Đã hủy";
-            case "DONE": return "Hoàn tất công việc";
-            case "BOOKED": return "Đã đặt lịch";
-            default: return "Không xác định";
-        }
-    };
+  const getStatusColor = (status) => {
+    switch (status) {
+      case "OPEN":
+        return "#3498db";
+      case "PAID":
+        return "#5dade2";
+      case "PENDING_APPROVAL":
+        return "#f1c40f";
+      case "IN_PROGRESS":
+        return "#e67e22";
+      case "COMPLETED":
+        return "#2ecc71";
+      case "CANCELLED":
+        return "#e74c3c";
+      case "DONE":
+        return "#27ae60";
+      case "BOOKED":
+        return "#8e44ad";
+      default:
+        return "#bdc3c7";
+    }
+  };
+  const getStatusText = (status) => {
+    switch (status) {
+      case "OPEN":
+        return "Đang chờ người nhận";
+      case "PAID":
+        return "Đang chờ thanh toán qua VNPay";
+      case "PENDING_APPROVAL":
+        return "Chờ phê duyệt";
+      case "IN_PROGRESS":
+        return "Người nhận việc đang tới";
+      case "COMPLETED":
+        return "Người nhận việc đã hoàn thành";
+      case "CANCELLED":
+        return "Đã hủy";
+      case "DONE":
+        return "Hoàn tất công việc";
+      case "BOOKED":
+        return "Đã đặt lịch";
+      default:
+        return "Không xác định";
+    }
+  };
 
-    // Fetch cleaner applications
-    const fetchCleaners = async (jobId) => {
-        setLoading(true);
-        try {
-            const data = await fetchCleanerApplications(customerId, jobId);
-            setCleanerList(data);
-            setApplicationsCount(prev => ({
-                ...prev,
-                [jobId]: data.length
-            }));
-        } catch (error) {
-            message.error("Không thể tải danh sách Cleaner");
-            setCleanerList([]);
-            setApplicationsCount(prev => ({
-                ...prev,
-                [jobId]: 0
-            }));
-        }
-        setLoading(false);
-    };
+  // Fetch cleaner applications
+  const fetchCleaners = async (jobId) => {
+    setLoading(true);
+    try {
+      const data = await fetchCleanerApplications(customerId, jobId);
+      setCleanerList(data);
+      setApplicationsCount((prev) => ({
+        ...prev,
+        [jobId]: data.length,
+      }));
+    } catch (error) {
+      message.error("Không thể tải danh sách Cleaner");
+      setCleanerList([]);
+      setApplicationsCount((prev) => ({
+        ...prev,
+        [jobId]: 0,
+      }));
+    }
+    setLoading(false);
+  };
 
-    // Fetch application counts for all OPEN jobs on component mount
-    useEffect(() => {
-        if (activities && activities.length > 0) {
-            activities.forEach(async (activity) => {
-                if (activity.status === "OPEN") {
-                    try {
-                        const applications = await fetchCleanerApplications(customerId, activity.jobId);
-                        setApplicationsCount(prev => ({
-                            ...prev,
-                            [activity.jobId]: applications.length
-                        }));
-                    } catch (error) {
-                        console.error("Lỗi khi lấy số lượng ứng viên:", error);
-                        setApplicationsCount(prev => ({
-                            ...prev,
-                            [activity.jobId]: 0
-                        }));
-                    }
-                }
-            });
-        }
-    }, [activities, customerId]);
+  // Fetch application counts for all OPEN jobs on component mount
+  useEffect(() => {
+    if (activities && activities.length > 0) {
+      activities.forEach(async (activity) => {
+        if (activity.status === "OPEN") {
+          try {
+            const applications = await fetchCleanerApplications(
+              customerId,
+              activity.jobId
+            );
+            setApplicationsCount((prev) => ({
+              ...prev,
+              [activity.jobId]: applications.length,
+            }));
+          } catch (error) {
+            console.error("Lỗi khi lấy số lượng ứng viên:", error);
+            setApplicationsCount((prev) => ({
+              ...prev,
+              [activity.jobId]: 0,
+            }));
+          }
+        }
+      });
+    }
+  }, [activities, customerId]);
 
-    // Fetch cleaner details
-    const handleFetchCleanerDetail = async (cleanerId) => {
-        setLoading(true);
-        try {
-            const data = await fetchCleanerDetail(cleanerId);
-            setSelectedCleaner(data);
-        } catch (error) {
-            message.error("Không thể tải thông tin Cleaner");
-            setSelectedCleaner(null);
-        }
-        setLoading(false);
-    };
+  // Fetch cleaner details
+  const handleFetchCleanerDetail = async (cleanerId) => {
+    setLoading(true);
+    try {
+      const data = await fetchCleanerDetail(cleanerId);
+      setSelectedCleaner(data);
+    } catch (error) {
+      message.error("Không thể tải thông tin Cleaner");
+      setSelectedCleaner(null);
+    }
+    setLoading(false);
+  };
 
-    // Open cleaner modal
-    const openModal = (jobId) => {
-        setIsModalOpen(true);
-        fetchCleaners(jobId);
-        setSelectedJobId(jobId);
-    };
+  // Open cleaner modal
+  const openModal = (jobId) => {
+    setIsModalOpen(true);
+    fetchCleaners(jobId);
+    setSelectedJobId(jobId);
+  };
 
-    // Open feedback modal
-    const openFeedbackModal = (jobId) => {
-        setSelectedJobIdForFeedback(jobId);
-        setIsFeedbackModalOpen(true);
-    };
+  // Open feedback modal
+  const openFeedbackModal = (jobId) => {
+    setSelectedJobIdForFeedback(jobId);
+    setIsFeedbackModalOpen(true);
+  };
 
-    // Close feedback modal
-    const closeFeedbackModal = () => {
-        setIsFeedbackModalOpen(false);
-        setSelectedJobIdForFeedback(null);
-    };
+  // Open report modal
+  const openReportModal = (jobId) => {
+    setSelectedJobIdForReport(jobId);
+    setIsReportModalOpen(true);
+  };
+
+  // Close feedback modal
+  const closeFeedbackModal = () => {
+    setIsFeedbackModalOpen(false);
+    setSelectedJobIdForFeedback(null);
+  };
 
-    // Update activity status locally
-    const updateActivityStatus = (jobId, newStatus) => {
-        setActivities(prevActivities =>
-            prevActivities.map(activity =>
-                activity.jobId === jobId
-                    ? { ...activity, status: newStatus }
-                    : activity
-            )
-        );
-    };
+  //close report modal
+  const closeReportModal = () => {
+    setIsReportModalOpen(false);
+    setSelectedJobIdForReport(null);
+  };
+
+  // Update activity status locally
+  const updateActivityStatus = (jobId, newStatus) => {
+    setActivities((prevActivities) =>
+      prevActivities.map((activity) =>
+        activity.jobId === jobId ? { ...activity, status: newStatus } : activity
+      )
+    );
+  };
 
-    // Hire a cleaner
-    const handleHireCleaner = async (jobId, cleanerId, customerId) => {
-        if (!jobId) {
-            console.error("Không tìm thấy jobId!");
-            return;
-        }
+  // Hire a cleaner
+  const handleHireCleaner = async (jobId, cleanerId, customerId) => {
+    if (!jobId) {
+      console.error("Không tìm thấy jobId!");
+      return;
+    }
 
-        try {
-            // First, hire the cleaner
-            await hireCleaner(jobId, cleanerId, customerId);
+    try {
+      // First, hire the cleaner
+      await hireCleaner(jobId, cleanerId, customerId);
 
-            // Then create a conversation
-            await createConversation(customerId, cleanerId);
+      // Then create a conversation
+      await createConversation(customerId, cleanerId);
 
-            console.log("Thuê cleaner thành công!", { jobId, cleanerId, customerId });
-            message.success("Thuê cleaner thành công!");
-            sendNotification(cleanerId,
-                `Người thuê ${localStorage.getItem('name')} đã chấp nhận công việc`,
-                'BOOKED',
-                'Cleaner'
-            )
-            updateActivityStatus(jobId, "IN_PROGRESS");
-            setIsModalOpen(false);
-        } catch (error) {
-            console.error("Lỗi khi thuê cleaner:", error);
-            message.error("Lỗi khi thuê cleaner");
-        }
-    };
+      console.log("Thuê cleaner thành công!", { jobId, cleanerId, customerId });
+      message.success("Thuê cleaner thành công!");
+      sendNotification(
+        cleanerId,
+        `Người thuê ${localStorage.getItem("name")} đã chấp nhận công việc`,
+        "BOOKED",
+        "Cleaner"
+      );
+      updateActivityStatus(jobId, "IN_PROGRESS");
+      setIsModalOpen(false);
+    } catch (error) {
+      console.error("Lỗi khi thuê cleaner:", error);
+      message.error("Lỗi khi thuê cleaner");
+    }
+  };
 
-    // Handle reject cleaner
-    const handleRejectCleaner = async (jobId, cleanerId, customerId) => {
-        try {
-            await rejectCleaner(jobId, cleanerId, customerId);
-            console.log("Từ chối cleaner thành công!", { jobId, cleanerId, customerId });
-            message.success("Từ chối cleaner thành công!");
-            sendNotification(cleanerId,
-                `Người thuê ${localStorage.getItem('name')} từ chối công việc`,
-                'BOOKED',
-                'Cleaner'
-            )
-            // Refresh cleaner list
-            fetchCleaners(jobId);
-        } catch (error) {
-            console.error("Lỗi khi từ chối cleaner:", error);
-            message.error("Lỗi khi từ chối cleaner");
-        }
-    };
+  // Handle reject cleaner
+  const handleRejectCleaner = async (jobId, cleanerId, customerId) => {
+    try {
+      await rejectCleaner(jobId, cleanerId, customerId);
+      console.log("Từ chối cleaner thành công!", {
+        jobId,
+        cleanerId,
+        customerId,
+      });
+      message.success("Từ chối cleaner thành công!");
+      sendNotification(
+        cleanerId,
+        `Người thuê ${localStorage.getItem("name")} từ chối công việc`,
+        "BOOKED",
+        "Cleaner"
+      );
+      // Refresh cleaner list
+      fetchCleaners(jobId);
+    } catch (error) {
+      console.error("Lỗi khi từ chối cleaner:", error);
+      message.error("Lỗi khi từ chối cleaner");
+    }
+  };
 
-    // Start a job
-    const handleStartJob = async (jobId) => {
-        try {
-            await startJob(jobId, customerId);
-            message.success("✅ Công việc đã bắt đầu!");
-            updateActivityStatus(jobId, "STARTED");
-        } catch (error) {
-            console.error("❌ Lỗi khi bắt đầu công việc:", error);
-            message.error("❌ Không thể bắt đầu công việc.");
-        }
-    };
+  // Start a job
+  const handleStartJob = async (jobId) => {
+    try {
+      await startJob(jobId, customerId);
+      message.success("✅ Công việc đã bắt đầu!");
+      updateActivityStatus(jobId, "STARTED");
+    } catch (error) {
+      console.error("❌ Lỗi khi bắt đầu công việc:", error);
+      message.error("❌ Không thể bắt đầu công việc.");
+    }
+  };
 
-    // Complete a job
-    const handleCompleteJob = async (jobId) => {
-        try {
-            await completeJob(jobId);
-            message.success("Công việc đã hoàn thành!");
-            updateActivityStatus(jobId, "DONE");
-
-        } catch (error) {
-            console.error("Lỗi khi hoàn thành công việc:", error);
-            message.error("Không thể hoàn thành công việc.");
-        }
-    };
+  // Complete a job
+  const handleCompleteJob = async (jobId) => {
+    try {
+      await completeJob(jobId);
+      message.success("Công việc đã hoàn thành!");
+      updateActivityStatus(jobId, "DONE");
+    } catch (error) {
+      console.error("Lỗi khi hoàn thành công việc:", error);
+      message.error("Không thể hoàn thành công việc.");
+    }
+  };
 
-    // Handle delete job posting with local state update
-    const handleDeleteJob = async (jobId) => {
-        try {
-            await onDelete(jobId);
-            // Remove deleted job from local state
-            setActivities(prevActivities =>
-                prevActivities.filter(activity => activity.jobId !== jobId)
-            );
-            message.success("Huỷ việc thành công");
-        } catch (error) {
-            console.error("❌ Lỗi khi xóa công việc:", error);
-            message.error("Lỗi khi không huỷ được công việc");
-        }
-    };
+  // Handle delete job posting with local state update
+  const handleDeleteJob = async (jobId) => {
+    try {
+      await onDelete(jobId);
+      // Remove deleted job from local state
+      setActivities((prevActivities) =>
+        prevActivities.filter((activity) => activity.jobId !== jobId)
+      );
+      message.success("Huỷ việc thành công");
+    } catch (error) {
+      console.error("❌ Lỗi khi xóa công việc:", error);
+      message.error("Lỗi khi không huỷ được công việc");
+    }
+  };
 
-    const columns = [
-        {
-            title: "Ảnh",
-            dataIndex: "profileImage",
-            key: "profileImage",
-            render: (base64) => (
-                <img src={`data:image/png;base64,${base64}`} alt="Avatar" style={{ width: 40, borderRadius: "50%" }} />
-            ),
-        },
-        {
-            title: "Tên người dọn",
-            dataIndex: "cleanerName",
-            key: "cleanerName",
-        },
-        {
-            title: "Xem thông tin",
-            key: "actions",
-            render: (_, record) => (
-                <Button
-                    type="default"
-                    onClick={() => handleFetchCleanerDetail(record.cleanerId)}
-                    disabled={!record.cleanerId}
-                >
-                    Xem
-                </Button>
-            ),
-        },
-        {
-            title: "Hành động",
-            key: "actions",
-            render: (_, record) => (
-                <>
-                    <Button
-                        type="primary"
-                        style={{ marginRight: 8 }}
-                        onClick={() => handleHireCleaner(selectedJobId, record.cleanerId, customerId)}
-                        disabled={!record.cleanerId}
-                    >
-                        Thuê
-                    </Button>
-                    <Button
-                        danger
-                        onClick={() => handleRejectCleaner(selectedJobId, record.cleanerId, customerId)}
-                        disabled={!record.cleanerId}
-                    >
-                        Từ chối
-                    </Button>
-                </>
-            ),
-        }
-    ];
+  const columns = [
+    {
+      title: "Ảnh",
+      dataIndex: "profileImage",
+      key: "profileImage",
+      render: (base64) => (
+        <img
+          src={`data:image/png;base64,${base64}`}
+          alt="Avatar"
+          style={{ width: 40, borderRadius: "50%" }}
+        />
+      ),
+    },
+    {
+      title: "Tên người dọn",
+      dataIndex: "cleanerName",
+      key: "cleanerName",
+    },
+    {
+      title: "Xem thông tin",
+      key: "actions",
+      render: (_, record) => (
+        <Button
+          type="default"
+          onClick={() => handleFetchCleanerDetail(record.cleanerId)}
+          disabled={!record.cleanerId}
+        >
+          Xem
+        </Button>
+      ),
+    },
+    {
+      title: "Hành động",
+      key: "actions",
+      render: (_, record) => (
+        <>
+          <Button
+            type="primary"
+            style={{ marginRight: 8 }}
+            onClick={() =>
+              handleHireCleaner(selectedJobId, record.cleanerId, customerId)
+            }
+            disabled={!record.cleanerId}
+          >
+            Thuê
+          </Button>
+          <Button
+            danger
+            onClick={() =>
+              handleRejectCleaner(selectedJobId, record.cleanerId, customerId)
+            }
+            disabled={!record.cleanerId}
+          >
+            Từ chối
+          </Button>
+        </>
+      ),
+    },
+  ];
 
-    return (
-        <div className={styles.cardlist}>
-            <div className={styles.container}>
-                {activities.map((activity, index) => (
-                    <div key={index} className={styles.card}>
-                        <div className={styles.cardContent}>
-                            <div className={styles.header}>
-                                {activity.services && activity.services.map((service, idx) => (
-                                    <div key={idx} className={styles.serviceItem}>
-                                        <h3>{service.serviceName}</h3>
-                                    </div>
-                                ))}
-
-                            </div>
+  return (
+    <div className={styles.cardlist}>
+      <div className={styles.container}>
+        {activities.map((activity, index) => (
+          <div key={index} className={styles.card}>
+            <div className={styles.cardContent}>
+              <div className={styles.header}>
+                {activity.services &&
+                  activity.services.map((service, idx) => (
+                    <div key={idx} className={styles.serviceItem}>
+                      <h3>{service.serviceName}</h3>
+                    </div>
+                  ))}
+              </div>
 
-                            <p><MdCalendarToday className={styles.icon} /> {new Date(activity.scheduledTime).toLocaleDateString("vi-VN")}</p>
-                            <p><MdAccessTime className={styles.icon} /> {new Date(activity.scheduledTime).toLocaleTimeString("vi-VN", { hour: "2-digit", minute: "2-digit" })}</p>
-
+              <p>
+                <MdCalendarToday className={styles.icon} />{" "}
+                {new Date(activity.scheduledTime).toLocaleDateString("vi-VN")}
+              </p>
+              <p>
+                <MdAccessTime className={styles.icon} />{" "}
+                {new Date(activity.scheduledTime).toLocaleTimeString("vi-VN", {
+                  hour: "2-digit",
+                  minute: "2-digit",
+                })}
+              </p>
 
-                            <div className={styles.location}>
-                                <MdLocationOn className={styles.icon} /> {activity.customerAddress}
-                            </div>
-                            <div className={styles.services}>
-                                {activity.services && activity.services.map((service, idx) => (
-                                    <div key={idx} className={styles.serviceItem}>
-                                        <p><strong>{service.serviceName}</strong>: {service.serviceDetailAreaRange}</p>
-                                    </div>
-                                ))}
-                            </div>
+              <div className={styles.location}>
+                <MdLocationOn className={styles.icon} />{" "}
+                {activity.customerAddress}
+              </div>
+              <div className={styles.services}>
+                {activity.services &&
+                  activity.services.map((service, idx) => (
+                    <div key={idx} className={styles.serviceItem}>
+                      <p>
+                        <strong>{service.serviceName}</strong>:{" "}
+                        {service.serviceDetailAreaRange}
+                      </p>
+                    </div>
+                  ))}
+              </div>
 
-                            {(activity.status === "OPEN"
-                                || activity.status === "BOOKED"
-                                || activity.status === "IN_PROGRESS") &&
-                                (
-                                    <div className={styles.deleteButton} onClick={() => handleDeleteJob(activity.jobId)}>
-                                        <b>Huỳ việc</b>
-                                    </div>
-                                )}
+              {(activity.status === "OPEN" ||
+                activity.status === "BOOKED" ||
+                activity.status === "IN_PROGRESS") && (
+                <div
+                  className={styles.deleteButton}
+                  onClick={() => handleDeleteJob(activity.jobId)}
+                >
+                  <b>Huỳ việc</b>
+                </div>
+              )}
 
-                            <div className={styles.price}>
-                                <b>{activity.totalPrice.toLocaleString("vi-VN")} VNĐ</b>
-                            </div>
-                        </div>
+              <div className={styles.price}>
+                <b>{activity.totalPrice.toLocaleString("vi-VN")} VNĐ</b>
+              </div>
+            </div>
 
-                        <div className={styles.divider}></div>
+            <div className={styles.divider}></div>
 
-                        <div className={styles.footer}>
-                            <b style={{ color: getStatusColor(activity.status) }}>{getStatusText(activity.status)}</b>
+            <div className={styles.footer}>
+              <b style={{ color: getStatusColor(activity.status) }}>
+                {getStatusText(activity.status)}
+              </b>
 
-                            {(activity.status === "DONE") && (
-                                <Button
-                                    className={styles.reviewButton}
-                                    onClick={() => openFeedbackModal(activity.jobId)}
-                                >
-                                    <FaRegCommentAlt />
-                                    <span>
-                                        {activity.status === "DONE" ? "Xem đánh giá" : "Đánh giá"}
-                                    </span>
-                                </Button>
-                            )}
+              {activity.status === "DONE" && (
+                <div style={{ display: "flex", gap: "1rem" }}>
+                  <Button
+                    className={styles.reviewButton}
+                    onClick={() => openFeedbackModal(activity.jobId)}
+                  >
+                    <FaRegCommentAlt />
+                    <span>
+                      {activity.status === "DONE" ? "Xem đánh giá" : "Đánh giá"}
+                    </span>
+                  </Button>
+
+                  <Button
+                    className={styles.reviewButton}
+                    onClick={() => openReportModal(activity.jobId)}
+                    danger
+                    style={{ color: "#ff7875" }}
+                  >
+                    <FaFlag />
+                    <span>
+                      {activity.status === "DONE" ? "Xem báo cáo" : "Báo cáo"}
+                    </span>
+                  </Button>
+                </div>
+              )}
 
-                            {(activity.status === "OPEN" || activity.status === "BOOKED") &&
-                                (applicationsCount[activity.jobId] > 0) && (
-                                    <Badge count={applicationsCount[activity.jobId]} size="small">
-                                        <Button type="primary" className={styles.statusButton}
-                                            onClick={() => openModal(activity.jobId)}>
-                                            Xem thông tin Cleaner
-                                        </Button>
-                                    </Badge>
-                                )}
+              {(activity.status === "OPEN" || activity.status === "BOOKED") &&
+                applicationsCount[activity.jobId] > 0 && (
+                  <Badge count={applicationsCount[activity.jobId]} size="small">
+                    <Button
+                      type="primary"
+                      className={styles.statusButton}
+                      onClick={() => openModal(activity.jobId)}
+                    >
+                      Xem thông tin Cleaner
+                    </Button>
+                  </Badge>
+                )}
 
-
-                            {activity.status === "COMPLETED" && (
-                                <Button type="primary" className={styles.statusButton}
-                                    onClick={() => handleCompleteJob(activity.jobId)}>
-                                    Đã hoàn thành
-                                </Button>
-                            )}
-                        </div>
-                    </div>
-                ))}
-            </div>
+              {activity.status === "COMPLETED" && (
+                <Button
+                  type="primary"
+                  className={styles.statusButton}
+                  onClick={() => handleCompleteJob(activity.jobId)}
+                >
+                  Đã hoàn thành
+                </Button>
+              )}
+            </div>
+          </div>
+        ))}
+      </div>
 
-            {/* Cleaner List Modal */}
-            <Modal
-                title="Danh sách Cleaner"
-                open={isModalOpen}
-                onCancel={() => {
-                    setIsModalOpen(false);
-                    setSelectedCleaner(null);
-                }}
-                width={1050}
-                footer={null}
-            >
-                {selectedCleaner ? (
-                    <>
-                        <InfoCleanerCard cleaner={selectedCleaner} />
-                        <Button onClick={() => setSelectedCleaner(null)}>Quay lại</Button>
-                    </>
-                ) : (
-                    loading ? (
-                        <div style={{ textAlign: "center", padding: "40px 0" }}>
-                            {/* You can use Antd's Spin component here if needed */}
-                            Đang tải...
-                        </div>
-                    ) : cleanerList.length === 0 ? (
-                        <Empty
-                            image={Empty.PRESENTED_IMAGE_SIMPLE}
-                            description="Chưa có Cleaner nào nhận việc"
-                        />
-                    ) : (
-                        <Table
-                            dataSource={cleanerList}
-                            columns={columns}
-                            rowKey="cleanerId"
-                            loading={loading}
-                            pagination={{ pageSize: 5 }}
-                            locale={{ emptyText: <Empty description="Chưa có Cleaner nào nhận việc" /> }}
-                        />
-                    )
-                )}
-            </Modal>
+      {/* Cleaner List Modal */}
+      <Modal
+        title="Danh sách Cleaner"
+        open={isModalOpen}
+        onCancel={() => {
+          setIsModalOpen(false);
+          setSelectedCleaner(null);
+        }}
+        width={1050}
+        footer={null}
+      >
+        {selectedCleaner ? (
+          <>
+            <InfoCleanerCard cleaner={selectedCleaner} />
+            <Button onClick={() => setSelectedCleaner(null)}>Quay lại</Button>
+          </>
+        ) : loading ? (
+          <div style={{ textAlign: "center", padding: "40px 0" }}>
+            {/* You can use Antd's Spin component here if needed */}
+            Đang tải...
+          </div>
+        ) : cleanerList.length === 0 ? (
+          <Empty
+            image={Empty.PRESENTED_IMAGE_SIMPLE}
+            description="Chưa có Cleaner nào nhận việc"
+          />
+        ) : (
+          <Table
+            dataSource={cleanerList}
+            columns={columns}
+            rowKey="cleanerId"
+            loading={loading}
+            pagination={{ pageSize: 5 }}
+            locale={{
+              emptyText: <Empty description="Chưa có Cleaner nào nhận việc" />,
+            }}
+          />
+        )}
+      </Modal>
 
-            {/* Feedback Modal */}
-            <FeedbackModal
-                visible={isFeedbackModalOpen}
-                jobId={selectedJobIdForFeedback}
-                customerId={customerId}
-                onClose={closeFeedbackModal}
-            />
-        </div>
-    );
-};
\ No newline at end of file
+      {/* Feedback Modal */}
+      <FeedbackModal
+        visible={isFeedbackModalOpen}
+        jobId={selectedJobIdForFeedback}
+        customerId={customerId}
+        onClose={closeFeedbackModal}
+      />
+
+      <ReportModal
+        visible={isReportModalOpen}
+        jobId={selectedJobIdForReport}
+        customerId={customerId}
+        onClose={closeReportModal}
+      />
+    </div>
+  );
+};
Index: ../FE/home-clean-fe/src/components/combo-service/JobUpload.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from \"react\";\nimport { Form, message } from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport styles from \"./JobUpload.module.css\";\nimport JobUploadCard from \"./JobUploadCard\";\nimport ServiceSelectionModal from \"./ServiceSelectionModal\";\nimport donBep from \"../../assets/icon-home/don-bep.svg\";\nimport donNhaVeSinh from \"../../assets/icon-home/don-nha-vs.svg\";\nimport donPhongKhach from \"../../assets/icon-home/phong-khach.svg\";\nimport donPhongNgu from \"../../assets/icon-home/don-phong-ngu.svg\";\nimport donDepSauTiec from \"../../assets/icon-home/don-sk.svg\";\nimport donDepNhaMoi from \"../../assets/icon-home/nha-moi.svg\";\nimport donDepVanPhong from \"../../assets/icon-home/don-van-phong.svg\";\nimport donDepTheoKy from \"../../assets/icon-home/don-dinh-ky.svg\";\n\nconst JobUpload = () => {\n    const navigate = useNavigate();\n    const [isServiceModalVisible, setIsServiceModalVisible] = useState(false);\n    const [selectedServices, setSelectedServices] = useState([]);\n\n    // Combined services array (regular + special)\n    const allServices = [\n        {\n            id: 1,\n            icon: donPhongKhach,\n            title: \"Dọn phòng khách\",\n            description: \"Lau sàn, hút bụi, lau bàn ghế, cửa kính\",\n        },\n        {\n            id: 2,\n            icon: donBep,\n            title: \"Dọn phòng bếp\",\n            description: \"Gấp chăn gối, lau bụi, hút bụi, lau sàn\",\n        },\n        {\n            id: 3,\n            icon: donPhongNgu,\n            title: \"Dọn phòng ngủ\",\n            description: \"Gấp chăn gối, lau bụi, hút bụi, lau sàn\",\n        },\n        {\n            id: 4,\n            icon: donNhaVeSinh,\n            title: \"Dọn nhà vệ sinh\",\n            description: \"Gấp chăn gối, lau bụi, hút bụi, lau sàn\",\n        },\n        {\n            id: 5,\n            icon: donDepSauTiec,\n            title: \"Dọn dẹp theo Combo\",\n            description: \"Chọn nhiều dịch vụ cùng 1 lúc\",\n        },\n        {\n            id: 6,\n            icon: donDepNhaMoi,\n            title: \"Dọn dẹp nhà mới xây, sau sửa chữa\",\n            description: \"Mô tả dịch vụ\",\n        },\n        {\n            id: 7,\n            icon: donDepVanPhong,\n            title: \"Dọn dẹp văn phòng, cửa hàng\",\n            description: \"Mô tả dịch vụ\",\n        },\n        {\n            id: 8,\n            icon: donDepTheoKy,\n            title: \"Dọn dẹp nhà theo định kỳ\",\n            description: \"Mô tả dịch vụ\",\n        },\n    ];\n\n    // For display in the main page\n    const regularServices = allServices.slice(0, 4);\n    const specialServices = allServices.slice(4, 8);\n\n    const showServiceModal = () => {\n        setIsServiceModalVisible(true);\n    };\n\n    const handleServiceCancel = () => {\n        setIsServiceModalVisible(false);\n    };\n\n    const handleServiceOk = () => {\n        if (selectedServices.length > 0) {\n            setIsServiceModalVisible(false);\n            // Navigate to the service details page instead of showing modal\n            navigate(\"/service-details-combo\", {\n                state: {\n                    selectedServices,\n                    allServices\n                }\n            });\n        } else {\n            message.error('Vui lòng chọn ít nhất một dịch vụ!');\n        }\n    };\n\n    const onServiceChange = (serviceId) => {\n        setSelectedServices(prev => {\n            if (prev.includes(serviceId)) {\n                return prev.filter(id => id !== serviceId);\n            } else {\n                return [...prev, serviceId];\n            }\n        });\n    };\n\n    return (\n        <>\n            <div className={styles.pageContainer}>\n                <h1 className={styles.header}>Đăng tải việc làm</h1>\n\n                <section className={styles.servicesGrid}>\n                    {regularServices.map((service, index) => (\n                        <JobUploadCard\n                            key={index}\n                            id={service.id}\n                            icon={service.icon}\n                            title={service.title}\n                            description={service.description}\n                            onComboSelect={showServiceModal}\n                        />\n                    ))}\n                </section>\n                <section className={styles.servicesGrid}>\n                    {specialServices.map((service, index) => (\n                        <JobUploadCard\n                            key={index}\n                            id={service.id}\n                            icon={service.icon}\n                            title={service.title}\n                            description={service.description}\n                            onComboSelect={showServiceModal}\n                        />\n                    ))}\n                </section>\n            </div>\n\n            {/* Service Selection Modal - keep this as a modal */}\n            <ServiceSelectionModal\n                isVisible={isServiceModalVisible}\n                onCancel={handleServiceCancel}\n                onOk={handleServiceOk}\n                selectedServices={selectedServices}\n                onServiceChange={onServiceChange}\n                allServices={allServices}\n            />\n        </>\n    );\n};\n\nexport default JobUpload;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/combo-service/JobUpload.jsx b/../FE/home-clean-fe/src/components/combo-service/JobUpload.jsx
--- a/../FE/home-clean-fe/src/components/combo-service/JobUpload.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/combo-service/JobUpload.jsx	(date 1743672482075)
@@ -1,9 +1,11 @@
-import React, { useState } from "react";
+import React, { useState, useEffect } from "react";
 import { Form, message } from "antd";
 import { useNavigate } from "react-router-dom";
 import styles from "./JobUpload.module.css";
 import JobUploadCard from "./JobUploadCard";
 import ServiceSelectionModal from "./ServiceSelectionModal";
+
+// Import all icons at the top level
 import donBep from "../../assets/icon-home/don-bep.svg";
 import donNhaVeSinh from "../../assets/icon-home/don-nha-vs.svg";
 import donPhongKhach from "../../assets/icon-home/phong-khach.svg";
@@ -13,142 +15,171 @@
 import donDepVanPhong from "../../assets/icon-home/don-van-phong.svg";
 import donDepTheoKy from "../../assets/icon-home/don-dinh-ky.svg";
 
+import { BASE_URL } from "../../utils/config";
+
+// Icon mapping outside of the component
+const iconMap = {
+  1: donPhongKhach,
+  2: donBep,
+  3: donPhongNgu,
+  4: donNhaVeSinh,
+  5: donDepSauTiec,
+  6: donDepNhaMoi,
+  7: donDepVanPhong,
+  8: donDepTheoKy,
+};
+
+// Function to map service IDs to their respective icons
+function getIconByServiceId(serviceId) {
+  return iconMap[serviceId] || donPhongKhach; // Default to phong khach icon if not found
+}
+
 const JobUpload = () => {
-    const navigate = useNavigate();
-    const [isServiceModalVisible, setIsServiceModalVisible] = useState(false);
-    const [selectedServices, setSelectedServices] = useState([]);
+  const navigate = useNavigate();
+  const [isServiceModalVisible, setIsServiceModalVisible] = useState(false);
+  const [selectedServices, setSelectedServices] = useState([]);
+  const [allServices, setAllServices] = useState([]);
+  const [loading, setLoading] = useState(true);
 
-    // Combined services array (regular + special)
-    const allServices = [
-        {
-            id: 1,
-            icon: donPhongKhach,
-            title: "Dọn phòng khách",
-            description: "Lau sàn, hút bụi, lau bàn ghế, cửa kính",
-        },
-        {
-            id: 2,
-            icon: donBep,
-            title: "Dọn phòng bếp",
-            description: "Gấp chăn gối, lau bụi, hút bụi, lau sàn",
-        },
-        {
-            id: 3,
-            icon: donPhongNgu,
-            title: "Dọn phòng ngủ",
-            description: "Gấp chăn gối, lau bụi, hút bụi, lau sàn",
-        },
-        {
-            id: 4,
-            icon: donNhaVeSinh,
-            title: "Dọn nhà vệ sinh",
-            description: "Gấp chăn gối, lau bụi, hút bụi, lau sàn",
-        },
-        {
-            id: 5,
-            icon: donDepSauTiec,
-            title: "Dọn dẹp theo Combo",
-            description: "Chọn nhiều dịch vụ cùng 1 lúc",
-        },
-        {
-            id: 6,
-            icon: donDepNhaMoi,
-            title: "Dọn dẹp nhà mới xây, sau sửa chữa",
-            description: "Mô tả dịch vụ",
-        },
-        {
-            id: 7,
-            icon: donDepVanPhong,
-            title: "Dọn dẹp văn phòng, cửa hàng",
-            description: "Mô tả dịch vụ",
-        },
-        {
-            id: 8,
-            icon: donDepTheoKy,
-            title: "Dọn dẹp nhà theo định kỳ",
-            description: "Mô tả dịch vụ",
-        },
-    ];
+  // Hardcoded combo service
+  const comboService = {
+    serviceId: 5,
+    serviceName: "Dọn dẹp theo Combo",
+    description: "Chọn nhiều dịch vụ cùng 1 lúc",
+  };
+
+  // Fetch services from API
+  useEffect(() => {
+    const fetchServices = async () => {
+      try {
+        setLoading(true);
+        const response = await fetch(`${BASE_URL}/services/all`);
+        if (!response.ok) {
+          throw new Error("Network response was not ok");
+        }
+        const data = await response.json();
 
-    // For display in the main page
-    const regularServices = allServices.slice(0, 4);
-    const specialServices = allServices.slice(4, 8);
+        // Filter out any service with ID 5 from the API response to avoid duplicates
+        const filteredServices = data.filter(
+          (service) => service.serviceId !== 5
+        );
+
+        // Set all services including our hardcoded combo service
+        setAllServices([...filteredServices, comboService]);
+        setLoading(false);
+      } catch (error) {
+        console.error("Error fetching services:", error);
+        message.error("Không thể tải dịch vụ. Vui lòng thử lại sau.");
+        setLoading(false);
+      }
+    };
+
+    fetchServices();
+  }, []);
+
+  // For display in the main page - split the services into two rows
+  // Get services with ID 1-4 for first row (excluding hardcoded combo)
+  const regularServices = allServices.filter(
+    (service) => service.serviceId !== 5 && service.serviceId <= 4
+  );
+
+  // Get services with ID > 4 for second row (including hardcoded combo)
+  const specialServices = allServices.filter(
+    (service) => service.serviceId >= 5
+  );
 
-    const showServiceModal = () => {
-        setIsServiceModalVisible(true);
-    };
+  const showServiceModal = () => {
+    setIsServiceModalVisible(true);
+  };
 
-    const handleServiceCancel = () => {
-        setIsServiceModalVisible(false);
-    };
+  const handleServiceCancel = () => {
+    setIsServiceModalVisible(false);
+  };
 
-    const handleServiceOk = () => {
-        if (selectedServices.length > 0) {
-            setIsServiceModalVisible(false);
-            // Navigate to the service details page instead of showing modal
-            navigate("/service-details-combo", {
-                state: {
-                    selectedServices,
-                    allServices
-                }
-            });
-        } else {
-            message.error('Vui lòng chọn ít nhất một dịch vụ!');
-        }
-    };
+  const handleServiceOk = () => {
+    if (selectedServices.length > 0) {
+      setIsServiceModalVisible(false);
+      // Navigate to the service details page instead of showing modal
+      navigate("/service-details-combo", {
+        state: {
+          selectedServices,
+          allServices,
+        },
+      });
+    } else {
+      message.error("Vui lòng chọn ít nhất một dịch vụ!");
+    }
+  };
 
-    const onServiceChange = (serviceId) => {
-        setSelectedServices(prev => {
-            if (prev.includes(serviceId)) {
-                return prev.filter(id => id !== serviceId);
-            } else {
-                return [...prev, serviceId];
-            }
-        });
-    };
+  const onServiceChange = (serviceId) => {
+    setSelectedServices((prev) => {
+      if (prev.includes(serviceId)) {
+        return prev.filter((id) => id !== serviceId);
+      } else {
+        return [...prev, serviceId];
+      }
+    });
+  };
 
-    return (
-        <>
-            <div className={styles.pageContainer}>
-                <h1 className={styles.header}>Đăng tải việc làm</h1>
+  if (loading) {
+    return <div className={styles.loading}>Đang tải dịch vụ...</div>;
+  }
+
+  return (
+    <>
+      <div className={styles.pageContainer}>
+        <h1 className={styles.header}>Đăng tải việc làm</h1>
 
-                <section className={styles.servicesGrid}>
-                    {regularServices.map((service, index) => (
-                        <JobUploadCard
-                            key={index}
-                            id={service.id}
-                            icon={service.icon}
-                            title={service.title}
-                            description={service.description}
-                            onComboSelect={showServiceModal}
-                        />
-                    ))}
-                </section>
-                <section className={styles.servicesGrid}>
-                    {specialServices.map((service, index) => (
-                        <JobUploadCard
-                            key={index}
-                            id={service.id}
-                            icon={service.icon}
-                            title={service.title}
-                            description={service.description}
-                            onComboSelect={showServiceModal}
-                        />
-                    ))}
-                </section>
-            </div>
+        <section className={styles.servicesGrid}>
+          {regularServices.map((service) => (
+            <JobUploadCard
+              key={service.serviceId}
+              id={service.serviceId}
+              icon={getIconByServiceId(service.serviceId)}
+              title={service.serviceName}
+              description={service.description}
+              onComboSelect={showServiceModal}
+            />
+          ))}
+        </section>
+        <section className={styles.servicesGrid}>
+          {/* Always include the hardcoded combo card first */}
+          <JobUploadCard
+            key={comboService.serviceId}
+            id={comboService.serviceId}
+            icon={donDepSauTiec}
+            title={comboService.serviceName}
+            description={comboService.description}
+            onComboSelect={showServiceModal}
+          />
+
+          {/* Then display other special services (excluding combo) */}
+          {specialServices
+            .filter((service) => service.serviceId !== 5)
+            .map((service) => (
+              <JobUploadCard
+                key={service.serviceId}
+                id={service.serviceId}
+                icon={getIconByServiceId(service.serviceId)}
+                title={service.serviceName}
+                description={service.description}
+                onComboSelect={showServiceModal}
+              />
+            ))}
+        </section>
+      </div>
 
-            {/* Service Selection Modal - keep this as a modal */}
-            <ServiceSelectionModal
-                isVisible={isServiceModalVisible}
-                onCancel={handleServiceCancel}
-                onOk={handleServiceOk}
-                selectedServices={selectedServices}
-                onServiceChange={onServiceChange}
-                allServices={allServices}
-            />
-        </>
-    );
+      {/* Service Selection Modal - keep this as a modal */}
+      <ServiceSelectionModal
+        isVisible={isServiceModalVisible}
+        onCancel={handleServiceCancel}
+        onOk={handleServiceOk}
+        selectedServices={selectedServices}
+        onServiceChange={onServiceChange}
+        allServices={allServices}
+      />
+    </>
+  );
 };
 
-export default JobUpload;
\ No newline at end of file
+export default JobUpload;
Index: ../FE/home-clean-fe/src/components/cleaner-details/PriceSection.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ChatIcon } from \"./ChatIcon\";\nimport styles from \"./styles.module.css\";\nimport ServiceSelectionModal from \"../../components/create-job-to-cleaner/ServiceSelectionModal\";\nimport donBep from \"../../assets/icon-home/don-bep.svg\";\nimport donNhaVeSinh from \"../../assets/icon-home/don-nha-vs.svg\";\nimport donPhongKhach from \"../../assets/icon-home/phong-khach.svg\";\nimport donPhongNgu from \"../../assets/icon-home/don-phong-ngu.svg\";\nimport donDepNhaMoi from \"../../assets/icon-home/nha-moi.svg\";\nimport donDepVanPhong from \"../../assets/icon-home/don-van-phong.svg\";\nimport donDepTheoKy from \"../../assets/icon-home/don-dinh-ky.svg\";\n\nexport const PriceSection = ({ cleanerId, cleanerName }) => {\n  const [isServiceModalVisible, setIsServiceModalVisible] = useState(false);\n  const [selectedServices, setSelectedServices] = useState([]);\n  const navigate = useNavigate();\n  const allServices = [\n    {\n      id: 1,\n      icon: donPhongKhach,\n      title: \"Dọn phòng khách\",\n      description: \"Lau sàn, hút bụi, lau bàn ghế, cửa kính\",\n    },\n    {\n      id: 2,\n      icon: donBep,\n      title: \"Dọn phòng bếp\",\n      description: \"Gấp chăn gối, lau bụi, hút bụi, lau sàn\",\n    },\n    {\n      id: 3,\n      icon: donPhongNgu,\n      title: \"Dọn phòng ngủ\",\n      description: \"Gấp chăn gối, lau bụi, hút bụi, lau sàn\",\n    },\n    {\n      id: 4,\n      icon: donNhaVeSinh,\n      title: \"Dọn nhà vệ sinh\",\n      description: \"Gấp chăn gối, lau bụi, hút bụi, lau sàn\",\n    },\n    {\n      id: 6,\n      icon: donDepNhaMoi,\n      title: \"Dọn dẹp nhà mới xây, sau sửa chữa\",\n      description: \"Mô tả dịch vụ\",\n    },\n    {\n      id: 7,\n      icon: donDepVanPhong,\n      title: \"Dọn dẹp văn phòng, cửa hàng\",\n      description: \"Mô tả dịch vụ\",\n    },\n    {\n      id: 8,\n      icon: donDepTheoKy,\n      title: \"Dọn dẹp nhà theo định kỳ\",\n      description: \"Mô tả dịch vụ\",\n    },\n  ];\n  const showServiceModal = () => {\n    setIsServiceModalVisible(true);\n  };\n\n  const handleServiceCancel = () => {\n    setIsServiceModalVisible(false);\n  };\n\n  const handleServiceOk = () => {\n    if (selectedServices.length === 0) {\n      return;\n    }\n\n    navigate(\"/service-details-cleaner\", {\n      state: {\n        selectedServices,\n        cleanerId,\n        cleanerName,\n        allServices\n      }\n    });\n\n    setIsServiceModalVisible(false);\n  };\n\n  const onServiceChange = (serviceId) => {\n    setSelectedServices(prev => {\n      if (prev.includes(serviceId)) {\n        return prev.filter(id => id !== serviceId);\n      } else {\n        return [...prev, serviceId];\n      }\n    });\n  };\n\n  return (\n    <section className={styles.priceSection}>\n      <div className={styles.actionButtons}>\n        {/* <button className={styles.chatButton}>\n          <ChatIcon />\n          <span>Chat ngay</span>\n        </button> */}\n        <button className={styles.hireButton} onClick={showServiceModal}>Thuê ngay</button>\n      </div>\n\n      <ServiceSelectionModal\n        isVisible={isServiceModalVisible}\n        onCancel={handleServiceCancel}\n        onOk={handleServiceOk}\n        selectedServices={selectedServices}\n        onServiceChange={onServiceChange}\n        allServices={allServices}\n      />\n    </section>\n  );\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/cleaner-details/PriceSection.jsx b/../FE/home-clean-fe/src/components/cleaner-details/PriceSection.jsx
--- a/../FE/home-clean-fe/src/components/cleaner-details/PriceSection.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/cleaner-details/PriceSection.jsx	(date 1743672482073)
@@ -1,4 +1,4 @@
-import React, { useState } from "react";
+import React, { useState, useEffect } from "react";
 import { useNavigate } from "react-router-dom";
 import { ChatIcon } from "./ChatIcon";
 import styles from "./styles.module.css";
@@ -10,55 +10,68 @@
 import donDepNhaMoi from "../../assets/icon-home/nha-moi.svg";
 import donDepVanPhong from "../../assets/icon-home/don-van-phong.svg";
 import donDepTheoKy from "../../assets/icon-home/don-dinh-ky.svg";
+import { BASE_URL } from "../../utils/config";
+// Icon mapping outside of the component
+const iconMap = {
+  1: donPhongKhach,
+  2: donBep,
+  3: donPhongNgu,
+  4: donNhaVeSinh,
+  6: donDepNhaMoi,
+  7: donDepVanPhong,
+  8: donDepTheoKy,
+};
+
+// Function to map service IDs to their respective icons
+function getIconByServiceId(serviceId) {
+  return iconMap[serviceId] || donPhongKhach; // Default to phong khach icon if not found
+}
 
-export const PriceSection = ({ cleanerId, cleanerName }) => {
+// Function to truncate description
+function truncateDescription(description) {
+  return description && description.length > 100
+    ? `${description.substring(0, 35)}...`
+    : description;
+}
+
+const PriceSection = ({ cleanerId, cleanerName }) => {
   const [isServiceModalVisible, setIsServiceModalVisible] = useState(false);
   const [selectedServices, setSelectedServices] = useState([]);
+  const [allServices, setAllServices] = useState([]);
+  const [loading, setLoading] = useState(false);
   const navigate = useNavigate();
-  const allServices = [
-    {
-      id: 1,
-      icon: donPhongKhach,
-      title: "Dọn phòng khách",
-      description: "Lau sàn, hút bụi, lau bàn ghế, cửa kính",
-    },
-    {
-      id: 2,
-      icon: donBep,
-      title: "Dọn phòng bếp",
-      description: "Gấp chăn gối, lau bụi, hút bụi, lau sàn",
-    },
-    {
-      id: 3,
-      icon: donPhongNgu,
-      title: "Dọn phòng ngủ",
-      description: "Gấp chăn gối, lau bụi, hút bụi, lau sàn",
-    },
-    {
-      id: 4,
-      icon: donNhaVeSinh,
-      title: "Dọn nhà vệ sinh",
-      description: "Gấp chăn gối, lau bụi, hút bụi, lau sàn",
-    },
-    {
-      id: 6,
-      icon: donDepNhaMoi,
-      title: "Dọn dẹp nhà mới xây, sau sửa chữa",
-      description: "Mô tả dịch vụ",
-    },
-    {
-      id: 7,
-      icon: donDepVanPhong,
-      title: "Dọn dẹp văn phòng, cửa hàng",
-      description: "Mô tả dịch vụ",
-    },
-    {
-      id: 8,
-      icon: donDepTheoKy,
-      title: "Dọn dẹp nhà theo định kỳ",
-      description: "Mô tả dịch vụ",
-    },
-  ];
+
+  useEffect(() => {
+    const fetchServices = async () => {
+      try {
+        setLoading(true);
+        const response = await fetch(`${BASE_URL}/services/all`);
+        if (!response.ok) {
+          throw new Error("Network response was not ok");
+        }
+        const data = await response.json();
+
+        // Map the fetched services to include icons and truncate descriptions
+        const servicesWithIcons = data.map((service) => ({
+          ...service,
+          id: service.serviceId,
+          title: service.serviceName,
+          icon: getIconByServiceId(service.serviceId),
+          description: truncateDescription(service.description),
+        }));
+
+        setAllServices(servicesWithIcons);
+        setLoading(false);
+      } catch (error) {
+        console.error("Error fetching services:", error);
+        // Add error handling here if needed
+        setLoading(false);
+      }
+    };
+
+    fetchServices();
+  }, []);
+
   const showServiceModal = () => {
     setIsServiceModalVisible(true);
   };
@@ -77,17 +90,17 @@
         selectedServices,
         cleanerId,
         cleanerName,
-        allServices
-      }
+        allServices,
+      },
     });
 
     setIsServiceModalVisible(false);
   };
 
   const onServiceChange = (serviceId) => {
-    setSelectedServices(prev => {
+    setSelectedServices((prev) => {
       if (prev.includes(serviceId)) {
-        return prev.filter(id => id !== serviceId);
+        return prev.filter((id) => id !== serviceId);
       } else {
         return [...prev, serviceId];
       }
@@ -101,7 +114,9 @@
           <ChatIcon />
           <span>Chat ngay</span>
         </button> */}
-        <button className={styles.hireButton} onClick={showServiceModal}>Thuê ngay</button>
+        <button className={styles.hireButton} onClick={showServiceModal}>
+          Thuê ngay
+        </button>
       </div>
 
       <ServiceSelectionModal
@@ -111,7 +126,10 @@
         selectedServices={selectedServices}
         onServiceChange={onServiceChange}
         allServices={allServices}
+        loading={loading}
       />
     </section>
   );
-};
\ No newline at end of file
+};
+
+export default PriceSection;
Index: ../FE/home-clean-fe/src/components/cleaner-details/TabsSection.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\nimport { Tabs, Rate, Typography, Card, Spin, Empty } from 'antd';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { BASE_URL } from '../../utils/config';\n\nconst { Text, Paragraph } = Typography;\n\nexport const TabsSection = () => {\n  const [feedbacks, setFeedbacks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Extract cleanerId from URL\n  const { cleanerId } = useParams();\n\n  const fetchFeedbacks = async () => {\n    // Retrieve token from localStorage\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      setError('Không tìm thấy token đăng nhập');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(`${BASE_URL}/customer/cleaners/${cleanerId}/feedbacks`, {\n        headers: {\n          'accept': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setFeedbacks(response.data);\n    } catch (err) {\n      setError('Không thể tải đánh giá');\n      console.error('Feedback fetch error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const tabItems = [\n    {\n      key: 'info',\n      label: 'Thông tin',\n      children: (\n        <Paragraph>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n          veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n          commodo consequat.\n        </Paragraph>\n      ),\n    },\n    {\n      key: 'reviews',\n      label: 'Đánh giá',\n      children: (\n        <div>\n          {isLoading ? (\n            <Spin tip=\"Đang tải đánh giá...\" fullscreen />\n          ) : error ? (\n            <Empty\n              description=\"Rất tiếc, đã có lỗi xảy ra\"\n              image={Empty.PRESENTED_IMAGE_SIMPLE}\n            />\n          ) : feedbacks.length === 0 ? (\n            <Empty\n              description=\"Chưa có đánh giá nào\"\n              imageStyle={{\n                height: 160,\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              {/* <Paragraph type=\"secondary\" style={{ textAlign: 'center', marginBottom: 16 }}>\n                Người làm việc này chưa nhận được đánh giá nào.\n                Hãy trở thành người đầu tiên đánh giá!\n              </Paragraph> */}\n            </Empty>\n          ) : (\n            feedbacks.map((feedback, index) => (\n              <Card\n                key={index}\n                style={{\n                  marginBottom: 16,\n                }}\n              >\n                <div style={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'center',\n                  marginBottom: 12\n                }}>\n                  <Text type=\"secondary\">Công việc #{feedback.jobId}</Text>\n                  <Rate\n                    disabled\n                    value={feedback.rating}\n                    style={{ color: '#FFC107' }}\n                  />\n                </div>\n                <Paragraph>\n                  {feedback.comment}\n                </Paragraph>\n              </Card>\n            ))\n          )}\n        </div>\n      ),\n    }\n  ];\n\n  useEffect(() => {\n    if (cleanerId) {\n      fetchFeedbacks();\n    }\n  }, [cleanerId]);\n\n  return (\n    <Tabs\n      defaultActiveKey=\"info\"\n      items={tabItems}\n      style={{ width: '100%' }}\n    />\n  );\n};\n\nexport default TabsSection;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/cleaner-details/TabsSection.jsx b/../FE/home-clean-fe/src/components/cleaner-details/TabsSection.jsx
--- a/../FE/home-clean-fe/src/components/cleaner-details/TabsSection.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/cleaner-details/TabsSection.jsx	(date 1743672482074)
@@ -1,8 +1,8 @@
-import React, { useState, useEffect } from 'react';
-import { Tabs, Rate, Typography, Card, Spin, Empty } from 'antd';
-import axios from 'axios';
-import { useParams } from 'react-router-dom';
-import { BASE_URL } from '../../utils/config';
+import React, { useState, useEffect } from "react";
+import { Tabs, Rate, Typography, Card, Spin, Empty } from "antd";
+import axios from "axios";
+import { useParams } from "react-router-dom";
+import { BASE_URL } from "../../utils/config";
 
 const { Text, Paragraph } = Typography;
 
@@ -16,26 +16,29 @@
 
   const fetchFeedbacks = async () => {
     // Retrieve token from localStorage
-    const token = localStorage.getItem('token');
+    const token = localStorage.getItem("token");
 
     if (!token) {
-      setError('Không tìm thấy token đăng nhập');
+      setError("Không tìm thấy token đăng nhập");
       return;
     }
 
     setIsLoading(true);
     setError(null);
     try {
-      const response = await axios.get(`${BASE_URL}/customer/cleaners/${cleanerId}/feedbacks`, {
-        headers: {
-          'accept': 'application/json',
-          'Authorization': `Bearer ${token}`
+      const response = await axios.get(
+        `${BASE_URL}/customer/cleaners/${cleanerId}/feedbacks`,
+        {
+          headers: {
+            accept: "application/json",
+            Authorization: `Bearer ${token}`,
+          },
         }
-      });
+      );
       setFeedbacks(response.data);
     } catch (err) {
-      setError('Không thể tải đánh giá');
-      console.error('Feedback fetch error:', err);
+      setError("Không thể tải đánh giá");
+      console.error("Feedback fetch error:", err);
     } finally {
       setIsLoading(false);
     }
@@ -43,21 +46,21 @@
 
   const tabItems = [
     {
-      key: 'info',
-      label: 'Thông tin',
-      children: (
+      key: "info",
+      label: "Thông tin",
+      items: (
         <Paragraph>
-          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
-          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
-          veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
-          commodo consequat.
+          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
+          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
+          minim veniam, quis nostrud exercitation ullamco laboris nisi ut
+          aliquip ex ea commodo consequat.
         </Paragraph>
       ),
     },
     {
-      key: 'reviews',
-      label: 'Đánh giá',
-      children: (
+      key: "reviews",
+      label: "Đánh giá",
+      items: (
         <div>
           {isLoading ? (
             <Spin tip="Đang tải đánh giá..." fullscreen />
@@ -71,10 +74,10 @@
               description="Chưa có đánh giá nào"
               imageStyle={{
                 height: 160,
-                display: 'flex',
-                flexDirection: 'column',
-                justifyContent: 'center',
-                alignItems: 'center',
+                display: "flex",
+                flexDirection: "column",
+                justifyContent: "center",
+                alignItems: "center",
               }}
             >
               {/* <Paragraph type="secondary" style={{ textAlign: 'center', marginBottom: 16 }}>
@@ -90,28 +93,28 @@
                   marginBottom: 16,
                 }}
               >
-                <div style={{
-                  display: 'flex',
-                  justifyContent: 'space-between',
-                  alignItems: 'center',
-                  marginBottom: 12
-                }}>
+                <div
+                  style={{
+                    display: "flex",
+                    justifyContent: "space-between",
+                    alignItems: "center",
+                    marginBottom: 12,
+                  }}
+                >
                   <Text type="secondary">Công việc #{feedback.jobId}</Text>
                   <Rate
                     disabled
                     value={feedback.rating}
-                    style={{ color: '#FFC107' }}
+                    style={{ color: "#FFC107" }}
                   />
                 </div>
-                <Paragraph>
-                  {feedback.comment}
-                </Paragraph>
+                <Paragraph>{feedback.comment}</Paragraph>
               </Card>
             ))
           )}
         </div>
       ),
-    }
+    },
   ];
 
   useEffect(() => {
@@ -121,12 +124,8 @@
   }, [cleanerId]);
 
   return (
-    <Tabs
-      defaultActiveKey="info"
-      items={tabItems}
-      style={{ width: '100%' }}
-    />
+    <Tabs defaultActiveKey="info" items={tabItems} style={{ width: "100%" }} />
   );
 };
 
-export default TabsSection;
\ No newline at end of file
+export default TabsSection;
Index: ../FE/home-clean-fe/src/components/combo-service/JobUploadCard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./JobUpload.module.css\";\n\nconst JobUploadCard = ({ id, icon, title, description, onComboSelect }) => {\n    // Handle click for service with ID 5 (Combo service)\n    const handleServiceClick = () => {\n        if (id === 5) {\n            onComboSelect();\n        }\n    };\n\n    return (\n        <div className={styles.serviceCard}>\n            <div className={styles.iconWrapper}>\n                <img src={icon} alt={title} className={styles.serviceIcon} />\n            </div>\n            <div className={styles.serviceContent}>\n                <h3 className={styles.serviceTitle}>{title}</h3>\n                <p className={styles.serviceDescription}>{description}</p>\n                {id === 5 ? (\n                    <button className={styles.serviceButton} onClick={handleServiceClick}>\n                        Đăng việc\n                    </button>\n                ) : (\n                    <button className={styles.serviceButton}>\n                        <Link to={`/service/${id}`} state={id} style={{ textDecoration: \"none\", color: \"#29322e\" }}>\n                            Đăng việc\n                        </Link>\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default JobUploadCard;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/combo-service/JobUploadCard.jsx b/../FE/home-clean-fe/src/components/combo-service/JobUploadCard.jsx
--- a/../FE/home-clean-fe/src/components/combo-service/JobUploadCard.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/combo-service/JobUploadCard.jsx	(date 1743672482075)
@@ -3,35 +3,45 @@
 import styles from "./JobUpload.module.css";
 
 const JobUploadCard = ({ id, icon, title, description, onComboSelect }) => {
-    // Handle click for service with ID 5 (Combo service)
-    const handleServiceClick = () => {
-        if (id === 5) {
-            onComboSelect();
-        }
-    };
+  // Handle click for service with ID 5 (Combo service)
+  const handleServiceClick = () => {
+    if (id === 5) {
+      onComboSelect();
+    }
+  };
 
-    return (
-        <div className={styles.serviceCard}>
-            <div className={styles.iconWrapper}>
-                <img src={icon} alt={title} className={styles.serviceIcon} />
-            </div>
-            <div className={styles.serviceContent}>
-                <h3 className={styles.serviceTitle}>{title}</h3>
-                <p className={styles.serviceDescription}>{description}</p>
-                {id === 5 ? (
-                    <button className={styles.serviceButton} onClick={handleServiceClick}>
-                        Đăng việc
-                    </button>
-                ) : (
-                    <button className={styles.serviceButton}>
-                        <Link to={`/service/${id}`} state={id} style={{ textDecoration: "none", color: "#29322e" }}>
-                            Đăng việc
-                        </Link>
-                    </button>
-                )}
-            </div>
-        </div>
-    );
+  // Truncate description if it's too long
+  const truncatedDescription =
+    description && description.length > 100
+      ? `${description.substring(0, 35)}...`
+      : description;
+
+  return (
+    <div className={styles.serviceCard}>
+      <div className={styles.iconWrapper}>
+        <img src={icon} alt={title} className={styles.serviceIcon} />
+      </div>
+      <div className={styles.serviceContent}>
+        <h3 className={styles.serviceTitle}>{title}</h3>
+        <p className={styles.serviceDescription}>{truncatedDescription}</p>
+        {id === 5 ? (
+          <button className={styles.serviceButton} onClick={handleServiceClick}>
+            Đăng việc
+          </button>
+        ) : (
+          <button className={styles.serviceButton}>
+            <Link
+              to={`/service/${id}`}
+              state={id}
+              style={{ textDecoration: "none", color: "#29322e" }}
+            >
+              Đăng việc
+            </Link>
+          </button>
+        )}
+      </div>
+    </div>
+  );
 };
 
-export default JobUploadCard;
\ No newline at end of file
+export default JobUploadCard;
Index: ../FE/home-clean-fe/src/components/combo-service/ServiceSelectionModal.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\nimport { Modal, Button, Checkbox } from \"antd\";\nimport styles from \"./JobUpload.module.css\";\n\nconst ServiceSelectionModal = ({\n    isVisible,\n    onCancel,\n    onOk,\n    selectedServices,\n    onServiceChange,\n    allServices\n}) => {\n    return (\n        <Modal\n            title=\"Chọn dịch vụ\"\n            open={isVisible}\n            onCancel={onCancel}\n            footer={[\n                <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\n                    <Button key=\"cancel\" onClick={onCancel} style={{ borderRadius: '4px' }}>\n                        Huỷ\n                    </Button>\n                    <Button\n                        key=\"continue\"\n                        type=\"primary\"\n                        onClick={onOk}\n                        style={{\n                            backgroundColor: '#039855',\n                            borderColor: '#039855',\n                            borderRadius: '4px',\n                            display: 'flex',\n                            alignItems: 'center'\n                        }}\n                    >\n                        Tiếp tục <span style={{ marginLeft: '4px' }}>→</span>\n                    </Button>\n                </div>\n            ]}\n            width={800}\n        >\n            <p>Chọn những dịch vụ bạn muốn</p>\n            <div className={styles.serviceCheckboxGrid}>\n                {allServices.filter(service => service.id !== 5).map((service) => (\n                    <div\n                        key={service.id}\n                        className={`${styles.serviceCheckboxItem} ${selectedServices.includes(service.id) ? styles.serviceCheckboxItemSelected : ''}`}\n                        style={{\n                            border: selectedServices.includes(service.id) ? '1px solid #039855' : '1px solid #e6e6e6',\n                            borderRadius: '8px',\n                            padding: '16px',\n                            textAlign: 'center',\n                            cursor: 'pointer',\n                        }}\n                        onClick={() => onServiceChange(service.id)}\n                    >\n                        <div style={{ marginBottom: '8px' }}>\n                            <img\n                                src={service.icon}\n                                alt={service.title}\n                                style={{ width: '40px', height: '40px' }}\n                            />\n                        </div>\n                        <div style={{ fontWeight: '500', marginBottom: '4px' }}>\n                            {service.title}\n                        </div>\n                        <div style={{ fontSize: '12px', color: '#8c8c8c' }}>\n                            {service.description}\n                        </div>\n                        <div style={{\n                            marginTop: '12px',\n                            display: 'flex',\n                            justifyContent: 'center'\n                        }}>\n                            <Checkbox\n                                checked={selectedServices.includes(service.id)}\n                                className={styles.serviceCheckbox}\n                                onChange={(e) => e.stopPropagation()}\n                            />\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </Modal>\n    );\n};\n\nexport default ServiceSelectionModal;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/combo-service/ServiceSelectionModal.jsx b/../FE/home-clean-fe/src/components/combo-service/ServiceSelectionModal.jsx
--- a/../FE/home-clean-fe/src/components/combo-service/ServiceSelectionModal.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/combo-service/ServiceSelectionModal.jsx	(date 1743672482076)
@@ -2,86 +2,127 @@
 import { Modal, Button, Checkbox } from "antd";
 import styles from "./JobUpload.module.css";
 
+// Import icons
+import donBep from "../../assets/icon-home/don-bep.svg";
+import donNhaVeSinh from "../../assets/icon-home/don-nha-vs.svg";
+import donPhongKhach from "../../assets/icon-home/phong-khach.svg";
+import donPhongNgu from "../../assets/icon-home/don-phong-ngu.svg";
+import donDepSauTiec from "../../assets/icon-home/don-sk.svg";
+import donDepNhaMoi from "../../assets/icon-home/nha-moi.svg";
+import donDepVanPhong from "../../assets/icon-home/don-van-phong.svg";
+import donDepTheoKy from "../../assets/icon-home/don-dinh-ky.svg";
+
+// Icon mapping
+const iconMap = {
+  1: donPhongKhach,
+  2: donBep,
+  3: donPhongNgu,
+  4: donNhaVeSinh,
+  5: donDepSauTiec,
+  6: donDepNhaMoi,
+  7: donDepVanPhong,
+  8: donDepTheoKy,
+};
+
 const ServiceSelectionModal = ({
-    isVisible,
-    onCancel,
-    onOk,
-    selectedServices,
-    onServiceChange,
-    allServices
+  isVisible,
+  onCancel,
+  onOk,
+  selectedServices,
+  onServiceChange,
+  allServices,
 }) => {
-    return (
-        <Modal
-            title="Chọn dịch vụ"
-            open={isVisible}
-            onCancel={onCancel}
-            footer={[
-                <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>
-                    <Button key="cancel" onClick={onCancel} style={{ borderRadius: '4px' }}>
-                        Huỷ
-                    </Button>
-                    <Button
-                        key="continue"
-                        type="primary"
-                        onClick={onOk}
-                        style={{
-                            backgroundColor: '#039855',
-                            borderColor: '#039855',
-                            borderRadius: '4px',
-                            display: 'flex',
-                            alignItems: 'center'
-                        }}
-                    >
-                        Tiếp tục <span style={{ marginLeft: '4px' }}>→</span>
-                    </Button>
-                </div>
-            ]}
-            width={800}
-        >
-            <p>Chọn những dịch vụ bạn muốn</p>
-            <div className={styles.serviceCheckboxGrid}>
-                {allServices.filter(service => service.id !== 5).map((service) => (
-                    <div
-                        key={service.id}
-                        className={`${styles.serviceCheckboxItem} ${selectedServices.includes(service.id) ? styles.serviceCheckboxItemSelected : ''}`}
-                        style={{
-                            border: selectedServices.includes(service.id) ? '1px solid #039855' : '1px solid #e6e6e6',
-                            borderRadius: '8px',
-                            padding: '16px',
-                            textAlign: 'center',
-                            cursor: 'pointer',
-                        }}
-                        onClick={() => onServiceChange(service.id)}
-                    >
-                        <div style={{ marginBottom: '8px' }}>
-                            <img
-                                src={service.icon}
-                                alt={service.title}
-                                style={{ width: '40px', height: '40px' }}
-                            />
-                        </div>
-                        <div style={{ fontWeight: '500', marginBottom: '4px' }}>
-                            {service.title}
-                        </div>
-                        <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
-                            {service.description}
-                        </div>
-                        <div style={{
-                            marginTop: '12px',
-                            display: 'flex',
-                            justifyContent: 'center'
-                        }}>
-                            <Checkbox
-                                checked={selectedServices.includes(service.id)}
-                                className={styles.serviceCheckbox}
-                                onChange={(e) => e.stopPropagation()}
-                            />
-                        </div>
-                    </div>
-                ))}
-            </div>
-        </Modal>
-    );
+  return (
+    <Modal
+      title="Chọn dịch vụ"
+      open={isVisible}
+      onCancel={onCancel}
+      footer={[
+        <div
+          style={{ display: "flex", justifyContent: "flex-end", gap: "10px" }}
+        >
+          <Button
+            key="cancel"
+            onClick={onCancel}
+            style={{ borderRadius: "4px" }}
+          >
+            Huỷ
+          </Button>
+          <Button
+            key="continue"
+            type="primary"
+            onClick={onOk}
+            style={{
+              backgroundColor: "#039855",
+              borderColor: "#039855",
+              borderRadius: "4px",
+              display: "flex",
+              alignItems: "center",
+            }}
+          >
+            Tiếp tục <span style={{ marginLeft: "4px" }}>→</span>
+          </Button>
+        </div>,
+      ]}
+      width={800}
+    >
+      <p>Chọn những dịch vụ bạn muốn</p>
+      <div className={styles.serviceCheckboxGrid}>
+        {allServices
+          // Filter out the combo service (ID: 5)
+          .filter((service) => service.serviceId !== 5)
+          .map((service) => (
+            <div
+              key={service.serviceId}
+              className={`${styles.serviceCheckboxItem} ${
+                selectedServices.includes(service.serviceId)
+                  ? styles.serviceCheckboxItemSelected
+                  : ""
+              }`}
+              style={{
+                border: selectedServices.includes(service.serviceId)
+                  ? "1px solid #039855"
+                  : "1px solid #e6e6e6",
+                borderRadius: "8px",
+                padding: "16px",
+                textAlign: "center",
+                cursor: "pointer",
+              }}
+              onClick={() => onServiceChange(service.serviceId)}
+            >
+              <div style={{ marginBottom: "8px" }}>
+                <img
+                  src={iconMap[service.serviceId]}
+                  alt={service.serviceName}
+                  style={{ width: "40px", height: "40px" }}
+                />
+              </div>
+              <div style={{ fontWeight: "500", marginBottom: "4px" }}>
+                {service.serviceName}
+              </div>
+              <div style={{ fontSize: "12px", color: "#8c8c8c" }}>
+                {service.description && service.description.length > 80
+                  ? `${service.description.substring(0, 77)}...`
+                  : service.description}
+              </div>
+              <div
+                style={{
+                  marginTop: "12px",
+                  display: "flex",
+                  justifyContent: "center",
+                }}
+              >
+                <Checkbox
+                  checked={selectedServices.includes(service.serviceId)}
+                  className={styles.serviceCheckbox}
+                  onChange={(e) => e.stopPropagation()}
+                />
+              </div>
+            </div>
+          ))}
+      </div>
+    </Modal>
+  );
 };
 
-export default ServiceSelectionModal;
\ No newline at end of file
+export default ServiceSelectionModal;
Index: ../FE/home-clean-fe/src/components/profile/cleanner/personal_information.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../../../context/AuthContext\";\nimport \"../owner/profile.css\";\nimport profileImg from \"../../../assets/imgProfile/imgProfile.svg\";\nimport { message } from \"antd\";\n\nexport const PersonaInformation = () => {\n    const { cleaner, dispatch } = useContext(AuthContext);\n\n\n    const [cleanerName, setName] = useState(cleaner?.cleanerName || \"\");\n    const [cleanerPhone, setPhone] = useState(cleaner?.cleanerPhone || \"\");\n    const [cleanerEmail, setEmail] = useState(cleaner?.cleanerEmail || \"\");\n    const [cleanerAge, setAge] = useState(cleaner?.cleanerAge || \"\");\n    const [cleanerAddress, setAddress] = useState(cleaner?.cleanerAddress || \"\");\n    const [cleanerIDnum, setIdentityNumber] = useState(cleaner?.cleanerIDnum || \"\");\n    const [cleanerExp, setExperience] = useState(cleaner?.cleanerExp || \"\");\n    const [cleanerImg, setImg] = useState(cleaner?.cleanerImg || \"\");\n\n    // Hàm xử lý lưu thông tin từng trường\n    const handleSave = (field, value) => {\n        const updatedData = { ...cleaner, [field]: value };\n        dispatch({ type: \"UPDATE_USER\", payload: updatedData });\n        message.success(`${field} đã được cập nhật!`);\n\n    };\n\n\n    useEffect(() => {\n        if (cleaner) {\n            // Nếu có thông tin cleaner trong context, cập nhật các trường input\n            setName(cleaner.cleanerName || \"\");\n            setPhone(cleaner.cleanerPhone || \"\");\n            setEmail(cleaner.cleanerEmail || \"\");\n            setAge(cleaner.cleanerAge || \"\");\n            setAddress(cleaner.cleanerAddress || \"\");\n            setIdentityNumber(cleaner.cleanerIDnum || \"\");\n            setExperience(cleaner.cleanerExp || \"\");\n            if (cleaner.profile_image) {\n                setImg(`data:image/png;base64,${cleaner.profile_image}`);\n            } else {\n                setImg(profileImg); // Ảnh mặc định nếu không có ảnh từ API\n            }\n        } else {\n            // Nếu không có thông tin cleaner, reset các giá trị về mặc định\n            setName(\"\");\n            setPhone(\"\");\n            setEmail(\"\");\n            setAge(\"\");\n            setAddress(\"\");\n            setIdentityNumber(\"\");\n            setExperience(\"\");\n            setImg(profileImg);\n        }\n    }, [cleaner]);\n\n    return (\n        <div className=\"persona-container\">\n            <div className=\"persona-header\">\n                <strong>Thông tin cá nhân</strong>\n                <p className=\"persona-subtext\">Quản lý thông tin cá nhân của tài khoản bạn</p>\n            </div>\n\n            <div className=\"avatar-section\">\n                <b>Ảnh đại diện</b>\n                <img className=\"avatar-image\" src={cleanerImg} alt=\"icon\" />\n                <b><u className=\"avatar-select\">Chọn ảnh</u></b>\n            </div>\n\n            <div className=\"form-group\">\n                <b>Họ và tên</b>\n                <input type=\"text\" value={cleanerName} onChange={(e) => setName(e.target.value)} />\n            </div>\n\n            <div className=\"form-group\">\n                <b>Số điện thoại</b>\n                <input type=\"text\" value={cleanerPhone} onChange={(e) => setPhone(e.target.value)} />\n            </div>\n\n            <div className=\"form-group\">\n                <b>Email</b>\n                <input type=\"email\" value={cleanerEmail} onChange={(e) => setEmail(e.target.value)} />\n            </div>\n\n            <div className=\"form-group\">\n                <b>Tuổi</b>\n                <input type=\"text\" value={cleanerAge} onChange={(e) => setAge(e.target.value)} />\n            </div>\n\n            <div className=\"form-group\">\n                <b>Địa chỉ</b>\n                <input type=\"text\" value={cleanerAddress} onChange={(e) => setAddress(e.target.value)} />\n            </div>\n\n            <div className=\"form-group\">\n                <b>Số CCCD</b>\n                <input type=\"text\" value={cleanerIDnum} onChange={(e) => setIdentityNumber(e.target.value)} />\n            </div>\n\n\n            <div className=\"form-group\">\n                <b>Kinh nghiệm</b>\n                <input type=\"text\" value={cleanerExp} onChange={(e) => setExperience(e.target.value)} />\n            </div>\n\n\n            {/* Nút Lưu và Đăng xuất */}\n            <div className=\"button-group\">\n                <button className=\"save-button\" type=\"button\" onClick={handleSave}>\n                    Lưu\n                </button>\n            </div>\n        </div>\n    );\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/profile/cleanner/personal_information.jsx b/../FE/home-clean-fe/src/components/profile/cleanner/personal_information.jsx
--- a/../FE/home-clean-fe/src/components/profile/cleanner/personal_information.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/profile/cleanner/personal_information.jsx	(date 1743672482077)
@@ -4,113 +4,215 @@
 import "../owner/profile.css";
 import profileImg from "../../../assets/imgProfile/imgProfile.svg";
 import { message } from "antd";
+import { BASE_URL } from "../../../utils/config";
 
 export const PersonaInformation = () => {
-    const { cleaner, dispatch } = useContext(AuthContext);
-
+  const { cleaner, dispatch } = useContext(AuthContext);
+  const [isLoading, setIsLoading] = useState(false);
 
-    const [cleanerName, setName] = useState(cleaner?.cleanerName || "");
-    const [cleanerPhone, setPhone] = useState(cleaner?.cleanerPhone || "");
-    const [cleanerEmail, setEmail] = useState(cleaner?.cleanerEmail || "");
-    const [cleanerAge, setAge] = useState(cleaner?.cleanerAge || "");
-    const [cleanerAddress, setAddress] = useState(cleaner?.cleanerAddress || "");
-    const [cleanerIDnum, setIdentityNumber] = useState(cleaner?.cleanerIDnum || "");
-    const [cleanerExp, setExperience] = useState(cleaner?.cleanerExp || "");
-    const [cleanerImg, setImg] = useState(cleaner?.cleanerImg || "");
+  const [cleanerName, setName] = useState(cleaner?.cleanerName || "");
+  const [cleanerPhone, setPhone] = useState(cleaner?.cleanerPhone || "");
+  const [cleanerEmail, setEmail] = useState(cleaner?.cleanerEmail || "");
+  const [cleanerAge, setAge] = useState(cleaner?.cleanerAge || "");
+  const [cleanerAddress, setAddress] = useState(cleaner?.cleanerAddress || "");
+  const [cleanerIDnum, setIdentityNumber] = useState(
+    cleaner?.cleanerIDnum || ""
+  );
+  const [cleanerExp, setExperience] = useState(cleaner?.cleanerExp || "");
+  const [cleanerImg, setImg] = useState(cleaner?.cleanerImg || "");
 
-    // Hàm xử lý lưu thông tin từng trường
-    const handleSave = (field, value) => {
-        const updatedData = { ...cleaner, [field]: value };
-        dispatch({ type: "UPDATE_USER", payload: updatedData });
-        message.success(`${field} đã được cập nhật!`);
+  // Update API call function
+  const updateProfileAPI = async () => {
+    const token = localStorage.getItem("token");
+    const cleanerId = localStorage.getItem("cleanerId");
+    if (!cleanerId || !token) {
+      message.error("Không tìm thấy thông tin người dùng!");
+      return;
+    }
+
+    setIsLoading(true);
+    try {
+      const response = await fetch(
+        `${BASE_URL}/employee/${cleanerId}/update_profile`,
+        {
+          method: "PATCH",
+          headers: {
+            "Content-Type": "application/json",
+            accept: "application/json",
+            Authorization: `Bearer ${token}`,
+          },
+          body: JSON.stringify({
+            name: cleanerName,
+            phone: cleanerPhone,
+            email: cleanerEmail,
+            age: parseInt(cleanerAge),
+            identity_number: cleanerIDnum,
+            experience: cleanerExp,
+          }),
+        }
+      );
+
+      if (!response.ok) {
+        throw new Error(`Error: ${response.status}`);
+      }
+
+      // Update context with new data
+      const updatedData = {
+        ...cleaner,
+        cleanerName: cleanerName,
+        cleanerPhone: cleanerPhone,
+        cleanerEmail: cleanerEmail,
+        cleanerAge: cleanerAge,
+        cleanerIDnum: cleanerIDnum,
+        cleanerExp: cleanerExp,
+      };
+
+      dispatch({ type: "UPDATE_CLEANER", payload: updatedData });
+      message.success("Cập nhật thông tin thành công!");
+    } catch (error) {
+      message.error("Cập nhật thông tin thất bại!");
+    } finally {
+      setIsLoading(false);
+    }
+  };
 
-    };
+  // Hàm xử lý lưu tất cả thông tin
+  const handleSave = () => {
+    updateProfileAPI();
+  };
 
+  // Hàm xử lý upload ảnh (cần bổ sung API upload ảnh)
+  const handleImageUpload = (event) => {
+    const file = event.target.files[0];
+    if (file) {
+      // Here you would implement image upload API
+      const reader = new FileReader();
+      reader.onloadend = () => {
+        setImg(reader.result);
+      };
+      reader.readAsDataURL(file);
+    }
+  };
 
-    useEffect(() => {
-        if (cleaner) {
-            // Nếu có thông tin cleaner trong context, cập nhật các trường input
-            setName(cleaner.cleanerName || "");
-            setPhone(cleaner.cleanerPhone || "");
-            setEmail(cleaner.cleanerEmail || "");
-            setAge(cleaner.cleanerAge || "");
-            setAddress(cleaner.cleanerAddress || "");
-            setIdentityNumber(cleaner.cleanerIDnum || "");
-            setExperience(cleaner.cleanerExp || "");
-            if (cleaner.profile_image) {
-                setImg(`data:image/png;base64,${cleaner.profile_image}`);
-            } else {
-                setImg(profileImg); // Ảnh mặc định nếu không có ảnh từ API
-            }
-        } else {
-            // Nếu không có thông tin cleaner, reset các giá trị về mặc định
-            setName("");
-            setPhone("");
-            setEmail("");
-            setAge("");
-            setAddress("");
-            setIdentityNumber("");
-            setExperience("");
-            setImg(profileImg);
-        }
-    }, [cleaner]);
+  useEffect(() => {
+    if (cleaner) {
+      // Nếu có thông tin cleaner trong context, cập nhật các trường input
+      setName(cleaner.cleanerName || "");
+      setPhone(cleaner.cleanerPhone || "");
+      setEmail(cleaner.cleanerEmail || "");
+      setAge(cleaner.cleanerAge || "");
+      setAddress(cleaner.cleanerAddress || "");
+      setIdentityNumber(cleaner.cleanerIDnum || "");
+      setExperience(cleaner.cleanerExp || "");
+      if (cleaner.profile_image) {
+        setImg(`data:image/png;base64,${cleaner.profile_image}`);
+      } else {
+        setImg(profileImg); // Ảnh mặc định nếu không có ảnh từ API
+      }
+    } else {
+      // Nếu không có thông tin cleaner, reset các giá trị về mặc định
+      setName("");
+      setPhone("");
+      setEmail("");
+      setAge("");
+      setAddress("");
+      setIdentityNumber("");
+      setExperience("");
+      setImg(profileImg);
+    }
+  }, [cleaner]);
 
-    return (
-        <div className="persona-container">
-            <div className="persona-header">
-                <strong>Thông tin cá nhân</strong>
-                <p className="persona-subtext">Quản lý thông tin cá nhân của tài khoản bạn</p>
-            </div>
+  return (
+    <div className="persona-container">
+      <div className="persona-header">
+        <strong>Thông tin cá nhân</strong>
+        <p className="persona-subtext">
+          Quản lý thông tin cá nhân của tài khoản bạn
+        </p>
+      </div>
 
-            <div className="avatar-section">
-                <b>Ảnh đại diện</b>
-                <img className="avatar-image" src={cleanerImg} alt="icon" />
-                <b><u className="avatar-select">Chọn ảnh</u></b>
-            </div>
+      <div className="avatar-section">
+        <b>Ảnh đại diện</b>
+        <img className="avatar-image" src={cleanerImg} alt="icon" />
+        <input
+          type="file"
+          id="avatar-upload"
+          accept="image/*"
+          onChange={handleImageUpload}
+          style={{ display: "none" }}
+        />
+        <label htmlFor="avatar-upload">
+          <b>
+            <u className="avatar-select">Chọn ảnh</u>
+          </b>
+        </label>
+      </div>
 
-            <div className="form-group">
-                <b>Họ và tên</b>
-                <input type="text" value={cleanerName} onChange={(e) => setName(e.target.value)} />
-            </div>
+      <div className="form-group">
+        <b>Họ và tên</b>
+        <input
+          type="text"
+          value={cleanerName}
+          onChange={(e) => setName(e.target.value)}
+        />
+      </div>
 
-            <div className="form-group">
-                <b>Số điện thoại</b>
-                <input type="text" value={cleanerPhone} onChange={(e) => setPhone(e.target.value)} />
-            </div>
+      <div className="form-group">
+        <b>Số điện thoại</b>
+        <input
+          type="text"
+          value={cleanerPhone}
+          onChange={(e) => setPhone(e.target.value)}
+        />
+      </div>
 
-            <div className="form-group">
-                <b>Email</b>
-                <input type="email" value={cleanerEmail} onChange={(e) => setEmail(e.target.value)} />
-            </div>
+      <div className="form-group">
+        <b>Email</b>
+        <input
+          type="email"
+          value={cleanerEmail}
+          onChange={(e) => setEmail(e.target.value)}
+        />
+      </div>
 
-            <div className="form-group">
-                <b>Tuổi</b>
-                <input type="text" value={cleanerAge} onChange={(e) => setAge(e.target.value)} />
-            </div>
-
-            <div className="form-group">
-                <b>Địa chỉ</b>
-                <input type="text" value={cleanerAddress} onChange={(e) => setAddress(e.target.value)} />
-            </div>
+      <div className="form-group">
+        <b>Tuổi</b>
+        <input
+          type="text"
+          value={cleanerAge}
+          onChange={(e) => setAge(e.target.value)}
+        />
+      </div>
 
-            <div className="form-group">
-                <b>Số CCCD</b>
-                <input type="text" value={cleanerIDnum} onChange={(e) => setIdentityNumber(e.target.value)} />
-            </div>
+      <div className="form-group">
+        <b>Số CCCD</b>
+        <input
+          type="text"
+          value={cleanerIDnum}
+          onChange={(e) => setIdentityNumber(e.target.value)}
+        />
+      </div>
 
-
-            <div className="form-group">
-                <b>Kinh nghiệm</b>
-                <input type="text" value={cleanerExp} onChange={(e) => setExperience(e.target.value)} />
-            </div>
+      <div className="form-group">
+        <b>Kinh nghiệm</b>
+        <input
+          type="text"
+          value={cleanerExp}
+          onChange={(e) => setExperience(e.target.value)}
+        />
+      </div>
 
-
-            {/* Nút Lưu và Đăng xuất */}
-            <div className="button-group">
-                <button className="save-button" type="button" onClick={handleSave}>
-                    Lưu
-                </button>
-            </div>
-        </div>
-    );
+      {/* Nút Lưu và Đăng xuất */}
+      <div className="button-group">
+        <button
+          className="save-button"
+          type="button"
+          onClick={handleSave}
+          disabled={isLoading}
+        >
+          {isLoading ? "Đang lưu..." : "Lưu"}
+        </button>
+      </div>
+    </div>
+  );
 };
Index: ../FE/home-clean-fe/src/components/profile/cleanner/wallet_balance.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport { Card, Statistic } from 'antd';\nimport { WalletOutlined } from '@ant-design/icons';\n\nexport const WalletBalance = () => {\n    const walletBalance = 19819000;\n\n    return (\n        <Card\n            title=\"Wallet Balance\"\n            extra={<WalletOutlined />}\n            style={{\n                width: 300,\n                boxShadow: '0 4px 6px rgba(0,0,0,0.1)'\n            }}\n        >\n            <Statistic\n                title=\"Total Balance\"\n                value={walletBalance}\n                precision={0}\n                prefix=\"₫\"\n                valueStyle={{\n                    color: '#3f8600',\n                    fontWeight: 'bold'\n                }}\n            />\n        </Card>\n    );\n};\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/profile/cleanner/wallet_balance.jsx b/../FE/home-clean-fe/src/components/profile/cleanner/wallet_balance.jsx
--- a/../FE/home-clean-fe/src/components/profile/cleanner/wallet_balance.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/profile/cleanner/wallet_balance.jsx	(date 1743672482078)
@@ -1,30 +1,161 @@
-import React from 'react';
-import { Card, Statistic } from 'antd';
-import { WalletOutlined } from '@ant-design/icons';
+import React, { useState, useEffect } from "react";
+import {
+  Card,
+  Statistic,
+  Typography,
+  Divider,
+  Space,
+  Button,
+  Tooltip,
+  Row,
+  Col,
+  Tag,
+  notification,
+  Skeleton,
+  message,
+} from "antd";
+import {
+  WalletOutlined,
+  ArrowUpOutlined,
+  InfoCircleOutlined,
+  PlusOutlined,
+  HistoryOutlined,
+  ExclamationCircleOutlined,
+} from "@ant-design/icons";
+import { BASE_URL } from "../../../utils/config";
+
+const { Title, Text } = Typography;
 
 export const WalletBalance = () => {
-    const walletBalance = 19819000;
+  const [walletData, setWalletData] = useState(null);
+  const [loading, setLoading] = useState(true);
+
+  useEffect(() => {
+    fetchWalletBalance();
+  }, []);
+
+  const fetchWalletBalance = async () => {
+    try {
+      setLoading(true);
+      const token = localStorage.getItem("token");
+      const cleanerId = localStorage.getItem("cleanerId");
+
+      const response = await fetch(`${BASE_URL}/cleaner/${cleanerId}/wallet`, {
+        method: "GET",
+        headers: {
+          accept: "application/json",
+          Authorization: `Bearer ${token}`,
+        },
+      });
+
+      const data = await response.json();
+      if (response.ok) {
+        setWalletData(data);
+      } else {
+        throw new Error(data.message || "Không thể lấy dữ liệu ví");
+      }
+    } catch (error) {
+      // notification.error({
+      //   message: "Lỗi khi tải dữ liệu ví",
+      //   description: error.message,
+      //   icon: <ExclamationCircleOutlined style={{ color: "#ff4d4f" }} />,
+      // });
+      message.error("Lỗi khi tải dữ liệu ví");
+    } finally {
+      setLoading(false);
+    }
+  };
 
-    return (
-        <Card
-            title="Wallet Balance"
-            extra={<WalletOutlined />}
-            style={{
-                width: 300,
-                boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
-            }}
-        >
+  return (
+    <Card
+      style={{
+        width: "100%",
+        borderRadius: 8,
+        boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
+      }}
+      hoverable
+    >
+      <Space direction="vertical" size="middle" style={{ width: "100%" }}>
+        <Row justify="space-between" align="middle">
+          <Col>
+            <Space align="center">
+              <WalletOutlined style={{ fontSize: 24, color: "#1890ff" }} />
+              <Title level={4} style={{ margin: 0 }}>
+                Quản lý ví
+              </Title>
+            </Space>
+          </Col>
+          <Col>
+            <Tooltip title="Số dư khả dụng trong ví của bạn">
+              <InfoCircleOutlined
+                style={{ fontSize: 16, color: "rgba(0,0,0,0.45)" }}
+              />
+            </Tooltip>
+          </Col>
+        </Row>
+
+        <Divider style={{ margin: "12px 0" }} />
+
+        {loading ? (
+          <Skeleton active paragraph={{ rows: 1 }} />
+        ) : (
+          <Space direction="vertical" size="small" style={{ width: "100%" }}>
+            <Text type="secondary">Tổng số tiền</Text>
             <Statistic
-                title="Total Balance"
-                value={walletBalance}
-                precision={0}
-                prefix="₫"
-                valueStyle={{
-                    color: '#3f8600',
-                    fontWeight: 'bold'
-                }}
+              value={walletData?.walletBalance}
+              precision={0}
+              prefix="₫"
+              valueStyle={{
+                color: "#3f8600",
+                fontWeight: "bold",
+                fontSize: 28,
+              }}
+              formatter={(value) => value.toLocaleString()}
             />
-        </Card>
-    );
+            {/* <div style={{ marginTop: 8 }}>
+              <Text type="secondary" italic>
+                {walletData?.message || "Số dư ví hiện tại"}
+              </Text>
+            </div> */}
+          </Space>
+        )}
+
+        <Row gutter={8}>
+          <Col span={12}>
+            <Button
+              type="primary"
+              icon={<PlusOutlined />}
+              style={{
+                width: "100%",
+                backgroundColor: "#52c41a",
+                borderColor: "#52c41a",
+                height: 40,
+              }}
+            >
+              Thêm tiền vào ví
+            </Button>
+          </Col>
+          <Col span={12}>
+            <Button
+              icon={<HistoryOutlined />}
+              style={{
+                width: "100%",
+                height: 40,
+              }}
+            >
+              Lịch sử giao dịch
+            </Button>
+          </Col>
+        </Row>
+
+        <div style={{ textAlign: "center" }}>
+          <Tag color="blue" style={{ padding: "4px 8px" }}>
+            Tài khoản tiêu chuẩn
+          </Tag>
+        </div>
+      </Space>
+    </Card>
+  );
 };
 
+export default WalletBalance;
Index: src/main/java/com/example/homecleanapi/controllers/ConversationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.controllers;\n\nimport com.example.homecleanapi.models.Conversation;\nimport com.example.homecleanapi.services.ConversationService;\nimport io.swagger.v3.oas.annotations.security.SecurityRequirement;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.validation.Valid;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Map;\n\n@RestController\n@Tag(name = \"Conversation API\")\n@RequestMapping(\"/api/conversations\")\n@SecurityRequirement(name = \"BearerAuth\")\npublic class ConversationController {\n\n    private final ConversationService conversationService;\n\n    public ConversationController(ConversationService conversationService) {\n        this.conversationService = conversationService;\n    }\n\n    @PostMapping(name = \"/createConversation\")\n    public Conversation createConversation(@RequestParam @Valid Integer customerId, @RequestParam @Valid Integer cleanerId) {\n        return conversationService.getOrCreateConversation(customerId, cleanerId);\n    }\n\n    @GetMapping(\"/{customer_id}/getConversationByCustomerId\")\n    public ResponseEntity<Map<String, Object>> getAllConversationsByCustomerId(@PathVariable Integer customer_id) {\n        return conversationService.getConversationsByCustomerId(customer_id);\n    }\n\n    @GetMapping(\"/{cleaner_id}/getConversationByCleanerId\")\n    public ResponseEntity<Map<String, Object>> getConversationsByCleanerId(@PathVariable Integer cleaner_id) {\n        return conversationService.getConversationsByCleanerId(cleaner_id);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/controllers/ConversationController.java b/src/main/java/com/example/homecleanapi/controllers/ConversationController.java
--- a/src/main/java/com/example/homecleanapi/controllers/ConversationController.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/controllers/ConversationController.java	(date 1743672482107)
@@ -23,7 +23,7 @@
     }
 
     @PostMapping(name = "/createConversation")
-    public Conversation createConversation(@RequestParam @Valid Integer customerId, @RequestParam @Valid Integer cleanerId) {
+    public Conversation createConversation(@RequestParam @Valid Long customerId, @RequestParam @Valid Integer cleanerId) {
         return conversationService.getOrCreateConversation(customerId, cleanerId);
     }
 
Index: ../FE/home-clean-fe/src/components/profile/cleanner/address.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useContext, useState, useEffect } from \"react\";\nimport { AuthContext } from \"../../../context/AuthContext\";\nimport { message, Modal, Input, Button } from \"antd\";\nimport { BASE_URL } from \"../../../utils/config\";\nimport \"../owner/profile.css\";\n\nexport const Address = () => {\n    const { cleaner, dispatch } = useContext(AuthContext);\n    const [defaultAddress, setDefaultAddress] = useState(\"home1\");\n    const [addresses, setAddresses] = useState([]);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [newAddress, setNewAddress] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n\n    const fetchAddresses = async () => {\n        const token = localStorage.getItem(\"token\");\n        const cleanerId = localStorage.getItem(\"cleanerId\");\n\n        if (token && cleanerId) {\n            try {\n                const response = await fetch(`${BASE_URL}/employee/${cleanerId}/all-addresses`, {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': `Bearer ${token}`,\n                        'Accept': 'application/json'\n                    }\n                });\n\n                if (response.ok) {\n                    const responseData = await response.json();\n\n                    // Transform the data structure to match what your component expects\n                    const formattedAddresses = responseData.data.map((item, index) => ({\n                        id: index, // Using index as ID if not provided in the response\n                        address: item.address,\n                        isDefault: item.is_current,\n                        name: cleaner?.cleanerName || \"\",\n                        phone: cleaner?.cleanerPhone || \"\"\n                    }));\n\n                    setAddresses(formattedAddresses);\n                } else {\n                    message.error(\"Không thể lấy danh sách địa chỉ.\");\n                }\n            } catch (error) {\n                message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n            }\n        }\n    };\n\n    useEffect(() => {\n        fetchAddresses();\n    }, [dispatch]);\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n        setNewAddress(\"\");\n    };\n\n    const handleAddAddress = async () => {\n        if (!newAddress.trim()) {\n            message.error(\"Vui lòng nhập địa chỉ.\");\n            return;\n        }\n\n        setLoading(true);\n        const token = localStorage.getItem(\"token\");\n        const cleanerId = localStorage.getItem(\"cleanerId\");\n\n        try {\n            const response = await fetch(`${BASE_URL}/employee/${cleanerId}/create-address`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({ address: newAddress })\n            });\n\n            if (response.ok) {\n                message.success(\"Thêm địa chỉ mới thành công!\");\n                setIsModalVisible(false);\n                setNewAddress(\"\");\n                fetchAddresses(); // Refresh the addresses list\n            } else {\n                message.error(\"Không thể thêm địa chỉ mới.\");\n            }\n        } catch (error) {\n            message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleDeleteAddress = async (addressId) => {\n        const token = localStorage.getItem(\"token\");\n        const cleanerId = localStorage.getItem(\"cleanerId\");\n\n        try {\n            const response = await fetch(`${BASE_URL}/employee/${cleanerId}/delete-address/${addressId}`, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Accept': 'application/json'\n                }\n            });\n\n            if (response.ok) {\n                message.success(\"Xóa địa chỉ thành công!\");\n                fetchAddresses(); // Refresh the addresses list\n            } else {\n                message.error(\"Không thể xóa địa chỉ.\");\n            }\n        } catch (error) {\n            message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n        }\n    };\n\n    const handleUpdateAddress = async (addressId, currentAddress) => {\n        Modal.confirm({\n            title: 'Cập nhật địa chỉ',\n            content: (\n                <Input.TextArea\n                    defaultValue={currentAddress}\n                    onChange={(e) => setNewAddress(e.target.value)}\n                    placeholder=\"Nhập địa chỉ mới\"\n                    autoSize={{ minRows: 2, maxRows: 6 }}\n                />\n            ),\n            onOk: async () => {\n                if (!newAddress.trim()) {\n                    message.error(\"Vui lòng nhập địa chỉ.\");\n                    return;\n                }\n\n                const token = localStorage.getItem(\"token\");\n                const cleanerId = localStorage.getItem(\"cleanerId\");\n\n                try {\n                    const response = await fetch(`${BASE_URL}/employee/${cleanerId}/update-address/${addressId}`, {\n                        method: 'PUT',\n                        headers: {\n                            'Authorization': `Bearer ${token}`,\n                            'Content-Type': 'application/json',\n                            'Accept': 'application/json'\n                        },\n                        body: JSON.stringify({ address: newAddress })\n                    });\n\n                    if (response.ok) {\n                        message.success(\"Cập nhật địa chỉ thành công!\");\n                        setNewAddress(\"\");\n                        fetchAddresses(); // Refresh the addresses list\n                    } else {\n                        message.error(\"Không thể cập nhật địa chỉ.\");\n                    }\n                } catch (error) {\n                    message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n                }\n            },\n            onCancel() {\n                setNewAddress(\"\");\n            },\n        });\n    };\n\n    const handleSetDefaultAddress = async (addressId) => {\n        const token = localStorage.getItem(\"token\");\n        const cleanerId = localStorage.getItem(\"cleanerId\");\n\n        try {\n            const response = await fetch(`${BASE_URL}/employee/${cleanerId}/set-default-address/${addressId}`, {\n                method: 'PUT',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Accept': 'application/json'\n                }\n            });\n\n            if (response.ok) {\n                message.success(\"Đã đặt địa chỉ mặc định!\");\n                setDefaultAddress(`home${addressId}`);\n                fetchAddresses(); // Refresh the addresses list\n            } else {\n                message.error(\"Không thể đặt địa chỉ mặc định.\");\n            }\n        } catch (error) {\n            message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n        }\n    };\n\n    // Debug logging\n    console.log(\"Addresses data:\", addresses);\n\n    return (\n        <div className=\"address-container\">\n            <div className=\"address-header\">\n                <div>\n                    <b>Địa chỉ của bạn</b>\n                    <p className=\"address-subtext\">Quản lý thông tin địa chỉ của bạn</p>\n                </div>\n                <button className=\"add-address-button\" onClick={showModal}>+ Thêm địa chỉ mới</button>\n            </div>\n\n            <div className=\"address-list\" style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>\n                {addresses && addresses.length > 0 ? (\n                    addresses.map((address, index) => (\n                        <div\n                            key={index}\n                            className=\"address-item\"\n                            style={{\n                                padding: '16px',\n                                backgroundColor: '#fff',\n                                borderRadius: '8px',\n                                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n                                // border: address.isDefault ? '2px solid #1890ff' : '1px solid #e8e8e8',\n                                position: 'relative'\n                            }}\n                        >\n                            <div className=\"address-info\" style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n                                <b style={{ fontSize: '16px', marginRight: '15px' }}>\n                                    {address.name || cleaner?.cleanerName || \"Không có tên\"}\n                                </b>\n                                <p style={{ color: '#666', margin: '0' }}>\n                                    {address.phone || cleaner?.cleanerPhone || \"Không có số điện thoại\"}\n                                </p>\n                                {address.isDefault && (\n                                    <div\n                                        className=\"default-badge\"\n                                        style={{\n                                            backgroundColor: '#00a651',\n                                            color: 'white',\n                                            borderRadius: '4px',\n                                            fontSize: '12px',\n                                            marginLeft: '10px'\n                                        }}\n                                    >\n                                        <b>Mặc định</b>\n                                    </div>\n                                )}\n                            </div>\n                            <p\n                                className=\"address-text\"\n                                style={{\n                                    margin: '0 0 15px',\n                                    fontSize: '15px',\n                                    lineHeight: '1.5',\n                                    width: '30%',\n                                }}\n                            >\n                                {address.address || \"Chưa có địa chỉ\"}\n                            </p>\n\n                            <div\n                                className=\"address-actions\"\n                                style={{\n                                    display: 'flex',\n                                    justifyContent: 'space-between',\n                                    borderTop: '1px solid #f0f0f0',\n                                    paddingTop: '10px'\n                                }}\n                            >\n                                <div style={{ display: 'flex', gap: '15px' }}>\n                                    <b\n                                        className=\"update-button\"\n                                        onClick={() => handleUpdateAddress(address.id, address.address)}\n                                        style={{\n                                            color: '#00a651',\n                                            cursor: 'pointer',\n                                            transition: 'color 0.3s'\n                                        }}\n                                    >\n                                        Cập nhật\n                                    </b>\n                                    <b\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteAddress(address.id)}\n                                        style={{\n                                            color: '#ff4d4f',\n                                            cursor: 'pointer',\n                                            transition: 'color 0.3s'\n                                        }}\n                                    >\n                                        Xóa\n                                    </b>\n                                </div>\n                                <div\n                                    className=\"default-checkbox\"\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        gap: '8px'\n                                    }}\n                                >\n                                    <p style={{ margin: '0', fontSize: '14px' }}>Chọn làm mặc định</p>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={address.isDefault}\n                                        onChange={() => handleSetDefaultAddress(address.id)}\n                                        style={{\n                                            width: '16px',\n                                            height: '16px',\n                                            cursor: 'pointer',\n                                            backgroundColor: '#00a651'\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    ))\n                ) : (\n                    <p style={{\n                        textAlign: 'center',\n                        padding: '20px',\n                        backgroundColor: '#fff',\n                        borderRadius: '8px',\n                        boxShadow: '0 2px 8px rgba(0,0,0,0.05)'\n                    }}>\n                        Không có địa chỉ nào.\n                    </p>\n                )}\n            </div>\n\n            <Modal\n                title=\"Thêm địa chỉ mới\"\n                visible={isModalVisible}\n                onCancel={handleCancel}\n                footer={[\n                    <Button key=\"back\" onClick={handleCancel}>\n                        Hủy\n                    </Button>,\n                    <Button key=\"submit\" type=\"primary\" loading={loading} onClick={handleAddAddress}>\n                        Thêm\n                    </Button>,\n                ]}\n            >\n                <Input.TextArea\n                    value={newAddress}\n                    onChange={(e) => setNewAddress(e.target.value)}\n                    placeholder=\"Nhập địa chỉ mới\"\n                    autoSize={{ minRows: 3, maxRows: 6 }}\n                />\n            </Modal>\n        </div>\n    );\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/profile/cleanner/address.jsx b/../FE/home-clean-fe/src/components/profile/cleanner/address.jsx
--- a/../FE/home-clean-fe/src/components/profile/cleanner/address.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/profile/cleanner/address.jsx	(date 1743672482076)
@@ -5,347 +5,373 @@
 import "../owner/profile.css";
 
 export const Address = () => {
-    const { cleaner, dispatch } = useContext(AuthContext);
-    const [defaultAddress, setDefaultAddress] = useState("home1");
-    const [addresses, setAddresses] = useState([]);
-    const [isModalVisible, setIsModalVisible] = useState(false);
-    const [newAddress, setNewAddress] = useState("");
-    const [loading, setLoading] = useState(false);
+  const { cleaner, dispatch } = useContext(AuthContext);
+  const [addresses, setAddresses] = useState([]);
+  const [isAddModalVisible, setIsAddModalVisible] = useState(false);
+  const [isUpdateModalVisible, setIsUpdateModalVisible] = useState(false);
+  const [newAddress, setNewAddress] = useState("");
+  const [updateAddress, setUpdateAddress] = useState("");
+  const [currentAddressId, setCurrentAddressId] = useState(null);
+  const [loading, setLoading] = useState(false);
 
-    const fetchAddresses = async () => {
-        const token = localStorage.getItem("token");
-        const cleanerId = localStorage.getItem("cleanerId");
+  const fetchAddresses = async () => {
+    const token = localStorage.getItem("token");
+    const cleanerId = localStorage.getItem("cleanerId");
 
-        if (token && cleanerId) {
-            try {
-                const response = await fetch(`${BASE_URL}/employee/${cleanerId}/all-addresses`, {
-                    method: 'GET',
-                    headers: {
-                        'Authorization': `Bearer ${token}`,
-                        'Accept': 'application/json'
-                    }
-                });
+    if (token && cleanerId) {
+      try {
+        const response = await fetch(
+          `${BASE_URL}/employee/${cleanerId}/all-addresses`,
+          {
+            method: "GET",
+            headers: {
+              Authorization: `Bearer ${token}`,
+              Accept: "application/json",
+            },
+          }
+        );
 
-                if (response.ok) {
-                    const responseData = await response.json();
+        if (response.ok) {
+          const responseData = await response.json();
 
-                    // Transform the data structure to match what your component expects
-                    const formattedAddresses = responseData.data.map((item, index) => ({
-                        id: index, // Using index as ID if not provided in the response
-                        address: item.address,
-                        isDefault: item.is_current,
-                        name: cleaner?.cleanerName || "",
-                        phone: cleaner?.cleanerPhone || ""
-                    }));
+          // Use the actual id and is_current from the API response
+          const formattedAddresses = responseData.data.map((item) => ({
+            id: item.id,
+            address: item.address,
+            isDefault: item.is_current,
+            name: cleaner?.cleanerName || "",
+            phone: cleaner?.cleanerPhone || "",
+          }));
 
-                    setAddresses(formattedAddresses);
-                } else {
-                    message.error("Không thể lấy danh sách địa chỉ.");
-                }
-            } catch (error) {
-                message.error("Lỗi máy chủ, vui lòng thử lại sau.");
-            }
-        }
-    };
+          setAddresses(formattedAddresses);
+        } else {
+          message.error("Không thể lấy danh sách địa chỉ.");
+        }
+      } catch (error) {
+        message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+      }
+    }
+  };
 
-    useEffect(() => {
-        fetchAddresses();
-    }, [dispatch]);
+  useEffect(() => {
+    fetchAddresses();
+  }, [dispatch]);
 
-    const showModal = () => {
-        setIsModalVisible(true);
-    };
+  const showAddModal = () => {
+    setIsAddModalVisible(true);
+  };
 
-    const handleCancel = () => {
-        setIsModalVisible(false);
-        setNewAddress("");
-    };
+  const handleAddCancel = () => {
+    setIsAddModalVisible(false);
+    setNewAddress("");
+  };
 
-    const handleAddAddress = async () => {
-        if (!newAddress.trim()) {
-            message.error("Vui lòng nhập địa chỉ.");
-            return;
-        }
+  const showUpdateModal = (addressId, currentAddress) => {
+    setCurrentAddressId(addressId);
+    setUpdateAddress(currentAddress);
+    setIsUpdateModalVisible(true);
+  };
+
+  const handleUpdateCancel = () => {
+    setIsUpdateModalVisible(false);
+    setUpdateAddress("");
+    setCurrentAddressId(null);
+  };
+
+  const handleAddAddress = async () => {
+    if (!newAddress.trim()) {
+      message.error("Vui lòng nhập địa chỉ.");
+      return;
+    }
 
-        setLoading(true);
-        const token = localStorage.getItem("token");
-        const cleanerId = localStorage.getItem("cleanerId");
+    setLoading(true);
+    const token = localStorage.getItem("token");
+    const cleanerId = localStorage.getItem("cleanerId");
 
-        try {
-            const response = await fetch(`${BASE_URL}/employee/${cleanerId}/create-address`, {
-                method: 'POST',
-                headers: {
-                    'Authorization': `Bearer ${token}`,
-                    'Content-Type': 'application/json',
-                    'Accept': 'application/json'
-                },
-                body: JSON.stringify({ address: newAddress })
-            });
+    try {
+      const response = await fetch(
+        `${BASE_URL}/employee/${cleanerId}/create_address`,
+        {
+          method: "POST",
+          headers: {
+            Authorization: `Bearer ${token}`,
+            "Content-Type": "application/json",
+            Accept: "application/json",
+          },
+          body: JSON.stringify({ address: newAddress }),
+        }
+      );
 
-            if (response.ok) {
-                message.success("Thêm địa chỉ mới thành công!");
-                setIsModalVisible(false);
-                setNewAddress("");
-                fetchAddresses(); // Refresh the addresses list
-            } else {
-                message.error("Không thể thêm địa chỉ mới.");
-            }
-        } catch (error) {
-            message.error("Lỗi máy chủ, vui lòng thử lại sau.");
-        } finally {
-            setLoading(false);
-        }
-    };
+      if (response.ok) {
+        message.success("Thêm địa chỉ mới thành công!");
+        setIsAddModalVisible(false);
+        setNewAddress("");
+        fetchAddresses(); // Refresh the addresses list
+      } else {
+        message.error("Không thể thêm địa chỉ mới.");
+      }
+    } catch (error) {
+      message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+    } finally {
+      setLoading(false);
+    }
+  };
 
-    const handleDeleteAddress = async (addressId) => {
-        const token = localStorage.getItem("token");
-        const cleanerId = localStorage.getItem("cleanerId");
-
-        try {
-            const response = await fetch(`${BASE_URL}/employee/${cleanerId}/delete-address/${addressId}`, {
-                method: 'DELETE',
-                headers: {
-                    'Authorization': `Bearer ${token}`,
-                    'Accept': 'application/json'
-                }
-            });
-
-            if (response.ok) {
-                message.success("Xóa địa chỉ thành công!");
-                fetchAddresses(); // Refresh the addresses list
-            } else {
-                message.error("Không thể xóa địa chỉ.");
-            }
-        } catch (error) {
-            message.error("Lỗi máy chủ, vui lòng thử lại sau.");
-        }
-    };
-
-    const handleUpdateAddress = async (addressId, currentAddress) => {
-        Modal.confirm({
-            title: 'Cập nhật địa chỉ',
-            content: (
-                <Input.TextArea
-                    defaultValue={currentAddress}
-                    onChange={(e) => setNewAddress(e.target.value)}
-                    placeholder="Nhập địa chỉ mới"
-                    autoSize={{ minRows: 2, maxRows: 6 }}
-                />
-            ),
-            onOk: async () => {
-                if (!newAddress.trim()) {
-                    message.error("Vui lòng nhập địa chỉ.");
-                    return;
-                }
+  const handleUpdateAddressSubmit = async () => {
+    if (!updateAddress.trim()) {
+      message.error("Vui lòng nhập địa chỉ.");
+      return;
+    }
 
-                const token = localStorage.getItem("token");
-                const cleanerId = localStorage.getItem("cleanerId");
+    setLoading(true);
+    const token = localStorage.getItem("token");
+    const cleanerId = localStorage.getItem("cleanerId");
 
-                try {
-                    const response = await fetch(`${BASE_URL}/employee/${cleanerId}/update-address/${addressId}`, {
-                        method: 'PUT',
-                        headers: {
-                            'Authorization': `Bearer ${token}`,
-                            'Content-Type': 'application/json',
-                            'Accept': 'application/json'
-                        },
-                        body: JSON.stringify({ address: newAddress })
-                    });
+    try {
+      console.log("Updating address:", updateAddress); // Debug log
+
+      const response = await fetch(
+        `${BASE_URL}/employee/${cleanerId}/update_address/${currentAddressId}`,
+        {
+          method: "POST",
+          headers: {
+            Authorization: `Bearer ${token}`,
+            "Content-Type": "application/json",
+            Accept: "application/json",
+          },
+          body: JSON.stringify({ address: updateAddress }),
+        }
+      );
 
-                    if (response.ok) {
-                        message.success("Cập nhật địa chỉ thành công!");
-                        setNewAddress("");
-                        fetchAddresses(); // Refresh the addresses list
-                    } else {
-                        message.error("Không thể cập nhật địa chỉ.");
-                    }
-                } catch (error) {
-                    message.error("Lỗi máy chủ, vui lòng thử lại sau.");
-                }
-            },
-            onCancel() {
-                setNewAddress("");
-            },
-        });
-    };
+      if (response.ok) {
+        message.success("Cập nhật địa chỉ thành công!");
+        setIsUpdateModalVisible(false);
+        setUpdateAddress("");
+        setCurrentAddressId(null);
+        fetchAddresses(); // Refresh the addresses list
+      } else {
+        message.error("Không thể cập nhật địa chỉ.");
+      }
+    } catch (error) {
+      message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+    } finally {
+      setLoading(false);
+    }
+  };
 
-    const handleSetDefaultAddress = async (addressId) => {
+  const handleDeleteAddress = async (addressId) => {
+    Modal.confirm({
+      title: "Xác nhận xóa",
+      content: "Bạn có chắc chắn muốn xóa địa chỉ này không?",
+      okText: "Xác nhận",
+      cancelText: "Hủy",
+      onOk: async () => {
         const token = localStorage.getItem("token");
-        const cleanerId = localStorage.getItem("cleanerId");
-
         try {
-            const response = await fetch(`${BASE_URL}/employee/${cleanerId}/set-default-address/${addressId}`, {
-                method: 'PUT',
-                headers: {
-                    'Authorization': `Bearer ${token}`,
-                    'Accept': 'application/json'
-                }
-            });
+          const response = await fetch(
+            `${BASE_URL}/employee/${addressId}/delete_address`,
+            {
+              method: "DELETE",
+              headers: {
+                Authorization: `Bearer ${token}`,
+                Accept: "application/json",
+              },
+            }
+          );
 
-            if (response.ok) {
-                message.success("Đã đặt địa chỉ mặc định!");
-                setDefaultAddress(`home${addressId}`);
-                fetchAddresses(); // Refresh the addresses list
-            } else {
-                message.error("Không thể đặt địa chỉ mặc định.");
-            }
+          if (response.ok) {
+            message.success("Xóa địa chỉ thành công!");
+            fetchAddresses(); // Refresh the addresses list
+          } else {
+            message.error("Không thể xóa địa chỉ.");
+          }
         } catch (error) {
-            message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+          message.error("Lỗi máy chủ, vui lòng thử lại sau.");
         }
-    };
-
-    // Debug logging
-    console.log("Addresses data:", addresses);
+      },
+    });
+  };
 
-    return (
-        <div className="address-container">
-            <div className="address-header">
-                <div>
-                    <b>Địa chỉ của bạn</b>
-                    <p className="address-subtext">Quản lý thông tin địa chỉ của bạn</p>
-                </div>
-                <button className="add-address-button" onClick={showModal}>+ Thêm địa chỉ mới</button>
-            </div>
+  return (
+    <div className="address-container">
+      <div className="address-header">
+        <div>
+          <b>Địa chỉ của bạn</b>
+          <p className="address-subtext">Quản lý thông tin địa chỉ của bạn</p>
+        </div>
+        <button className="add-address-button" onClick={showAddModal}>
+          + Thêm địa chỉ mới
+        </button>
+      </div>
 
-            <div className="address-list" style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
-                {addresses && addresses.length > 0 ? (
-                    addresses.map((address, index) => (
-                        <div
-                            key={index}
-                            className="address-item"
-                            style={{
-                                padding: '16px',
-                                backgroundColor: '#fff',
-                                borderRadius: '8px',
-                                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
-                                // border: address.isDefault ? '2px solid #1890ff' : '1px solid #e8e8e8',
-                                position: 'relative'
-                            }}
-                        >
-                            <div className="address-info" style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>
-                                <b style={{ fontSize: '16px', marginRight: '15px' }}>
-                                    {address.name || cleaner?.cleanerName || "Không có tên"}
-                                </b>
-                                <p style={{ color: '#666', margin: '0' }}>
-                                    {address.phone || cleaner?.cleanerPhone || "Không có số điện thoại"}
-                                </p>
-                                {address.isDefault && (
-                                    <div
-                                        className="default-badge"
-                                        style={{
-                                            backgroundColor: '#00a651',
-                                            color: 'white',
-                                            borderRadius: '4px',
-                                            fontSize: '12px',
-                                            marginLeft: '10px'
-                                        }}
-                                    >
-                                        <b>Mặc định</b>
-                                    </div>
-                                )}
-                            </div>
-                            <p
-                                className="address-text"
-                                style={{
-                                    margin: '0 0 15px',
-                                    fontSize: '15px',
-                                    lineHeight: '1.5',
-                                    width: '30%',
-                                }}
-                            >
-                                {address.address || "Chưa có địa chỉ"}
-                            </p>
+      <div
+        className="address-list"
+        style={{ display: "flex", flexDirection: "column", gap: "16px" }}
+      >
+        {addresses && addresses.length > 0 ? (
+          addresses.map((address) => (
+            <div
+              key={address.id}
+              className="address-item"
+              style={{
+                padding: "16px",
+                backgroundColor: "#fff",
+                borderRadius: "8px",
+                boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
+                position: "relative",
+              }}
+            >
+              <div
+                className="address-info"
+                style={{
+                  display: "flex",
+                  alignItems: "center",
+                  marginBottom: "10px",
+                }}
+              >
+                <b style={{ fontSize: "16px", marginRight: "15px" }}>
+                  {address.name || cleaner?.cleanerName || "Không có tên"}
+                </b>
+                <p style={{ color: "#666", margin: "0" }}>
+                  {address.phone ||
+                    cleaner?.cleanerPhone ||
+                    "Không có số điện thoại"}
+                </p>
+                {address.isDefault && (
+                  <div
+                    className="default-badge"
+                    style={{
+                      backgroundColor: "#00a651",
+                      color: "white",
+                      borderRadius: "4px",
+                      fontSize: "12px",
+                      marginLeft: "10px",
+                      padding: "2px 6px",
+                    }}
+                  >
+                    <b>Mặc định</b>
+                  </div>
+                )}
+              </div>
+              <p
+                className="address-text"
+                style={{
+                  margin: "0 0 15px",
+                  fontSize: "15px",
+                  lineHeight: "1.5",
+                  width: "30%",
+                }}
+              >
+                {address.address || "Chưa có địa chỉ"}
+              </p>
 
-                            <div
-                                className="address-actions"
-                                style={{
-                                    display: 'flex',
-                                    justifyContent: 'space-between',
-                                    borderTop: '1px solid #f0f0f0',
-                                    paddingTop: '10px'
-                                }}
-                            >
-                                <div style={{ display: 'flex', gap: '15px' }}>
-                                    <b
-                                        className="update-button"
-                                        onClick={() => handleUpdateAddress(address.id, address.address)}
-                                        style={{
-                                            color: '#00a651',
-                                            cursor: 'pointer',
-                                            transition: 'color 0.3s'
-                                        }}
-                                    >
-                                        Cập nhật
-                                    </b>
-                                    <b
-                                        className="delete-button"
-                                        onClick={() => handleDeleteAddress(address.id)}
-                                        style={{
-                                            color: '#ff4d4f',
-                                            cursor: 'pointer',
-                                            transition: 'color 0.3s'
-                                        }}
-                                    >
-                                        Xóa
-                                    </b>
-                                </div>
-                                <div
-                                    className="default-checkbox"
-                                    style={{
-                                        display: 'flex',
-                                        alignItems: 'center',
-                                        gap: '8px'
-                                    }}
-                                >
-                                    <p style={{ margin: '0', fontSize: '14px' }}>Chọn làm mặc định</p>
-                                    <input
-                                        type="checkbox"
-                                        checked={address.isDefault}
-                                        onChange={() => handleSetDefaultAddress(address.id)}
-                                        style={{
-                                            width: '16px',
-                                            height: '16px',
-                                            cursor: 'pointer',
-                                            backgroundColor: '#00a651'
-                                        }}
-                                    />
-                                </div>
-                            </div>
-                        </div>
-                    ))
-                ) : (
-                    <p style={{
-                        textAlign: 'center',
-                        padding: '20px',
-                        backgroundColor: '#fff',
-                        borderRadius: '8px',
-                        boxShadow: '0 2px 8px rgba(0,0,0,0.05)'
-                    }}>
-                        Không có địa chỉ nào.
-                    </p>
-                )}
-            </div>
+              <div
+                className="address-actions"
+                style={{
+                  display: "flex",
+                  justifyContent: "space-between",
+                  borderTop: "1px solid #f0f0f0",
+                  paddingTop: "10px",
+                }}
+              >
+                <div style={{ display: "flex", gap: "15px" }}>
+                  <b
+                    className="update-button"
+                    onClick={() => showUpdateModal(address.id, address.address)}
+                    style={{
+                      color: "#00a651",
+                      cursor: "pointer",
+                      transition: "color 0.3s",
+                    }}
+                  >
+                    Cập nhật
+                  </b>
+                  <b
+                    className="delete-button"
+                    onClick={() => handleDeleteAddress(address.id)}
+                    style={{
+                      color: "#ff4d4f",
+                      cursor: "pointer",
+                      transition: "color 0.3s",
+                    }}
+                  >
+                    Xóa
+                  </b>
+                </div>
+              </div>
+            </div>
+          ))
+        ) : (
+          <p
+            style={{
+              textAlign: "center",
+              padding: "20px",
+              backgroundColor: "#fff",
+              borderRadius: "8px",
+              boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
+            }}
+          >
+            Không có địa chỉ nào.
+          </p>
+        )}
+      </div>
 
-            <Modal
-                title="Thêm địa chỉ mới"
-                visible={isModalVisible}
-                onCancel={handleCancel}
-                footer={[
-                    <Button key="back" onClick={handleCancel}>
-                        Hủy
-                    </Button>,
-                    <Button key="submit" type="primary" loading={loading} onClick={handleAddAddress}>
-                        Thêm
-                    </Button>,
-                ]}
-            >
-                <Input.TextArea
-                    value={newAddress}
-                    onChange={(e) => setNewAddress(e.target.value)}
-                    placeholder="Nhập địa chỉ mới"
-                    autoSize={{ minRows: 3, maxRows: 6 }}
-                />
-            </Modal>
-        </div>
-    );
-};
\ No newline at end of file
+      {/* Add Address Modal */}
+      <Modal
+        title="Thêm địa chỉ mới"
+        visible={isAddModalVisible}
+        onCancel={handleAddCancel}
+        footer={[
+          <Button key="back" onClick={handleAddCancel}>
+            Hủy
+          </Button>,
+          <Button
+            key="submit"
+            type="primary"
+            loading={loading}
+            onClick={handleAddAddress}
+          >
+            Thêm
+          </Button>,
+        ]}
+      >
+        <Input.TextArea
+          value={newAddress}
+          onChange={(e) => setNewAddress(e.target.value)}
+          placeholder="Nhập địa chỉ mới"
+          autoSize={{ minRows: 3, maxRows: 6 }}
+        />
+      </Modal>
+
+      {/* Update Address Modal */}
+      <Modal
+        title="Cập nhật địa chỉ"
+        visible={isUpdateModalVisible}
+        onCancel={handleUpdateCancel}
+        footer={[
+          <Button key="back" onClick={handleUpdateCancel}>
+            Hủy
+          </Button>,
+          <Button
+            key="submit"
+            type="primary"
+            loading={loading}
+            onClick={handleUpdateAddressSubmit}
+          >
+            Cập nhật
+          </Button>,
+        ]}
+      >
+        <Input.TextArea
+          value={updateAddress}
+          onChange={(e) => {
+            console.log("New value:", e.target.value); // Debug log
+            setUpdateAddress(e.target.value);
+          }}
+          placeholder="Nhập địa chỉ mới"
+          autoSize={{ minRows: 3, maxRows: 6 }}
+        />
+      </Modal>
+    </div>
+  );
+};
Index: ../FE/home-clean-fe/src/components/profile/cleanner/menu_Infomation.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useContext, useEffect, useState } from \"react\";\nimport { AuthContext } from \"../../../context/AuthContext\";\nimport { Link } from \"react-router-dom\";\nimport infoImg from \"../../../assets/imgProfile/info.svg\";\nimport addressImg from \"../../../assets/imgProfile/address.svg\";\nimport discountImg from \"../../../assets/imgProfile/discount.svg\";\nimport paymentImg from \"../../../assets/imgProfile/payment.svg\";\nimport helpImg from \"../../../assets/imgProfile/help.svg\";\nimport profileImg from \"../../../assets/imgProfile/imgProfile.svg\";\nimport \"../owner/profile.css\";\n\nconst MenuInfomation = ({ selectedMenu, setSelectedMenu }) => {\n  const { cleaner } = useContext(AuthContext); // Lấy thông tin người dùng\n  const [cleanerImg, setImg] = useState(cleaner?.cleanerImg || \"\");\n\n  const handleClick = (menuName) => {\n    setSelectedMenu(menuName);\n  };\n  useEffect(() => {\n    if (cleaner) {\n      if (cleaner.profile_image) {\n        setImg(`data:image/png;base64,${cleaner.profile_image}`);\n      } else {\n        setImg(profileImg); // Ảnh mặc định nếu không có ảnh từ API\n      }\n    } else {\n      setImg(profileImg);\n    }\n  }, [cleaner]);\n  return (\n    <div className=\"menu-wrapper\">\n      <div className=\"menu-profile\">\n        <img className=\"profile-avatar\" src={cleanerImg} alt=\"icon\" />\n        <div className=\"profile-details\">\n          <p className=\"profile-name\"><strong>{cleaner?.cleanerName || \"Người dùng\"}</strong></p>\n          <p className=\"profile-email\">{cleaner?.cleanerEmail || \"Chưa có email\"}</p>\n        </div>\n      </div>\n      <hr className=\"menu-separator\" />\n\n      <div className=\"menu-options\">\n        {[\n          { id: \"1\", label: \"Thông tin cá nhân\", icon: infoImg },\n          { id: \"2\", label: \"Địa chỉ\", icon: addressImg },\n          { id: \"3\", label: \"Quản lý thanh toán\", icon: paymentImg },\n          { id: \"4\", label: \"Ưu đãi của tôi\", icon: discountImg },\n          { id: \"5\", label: \"Trợ giúp\", icon: helpImg },\n        ].map((item) => (\n          <div key={item.id} className=\"menu-item\">\n            <Link\n              to=\"/infomationcleaner\"\n              className={`menu-link ${selectedMenu === item.id ? \"menu-active\" : \"\"}`}\n              onClick={() => handleClick(item.id)}\n            >\n              <img className=\"menu-icon\" src={item.icon} alt=\"icon\" />\n              <p className=\"menu-text\">{item.label}</p>\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MenuInfomation;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/profile/cleanner/menu_Infomation.jsx b/../FE/home-clean-fe/src/components/profile/cleanner/menu_Infomation.jsx
--- a/../FE/home-clean-fe/src/components/profile/cleanner/menu_Infomation.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/profile/cleanner/menu_Infomation.jsx	(date 1743672482077)
@@ -32,8 +32,12 @@
       <div className="menu-profile">
         <img className="profile-avatar" src={cleanerImg} alt="icon" />
         <div className="profile-details">
-          <p className="profile-name"><strong>{cleaner?.cleanerName || "Người dùng"}</strong></p>
-          <p className="profile-email">{cleaner?.cleanerEmail || "Chưa có email"}</p>
+          <p className="profile-name">
+            <strong>{cleaner?.cleanerName || "Người dùng"}</strong>
+          </p>
+          <p className="profile-email">
+            {cleaner?.cleanerEmail || "Chưa có email"}
+          </p>
         </div>
       </div>
       <hr className="menu-separator" />
@@ -42,14 +46,16 @@
         {[
           { id: "1", label: "Thông tin cá nhân", icon: infoImg },
           { id: "2", label: "Địa chỉ", icon: addressImg },
-          { id: "3", label: "Quản lý thanh toán", icon: paymentImg },
+          { id: "3", label: "Quản lý ví", icon: paymentImg },
           { id: "4", label: "Ưu đãi của tôi", icon: discountImg },
           { id: "5", label: "Trợ giúp", icon: helpImg },
         ].map((item) => (
           <div key={item.id} className="menu-item">
             <Link
               to="/infomationcleaner"
-              className={`menu-link ${selectedMenu === item.id ? "menu-active" : ""}`}
+              className={`menu-link ${
+                selectedMenu === item.id ? "menu-active" : ""
+              }`}
               onClick={() => handleClick(item.id)}
             >
               <img className="menu-icon" src={item.icon} alt="icon" />
Index: src/main/java/com/example/homecleanapi/controllers/ChatController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.controllers;\n\nimport com.example.homecleanapi.dtos.ChatMessage;\nimport com.example.homecleanapi.models.Conversation;\nimport com.example.homecleanapi.repositories.ConversationRepository;\nimport lombok.extern.log4j.Log4j2;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.messaging.handler.annotation.Header;\nimport org.springframework.messaging.handler.annotation.MessageMapping;\nimport org.springframework.messaging.handler.annotation.Payload;\nimport org.springframework.messaging.simp.SimpMessagingTemplate;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.util.Optional;\n\n@RestController\n@Log4j2\npublic class ChatController {\n\n    private final RabbitTemplate rabbitTemplate;\n\n    private final SimpMessagingTemplate messagingTemplate;\n\n    private final ConversationRepository conversationRepository;\n\n    public ChatController(RabbitTemplate rabbitTemplate, SimpMessagingTemplate messagingTemplate, ConversationRepository conversationRepository) {\n        this.rabbitTemplate = rabbitTemplate;\n        this.messagingTemplate = messagingTemplate;\n        this.conversationRepository = conversationRepository;\n    }\n\n    @MessageMapping(\"/chat\")\n    public void sendMessage(@Payload ChatMessage message,\n                            @Header(\"customerId\") Integer customerId,\n                            @Header(\"employeeId\") Integer employeeId) {\n        // Lấy hoặc tạo mới conversation\n        Long conversationId = getOrCreateConversation(customerId, employeeId);\n        message.setConversationId(conversationId);\n\n        if (message.getSenderId() == null) {\n            throw new IllegalArgumentException(\"SenderId is required\");\n        }\n\n        message.setSent_at(LocalTime.now());\n\n        // Đẩy tin nhắn vào RabbitMQ\n        rabbitTemplate.convertAndSend(\"chat-messages\", message);\n//        log.info(\"Sending to RabbitMQ: \", message);\n\n        // Gửi ngay lập tức qua WebSocket tới người nhận\n        Integer receiverId = determineReceiverId(message.getConversationId(), message.getSenderId());\n        messagingTemplate.convertAndSend(\"/queue/messages-\" + receiverId, message);\n//        log.info(\"Sending to WebSocket receiver: {}\", receiverId);\n    }\n\n    private Long getOrCreateConversation(Integer customerId, Integer employeeId) {\n        Optional<Conversation> existingConversation = conversationRepository.findByCustomerIdAndCleanerId(customerId, employeeId);\n\n        if (existingConversation.isPresent()) {\n            return existingConversation.get().getId();\n        }\n\n        // Tạo mới conversation nếu chưa tồn tại\n        Conversation newConversation = new Conversation();\n        newConversation.setCustomerId(customerId);\n        newConversation.setCleanerId(employeeId);\n        newConversation = conversationRepository.save(newConversation);\n\n//        log.info(\"New conversation created with ID: {}\", newConversation.getId());\n        return newConversation.getId();\n    }\n\n\n    private Integer determineReceiverId(Long conversationId, Integer senderId) {\n        Conversation conversation = conversationRepository.findById(conversationId)\n                .orElseThrow(() -> new RuntimeException(\"Conversation not found\"));\n        return senderId.equals(conversation.getCustomerId()) ? conversation.getCleanerId() : conversation.getCustomerId();\n    }\n\n    // Gửi tin nhắn cá nhân\n//    @MessageMapping(\"/chat\")\n//    public void sendPrivateMessage(@Payload Message message, SimpMessageHeaderAccessor headerAccessor) {\n//        // Lưu tin nhắn vào database\n//        message.setSent_at(LocalDateTime.now());\n//        messageBatchRepository.save(message);\n//\n//        // Gửi tin nhắn tới người nhận qua /queue\n//        String destination = \"/queue/messages-\" + message.getReceiverId();\n//        messagingTemplate.convertAndSend(destination, message);\n//    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/controllers/ChatController.java b/src/main/java/com/example/homecleanapi/controllers/ChatController.java
--- a/src/main/java/com/example/homecleanapi/controllers/ChatController.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/controllers/ChatController.java	(date 1743672482105)
@@ -2,7 +2,11 @@
 
 import com.example.homecleanapi.dtos.ChatMessage;
 import com.example.homecleanapi.models.Conversation;
+import com.example.homecleanapi.models.Customers;
+import com.example.homecleanapi.models.Employee;
 import com.example.homecleanapi.repositories.ConversationRepository;
+import com.example.homecleanapi.repositories.CustomerRepository;
+import com.example.homecleanapi.repositories.EmployeeRepository;
 import lombok.extern.log4j.Log4j2;
 import org.springframework.amqp.rabbit.core.RabbitTemplate;
 import org.springframework.messaging.handler.annotation.Header;
@@ -25,15 +29,20 @@
 
     private final ConversationRepository conversationRepository;
 
-    public ChatController(RabbitTemplate rabbitTemplate, SimpMessagingTemplate messagingTemplate, ConversationRepository conversationRepository) {
+    private final CustomerRepository customerRepository;
+    private final EmployeeRepository cleanerRepository;
+
+    public ChatController(RabbitTemplate rabbitTemplate, SimpMessagingTemplate messagingTemplate, ConversationRepository conversationRepository, CustomerRepository customerRepository, EmployeeRepository employeeRepository) {
         this.rabbitTemplate = rabbitTemplate;
         this.messagingTemplate = messagingTemplate;
         this.conversationRepository = conversationRepository;
+        this.customerRepository = customerRepository;
+        this.cleanerRepository = employeeRepository;
     }
 
     @MessageMapping("/chat")
     public void sendMessage(@Payload ChatMessage message,
-                            @Header("customerId") Integer customerId,
+                            @Header("customerId") Long customerId,
                             @Header("employeeId") Integer employeeId) {
         // Lấy hoặc tạo mới conversation
         Long conversationId = getOrCreateConversation(customerId, employeeId);
@@ -55,8 +64,13 @@
 //        log.info("Sending to WebSocket receiver: {}", receiverId);
     }
 
-    private Long getOrCreateConversation(Integer customerId, Integer employeeId) {
-        Optional<Conversation> existingConversation = conversationRepository.findByCustomerIdAndCleanerId(customerId, employeeId);
+    private Long getOrCreateConversation(Long customerId, Integer employeeId) {
+        Customers customer = customerRepository.findById(customerId)
+                .orElseThrow(() -> new RuntimeException("Customer not found"));
+        Employee cleaner = cleanerRepository.findById(employeeId)
+                .orElseThrow(() -> new RuntimeException("Cleaner not found"));
+
+        Optional<Conversation> existingConversation = conversationRepository.findByCustomerAndCleaner(customer, cleaner);
 
         if (existingConversation.isPresent()) {
             return existingConversation.get().getId();
@@ -64,31 +78,23 @@
 
         // Tạo mới conversation nếu chưa tồn tại
         Conversation newConversation = new Conversation();
-        newConversation.setCustomerId(customerId);
-        newConversation.setCleanerId(employeeId);
+        newConversation.setCustomer(customer);
+        newConversation.setCleaner(cleaner);
+
         newConversation = conversationRepository.save(newConversation);
-
-//        log.info("New conversation created with ID: {}", newConversation.getId());
         return newConversation.getId();
     }
 
 
+
     private Integer determineReceiverId(Long conversationId, Integer senderId) {
         Conversation conversation = conversationRepository.findById(conversationId)
                 .orElseThrow(() -> new RuntimeException("Conversation not found"));
-        return senderId.equals(conversation.getCustomerId()) ? conversation.getCleanerId() : conversation.getCustomerId();
+
+        Integer customerId = conversation.getCustomer().getId();
+        Integer cleanerId = conversation.getCleaner().getId();
+
+        return senderId.equals(customerId) ? cleanerId : customerId;
     }
-
-    // Gửi tin nhắn cá nhân
-//    @MessageMapping("/chat")
-//    public void sendPrivateMessage(@Payload Message message, SimpMessageHeaderAccessor headerAccessor) {
-//        // Lưu tin nhắn vào database
-//        message.setSent_at(LocalDateTime.now());
-//        messageBatchRepository.save(message);
-//
-//        // Gửi tin nhắn tới người nhận qua /queue
-//        String destination = "/queue/messages-" + message.getReceiverId();
-//        messagingTemplate.convertAndSend(destination, message);
-//    }
 
 }
Index: ../FE/home-clean-fe/src/components/service-details/AddLocationModal.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useRef, useState } from \"react\";\nimport useClickOutside from \"../../hooks/useClickOutside\";\nimport styles from \"../../assets/CSS/Service/AddLocationModal.module.css\";\nimport { BASE_URL } from \"../../utils/config\";\nimport { message } from \"antd\";\nconst AddLocationModal = ({ setIsShowAddLocationModal, onAddressAdded }) => {\n  const [newAddress, setNewAddress] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const addLocationRef = useRef(null);\n\n  useClickOutside({\n    setState: setIsShowAddLocationModal,\n    refElm: addLocationRef,\n  });\n\n  const handleAddAddress = async () => {\n    if (!newAddress.trim()) {\n      message.error(\"Vui lòng nhập địa chỉ.\");\n      return;\n    }\n\n    setLoading(true);\n    const token = localStorage.getItem(\"token\");\n    const customerId = localStorage.getItem(\"customerId\");\n\n    try {\n      const response = await fetch(`${BASE_URL}/customer/${customerId}/create-address`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({ address: newAddress })\n      });\n\n      if (response.ok) {\n        message.success(\"Thêm địa chỉ mới thành công!\");\n        setNewAddress(\"\");\n\n        // Gọi lại hàm để cập nhật danh sách địa chỉ\n        onAddressAdded();\n\n        setIsShowAddLocationModal(false);\n      } else {\n        message.error(\"Không thể thêm địa chỉ mới.\");\n      }\n    } catch (error) {\n      message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className={styles.modalContainer} ref={addLocationRef}>\n      <h3>Thêm địa chỉ</h3>\n\n      <textarea\n        className={styles.textarea}\n        rows=\"3\"\n        placeholder=\"Nhập địa chỉ mới\"\n        value={newAddress}\n        onChange={(e) => setNewAddress(e.target.value)}\n      />\n      {/* <iframe\n        width=\"100%\"\n        height=\"300\"\n        loading=\"lazy\"\n        allowFullScreen\n        src={`https://www.google.com/maps?q=${encodeURIComponent(location)}&output=embed`}\n      ></iframe> */}\n      <div className={styles.buttonGroup}>\n        <button\n          className={styles.cancelButton}\n          onClick={() => setIsShowAddLocationModal(false)}\n          disabled={loading}\n        >\n          Trở lại\n        </button>\n        <button\n          className={styles.confirmButton}\n          onClick={handleAddAddress}\n          disabled={loading}\n        >\n          {loading ? \"Đang xử lý...\" : \"Hoàn thành\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddLocationModal;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/service-details/AddLocationModal.jsx b/../FE/home-clean-fe/src/components/service-details/AddLocationModal.jsx
--- a/../FE/home-clean-fe/src/components/service-details/AddLocationModal.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/service-details/AddLocationModal.jsx	(date 1743672482079)
@@ -24,15 +24,18 @@
     const customerId = localStorage.getItem("customerId");
 
     try {
-      const response = await fetch(`${BASE_URL}/customer/${customerId}/create-address`, {
-        method: 'POST',
-        headers: {
-          'Authorization': `Bearer ${token}`,
-          'Content-Type': 'application/json',
-          'Accept': 'application/json'
-        },
-        body: JSON.stringify({ address: newAddress })
-      });
+      const response = await fetch(
+        `${BASE_URL}/customer/${customerId}/create-address`,
+        {
+          method: "POST",
+          headers: {
+            Authorization: `Bearer ${token}`,
+            "Content-Type": "application/json",
+            Accept: "application/json",
+          },
+          body: JSON.stringify({ address: newAddress }),
+        }
+      );
 
       if (response.ok) {
         message.success("Thêm địa chỉ mới thành công!");
@@ -90,4 +93,4 @@
   );
 };
 
-export default AddLocationModal;
\ No newline at end of file
+export default AddLocationModal;
Index: ../FE/home-clean-fe/src/components/profile/owner/address.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useContext, useState, useEffect } from \"react\";\nimport { AuthContext } from \"../../../context/AuthContext\";\nimport { message, Modal, Input, Button } from \"antd\";\nimport { BASE_URL } from \"../../../utils/config\";\nimport \"../owner/profile.css\";\n\nexport const Address = () => {\n    const { user, dispatch } = useContext(AuthContext);\n    const [defaultAddress, setDefaultAddress] = useState(\"\");\n\n    const [addresses, setAddresses] = useState([]);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [newAddress, setNewAddress] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n\n    const fetchAddresses = async () => {\n        const token = localStorage.getItem(\"token\");\n        const customerId = localStorage.getItem(\"customerId\");\n\n        if (token && customerId) {\n            try {\n                const response = await fetch(`${BASE_URL}/customer/${customerId}/addresses`, {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': `Bearer ${token}`,\n                        'Accept': 'application/json'\n                    }\n                });\n\n                if (response.ok) {\n                    const responseData = await response.json();\n\n                    // Handle the new API response format\n                    // The API now returns an array of address objects directly\n                    const formattedAddresses = responseData.map(item => ({\n                        id: item.id, // Using the actual ID from the response\n                        address: item.address,\n                        isDefault: item.is_current,\n                        name: item.customer?.full_name || user?.name || \"\",\n                        phone: item.customer?.phone || user?.phone || \"\"\n                    }));\n\n                    setAddresses(formattedAddresses);\n                } else {\n                    message.error(\"Không thể lấy danh sách địa chỉ.\");\n                }\n            } catch (error) {\n                message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n            }\n        }\n    };\n\n    useEffect(() => {\n        fetchAddresses();\n    }, [dispatch]);\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n        setNewAddress(\"\");\n    };\n\n    const handleAddAddress = async () => {\n        if (!newAddress.trim()) {\n            message.error(\"Vui lòng nhập địa chỉ.\");\n            return;\n        }\n\n        setLoading(true);\n        const token = localStorage.getItem(\"token\");\n        const customerId = localStorage.getItem(\"customerId\");\n\n        try {\n            const response = await fetch(`${BASE_URL}/customer/${customerId}/create-address`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({ address: newAddress })\n            });\n\n            if (response.ok) {\n                message.success(\"Thêm địa chỉ mới thành công!\");\n                setIsModalVisible(false);\n                setNewAddress(\"\");\n                fetchAddresses(); // Refresh the addresses list\n            } else {\n                message.error(\"Không thể thêm địa chỉ mới.\");\n            }\n        } catch (error) {\n            message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleDeleteAddress = async (addressId) => {\n        const token = localStorage.getItem(\"token\");\n        const customerId = localStorage.getItem(\"customerId\");\n\n        try {\n            const response = await fetch(`${BASE_URL}/employee/${customerId}/delete-address/${addressId}`, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Accept': 'application/json'\n                }\n            });\n\n            if (response.ok) {\n                message.success(\"Xóa địa chỉ thành công!\");\n                fetchAddresses(); // Refresh the addresses list\n            } else {\n                message.error(\"Không thể xóa địa chỉ.\");\n            }\n        } catch (error) {\n            message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n        }\n    };\n\n    const handleUpdateAddress = async (addressId, currentAddress) => {\n        Modal.confirm({\n            title: 'Cập nhật địa chỉ',\n            content: (\n                <Input.TextArea\n                    defaultValue={currentAddress}\n                    onChange={(e) => setNewAddress(e.target.value)}\n                    placeholder=\"Nhập địa chỉ mới\"\n                    autoSize={{ minRows: 2, maxRows: 6 }}\n                />\n            ),\n            onOk: async () => {\n                if (!newAddress.trim()) {\n                    message.error(\"Vui lòng nhập địa chỉ.\");\n                    return;\n                }\n\n                const token = localStorage.getItem(\"token\");\n                const customerId = localStorage.getItem(\"customerId\");\n\n                try {\n                    const response = await fetch(`${BASE_URL}/employee/${customerId}/update-address/${addressId}`, {\n                        method: 'PUT',\n                        headers: {\n                            'Authorization': `Bearer ${token}`,\n                            'Content-Type': 'application/json',\n                            'Accept': 'application/json'\n                        },\n                        body: JSON.stringify({ address: newAddress })\n                    });\n\n                    if (response.ok) {\n                        message.success(\"Cập nhật địa chỉ thành công!\");\n                        setNewAddress(\"\");\n                        fetchAddresses(); // Refresh the addresses list\n                    } else {\n                        message.error(\"Không thể cập nhật địa chỉ.\");\n                    }\n                } catch (error) {\n                    message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n                }\n            },\n            onCancel() {\n                setNewAddress(\"\");\n            },\n        });\n    };\n\n    const handleSetDefaultAddress = async (addressId) => {\n        const token = localStorage.getItem(\"token\");\n        const customerId = localStorage.getItem(\"customerId\");\n\n        try {\n            const response = await fetch(`${BASE_URL}/customer/${customerId}/addresses/${addressId}/set-default`, {\n                method: 'PUT',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Accept': 'application/json'\n                }\n            });\n\n            if (response.ok) {\n                message.success(\"Đã đặt địa chỉ mặc định!\");\n                setDefaultAddress(`home${addressId}`);\n\n                // Update the local state directly instead of calling fetchAddresses()\n                setAddresses(prevAddresses => prevAddresses.map(address => ({\n                    ...address,\n                    isDefault: address.id === addressId\n                })));\n            } else {\n                message.error(\"Không thể đặt địa chỉ mặc định.\");\n            }\n        } catch (error) {\n            message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n        }\n    };\n\n    return (\n        <div className=\"address-container\">\n            <div className=\"address-header\">\n                <div>\n                    <b>Địa chỉ của bạn</b>\n                    <p className=\"address-subtext\">Quản lý thông tin địa chỉ của bạn</p>\n                </div>\n                <button className=\"add-address-button\" onClick={showModal}>+ Thêm địa chỉ mới</button>\n            </div>\n\n            <div className=\"address-list\" style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>\n                {addresses && addresses.length > 0 ? (\n                    addresses.map((address, index) => (\n                        <div\n                            key={index}\n                            className=\"address-item\"\n                            style={{\n                                padding: '16px',\n                                backgroundColor: '#fff',\n                                borderRadius: '8px',\n                                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n                                // border: address.isDefault ? '2px solid #1890ff' : '1px solid #e8e8e8',\n                                position: 'relative'\n                            }}\n                        >\n                            <div className=\"address-info\" style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n                                <b style={{ fontSize: '16px', marginRight: '15px' }}>\n                                    {address.name}\n                                </b>\n                                <p style={{ color: '#666', margin: '0' }}>\n                                    {address.phone}\n                                </p>\n                                {address.isDefault && (\n                                    <div\n                                        className=\"default-badge\"\n                                        style={{\n                                            backgroundColor: '#00a651',\n                                            color: 'white',\n                                            borderRadius: '4px',\n                                            fontSize: '12px',\n                                            marginLeft: '10px'\n                                        }}\n                                    >\n                                        <b>Mặc định</b>\n                                    </div>\n                                )}\n                            </div>\n                            <p\n                                className=\"address-text\"\n                                style={{\n                                    margin: '0 0 15px',\n                                    fontSize: '15px',\n                                    lineHeight: '1.5',\n                                    width: '30%',\n                                }}\n                            >\n                                {address.address}\n                            </p>\n\n                            <div\n                                className=\"address-actions\"\n                                style={{\n                                    display: 'flex',\n                                    justifyContent: 'space-between',\n                                    borderTop: '1px solid #f0f0f0',\n                                    paddingTop: '10px'\n                                }}\n                            >\n                                <div style={{ display: 'flex', gap: '15px' }}>\n                                    <b\n                                        className=\"update-button\"\n                                        onClick={() => handleUpdateAddress(address.id, address.address)}\n                                        style={{\n                                            color: '#00a651',\n                                            cursor: 'pointer',\n                                            transition: 'color 0.3s'\n                                        }}\n                                    >\n                                        Cập nhật\n                                    </b>\n                                    <b\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteAddress(address.id)}\n                                        style={{\n                                            color: '#ff4d4f',\n                                            cursor: 'pointer',\n                                            transition: 'color 0.3s'\n                                        }}\n                                    >\n                                        Xóa\n                                    </b>\n                                </div>\n                                <div\n                                    className=\"default-checkbox\"\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        gap: '8px'\n                                    }}\n                                >\n                                    <p style={{ margin: '0', fontSize: '14px' }}>Chọn làm mặc định</p>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={address.isDefault}\n                                        onChange={() => handleSetDefaultAddress(address.id)}\n                                        style={{\n                                            width: '16px',\n                                            height: '16px',\n                                            cursor: 'pointer',\n                                            backgroundColor: '#00a651'\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    ))\n                ) : (\n                    <p style={{\n                        textAlign: 'center',\n                        padding: '20px',\n                        backgroundColor: '#fff',\n                        borderRadius: '8px',\n                        boxShadow: '0 2px 8px rgba(0,0,0,0.05)'\n                    }}>\n                        Không có địa chỉ nào.\n                    </p>\n                )}\n            </div>\n\n            <Modal\n                title=\"Thêm địa chỉ mới\"\n                visible={isModalVisible}\n                onCancel={handleCancel}\n                footer={[\n                    <Button key=\"back\" onClick={handleCancel}>\n                        Hủy\n                    </Button>,\n                    <Button key=\"submit\" type=\"primary\" loading={loading} onClick={handleAddAddress}>\n                        Thêm\n                    </Button>,\n                ]}\n            >\n                <Input.TextArea\n                    value={newAddress}\n                    onChange={(e) => setNewAddress(e.target.value)}\n                    placeholder=\"Nhập địa chỉ mới\"\n                    autoSize={{ minRows: 3, maxRows: 6 }}\n                />\n            </Modal>\n        </div>\n    );\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/profile/owner/address.jsx b/../FE/home-clean-fe/src/components/profile/owner/address.jsx
--- a/../FE/home-clean-fe/src/components/profile/owner/address.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/components/profile/owner/address.jsx	(date 1743672482079)
@@ -5,351 +5,395 @@
 import "../owner/profile.css";
 
 export const Address = () => {
-    const { user, dispatch } = useContext(AuthContext);
-    const [defaultAddress, setDefaultAddress] = useState("");
+  const { user, dispatch } = useContext(AuthContext);
+  const [defaultAddress, setDefaultAddress] = useState("");
 
-    const [addresses, setAddresses] = useState([]);
-    const [isModalVisible, setIsModalVisible] = useState(false);
-    const [newAddress, setNewAddress] = useState("");
-    const [loading, setLoading] = useState(false);
+  const [addresses, setAddresses] = useState([]);
+  const [isModalVisible, setIsModalVisible] = useState(false);
+  const [newAddress, setNewAddress] = useState("");
+  const [loading, setLoading] = useState(false);
 
-    const fetchAddresses = async () => {
-        const token = localStorage.getItem("token");
-        const customerId = localStorage.getItem("customerId");
+  const fetchAddresses = async () => {
+    const token = localStorage.getItem("token");
+    const customerId = localStorage.getItem("customerId");
 
-        if (token && customerId) {
-            try {
-                const response = await fetch(`${BASE_URL}/customer/${customerId}/addresses`, {
-                    method: 'GET',
-                    headers: {
-                        'Authorization': `Bearer ${token}`,
-                        'Accept': 'application/json'
-                    }
-                });
+    if (token && customerId) {
+      try {
+        const response = await fetch(
+          `${BASE_URL}/customer/${customerId}/addresses`,
+          {
+            method: "GET",
+            headers: {
+              Authorization: `Bearer ${token}`,
+              Accept: "application/json",
+            },
+          }
+        );
 
-                if (response.ok) {
-                    const responseData = await response.json();
+        if (response.ok) {
+          const responseData = await response.json();
 
-                    // Handle the new API response format
-                    // The API now returns an array of address objects directly
-                    const formattedAddresses = responseData.map(item => ({
-                        id: item.id, // Using the actual ID from the response
-                        address: item.address,
-                        isDefault: item.is_current,
-                        name: item.customer?.full_name || user?.name || "",
-                        phone: item.customer?.phone || user?.phone || ""
-                    }));
+          // Handle the new API response format
+          // The API now returns an array of address objects directly
+          const formattedAddresses = responseData.map((item) => ({
+            id: item.id, // Using the actual ID from the response
+            address: item.address,
+            isDefault: item.is_current,
+            name: item.customer?.full_name || user?.name || "",
+            phone: item.customer?.phone || user?.phone || "",
+          }));
 
-                    setAddresses(formattedAddresses);
-                } else {
-                    message.error("Không thể lấy danh sách địa chỉ.");
-                }
-            } catch (error) {
-                message.error("Lỗi máy chủ, vui lòng thử lại sau.");
-            }
-        }
-    };
+          setAddresses(formattedAddresses);
+        } else {
+          message.error("Không thể lấy danh sách địa chỉ.");
+        }
+      } catch (error) {
+        message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+      }
+    }
+  };
 
-    useEffect(() => {
-        fetchAddresses();
-    }, [dispatch]);
+  useEffect(() => {
+    fetchAddresses();
+  }, [dispatch]);
 
-    const showModal = () => {
-        setIsModalVisible(true);
-    };
+  const showModal = () => {
+    setIsModalVisible(true);
+  };
 
-    const handleCancel = () => {
-        setIsModalVisible(false);
-        setNewAddress("");
-    };
+  const handleCancel = () => {
+    setIsModalVisible(false);
+    setNewAddress("");
+  };
 
-    const handleAddAddress = async () => {
-        if (!newAddress.trim()) {
-            message.error("Vui lòng nhập địa chỉ.");
-            return;
-        }
+  const handleAddAddress = async () => {
+    if (!newAddress.trim()) {
+      message.error("Vui lòng nhập địa chỉ.");
+      return;
+    }
 
-        setLoading(true);
-        const token = localStorage.getItem("token");
-        const customerId = localStorage.getItem("customerId");
+    setLoading(true);
+    const token = localStorage.getItem("token");
+    const customerId = localStorage.getItem("customerId");
 
-        try {
-            const response = await fetch(`${BASE_URL}/customer/${customerId}/create-address`, {
-                method: 'POST',
-                headers: {
-                    'Authorization': `Bearer ${token}`,
-                    'Content-Type': 'application/json',
-                    'Accept': 'application/json'
-                },
-                body: JSON.stringify({ address: newAddress })
-            });
+    try {
+      const response = await fetch(
+        `${BASE_URL}/customer/${customerId}/create_address`,
+        {
+          method: "POST",
+          headers: {
+            Authorization: `Bearer ${token}`,
+            "Content-Type": "application/json",
+            Accept: "application/json",
+          },
+          body: JSON.stringify({ address: newAddress }),
+        }
+      );
 
-            if (response.ok) {
-                message.success("Thêm địa chỉ mới thành công!");
-                setIsModalVisible(false);
-                setNewAddress("");
-                fetchAddresses(); // Refresh the addresses list
-            } else {
-                message.error("Không thể thêm địa chỉ mới.");
-            }
-        } catch (error) {
-            message.error("Lỗi máy chủ, vui lòng thử lại sau.");
-        } finally {
-            setLoading(false);
-        }
-    };
+      if (response.ok) {
+        message.success("Thêm địa chỉ mới thành công!");
+        setIsModalVisible(false);
+        setNewAddress("");
+        fetchAddresses(); // Refresh the addresses list
+      } else {
+        message.error("Không thể thêm địa chỉ mới.");
+      }
+    } catch (error) {
+      message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+    } finally {
+      setLoading(false);
+    }
+  };
 
-    const handleDeleteAddress = async (addressId) => {
+  const handleDeleteAddress = async (addressId) => {
+    Modal.confirm({
+      title: "Xác nhận xóa",
+      content: "Bạn có chắc chắn muốn xóa địa chỉ này không?",
+      okText: "Xác nhận",
+      cancelText: "Hủy",
+      onOk: async () => {
         const token = localStorage.getItem("token");
-        const customerId = localStorage.getItem("customerId");
 
         try {
-            const response = await fetch(`${BASE_URL}/employee/${customerId}/delete-address/${addressId}`, {
-                method: 'DELETE',
-                headers: {
-                    'Authorization': `Bearer ${token}`,
-                    'Accept': 'application/json'
-                }
-            });
+          const response = await fetch(
+            `${BASE_URL}/customer/${addressId}/delete_address`,
+            {
+              method: "DELETE",
+              headers: {
+                Authorization: `Bearer ${token}`,
+                Accept: "application/json",
+              },
+            }
+          );
 
-            if (response.ok) {
-                message.success("Xóa địa chỉ thành công!");
-                fetchAddresses(); // Refresh the addresses list
-            } else {
-                message.error("Không thể xóa địa chỉ.");
-            }
+          if (response.ok) {
+            message.success("Xóa địa chỉ thành công!");
+            fetchAddresses(); // Refresh the addresses list
+          } else {
+            message.error("Không thể xóa địa chỉ.");
+          }
         } catch (error) {
-            message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+          message.error("Lỗi máy chủ, vui lòng thử lại sau.");
         }
-    };
+      },
+    });
+  };
 
-    const handleUpdateAddress = async (addressId, currentAddress) => {
-        Modal.confirm({
-            title: 'Cập nhật địa chỉ',
-            content: (
-                <Input.TextArea
-                    defaultValue={currentAddress}
-                    onChange={(e) => setNewAddress(e.target.value)}
-                    placeholder="Nhập địa chỉ mới"
-                    autoSize={{ minRows: 2, maxRows: 6 }}
-                />
-            ),
-            onOk: async () => {
-                if (!newAddress.trim()) {
-                    message.error("Vui lòng nhập địa chỉ.");
-                    return;
-                }
+  const handleUpdateAddress = async (addressId, currentAddress) => {
+    Modal.confirm({
+      title: "Cập nhật địa chỉ",
+      content: (
+        <Input.TextArea
+          defaultValue={currentAddress}
+          onChange={(e) => setNewAddress(e.target.value)}
+          placeholder="Nhập địa chỉ mới"
+          autoSize={{ minRows: 2, maxRows: 6 }}
+        />
+      ),
+      onOk: async () => {
+        if (!newAddress.trim()) {
+          message.error("Vui lòng nhập địa chỉ.");
+          return;
+        }
 
-                const token = localStorage.getItem("token");
-                const customerId = localStorage.getItem("customerId");
-
-                try {
-                    const response = await fetch(`${BASE_URL}/employee/${customerId}/update-address/${addressId}`, {
-                        method: 'PUT',
-                        headers: {
-                            'Authorization': `Bearer ${token}`,
-                            'Content-Type': 'application/json',
-                            'Accept': 'application/json'
-                        },
-                        body: JSON.stringify({ address: newAddress })
-                    });
+        const token = localStorage.getItem("token");
+        const customerId = localStorage.getItem("customerId");
+        try {
+          const response = await fetch(
+            `${BASE_URL}/customer/${customerId}/update_address/${addressId}`,
+            {
+              method: "PUT",
+              headers: {
+                Authorization: `Bearer ${token}`,
+                "Content-Type": "application/json",
+                Accept: "application/json",
+              },
+              body: JSON.stringify({ address: newAddress }),
+            }
+          );
 
-                    if (response.ok) {
-                        message.success("Cập nhật địa chỉ thành công!");
-                        setNewAddress("");
-                        fetchAddresses(); // Refresh the addresses list
-                    } else {
-                        message.error("Không thể cập nhật địa chỉ.");
-                    }
-                } catch (error) {
-                    message.error("Lỗi máy chủ, vui lòng thử lại sau.");
-                }
-            },
-            onCancel() {
-                setNewAddress("");
-            },
-        });
-    };
+          if (response.ok) {
+            message.success("Cập nhật địa chỉ thành công!");
+            setNewAddress("");
+            fetchAddresses(); // Refresh the addresses list
+          } else {
+            message.error("Không thể cập nhật địa chỉ.");
+          }
+        } catch (error) {
+          message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+        }
+      },
+      onCancel() {
+        setNewAddress("");
+      },
+    });
+  };
 
-    const handleSetDefaultAddress = async (addressId) => {
-        const token = localStorage.getItem("token");
-        const customerId = localStorage.getItem("customerId");
+  const handleSetDefaultAddress = async (addressId) => {
+    const token = localStorage.getItem("token");
+    const customerId = localStorage.getItem("customerId");
 
-        try {
-            const response = await fetch(`${BASE_URL}/customer/${customerId}/addresses/${addressId}/set-default`, {
-                method: 'PUT',
-                headers: {
-                    'Authorization': `Bearer ${token}`,
-                    'Accept': 'application/json'
-                }
-            });
+    try {
+      const response = await fetch(
+        `${BASE_URL}/customer/${customerId}/addresses/${addressId}/set-default`,
+        {
+          method: "PUT",
+          headers: {
+            Authorization: `Bearer ${token}`,
+            Accept: "application/json",
+          },
+        }
+      );
 
-            if (response.ok) {
-                message.success("Đã đặt địa chỉ mặc định!");
-                setDefaultAddress(`home${addressId}`);
+      if (response.ok) {
+        message.success("Đã đặt địa chỉ mặc định!");
+        setDefaultAddress(`home${addressId}`);
 
-                // Update the local state directly instead of calling fetchAddresses()
-                setAddresses(prevAddresses => prevAddresses.map(address => ({
-                    ...address,
-                    isDefault: address.id === addressId
-                })));
-            } else {
-                message.error("Không thể đặt địa chỉ mặc định.");
-            }
-        } catch (error) {
-            message.error("Lỗi máy chủ, vui lòng thử lại sau.");
-        }
-    };
+        // Update the local state directly instead of calling fetchAddresses()
+        setAddresses((prevAddresses) =>
+          prevAddresses.map((address) => ({
+            ...address,
+            isDefault: address.id === addressId,
+          }))
+        );
+      } else {
+        message.error("Không thể đặt địa chỉ mặc định.");
+      }
+    } catch (error) {
+      message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+    }
+  };
 
-    return (
-        <div className="address-container">
-            <div className="address-header">
-                <div>
-                    <b>Địa chỉ của bạn</b>
-                    <p className="address-subtext">Quản lý thông tin địa chỉ của bạn</p>
-                </div>
-                <button className="add-address-button" onClick={showModal}>+ Thêm địa chỉ mới</button>
-            </div>
+  return (
+    <div className="address-container">
+      <div className="address-header">
+        <div>
+          <b>Địa chỉ của bạn</b>
+          <p className="address-subtext">Quản lý thông tin địa chỉ của bạn</p>
+        </div>
+        <button className="add-address-button" onClick={showModal}>
+          + Thêm địa chỉ mới
+        </button>
+      </div>
 
-            <div className="address-list" style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
-                {addresses && addresses.length > 0 ? (
-                    addresses.map((address, index) => (
-                        <div
-                            key={index}
-                            className="address-item"
-                            style={{
-                                padding: '16px',
-                                backgroundColor: '#fff',
-                                borderRadius: '8px',
-                                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
-                                // border: address.isDefault ? '2px solid #1890ff' : '1px solid #e8e8e8',
-                                position: 'relative'
-                            }}
-                        >
-                            <div className="address-info" style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>
-                                <b style={{ fontSize: '16px', marginRight: '15px' }}>
-                                    {address.name}
-                                </b>
-                                <p style={{ color: '#666', margin: '0' }}>
-                                    {address.phone}
-                                </p>
-                                {address.isDefault && (
-                                    <div
-                                        className="default-badge"
-                                        style={{
-                                            backgroundColor: '#00a651',
-                                            color: 'white',
-                                            borderRadius: '4px',
-                                            fontSize: '12px',
-                                            marginLeft: '10px'
-                                        }}
-                                    >
-                                        <b>Mặc định</b>
-                                    </div>
-                                )}
-                            </div>
-                            <p
-                                className="address-text"
-                                style={{
-                                    margin: '0 0 15px',
-                                    fontSize: '15px',
-                                    lineHeight: '1.5',
-                                    width: '30%',
-                                }}
-                            >
-                                {address.address}
-                            </p>
+      <div
+        className="address-list"
+        style={{ display: "flex", flexDirection: "column", gap: "16px" }}
+      >
+        {addresses && addresses.length > 0 ? (
+          addresses.map((address, index) => (
+            <div
+              key={index}
+              className="address-item"
+              style={{
+                padding: "16px",
+                backgroundColor: "#fff",
+                borderRadius: "8px",
+                boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
+                // border: address.isDefault ? '2px solid #1890ff' : '1px solid #e8e8e8',
+                position: "relative",
+              }}
+            >
+              <div
+                className="address-info"
+                style={{
+                  display: "flex",
+                  alignItems: "center",
+                  marginBottom: "10px",
+                }}
+              >
+                <b style={{ fontSize: "16px", marginRight: "15px" }}>
+                  {address.name}
+                </b>
+                <p style={{ color: "#666", margin: "0" }}>{address.phone}</p>
+                {address.isDefault && (
+                  <div
+                    className="default-badge"
+                    style={{
+                      backgroundColor: "#00a651",
+                      color: "white",
+                      borderRadius: "4px",
+                      fontSize: "12px",
+                      marginLeft: "10px",
+                    }}
+                  >
+                    <b>Mặc định</b>
+                  </div>
+                )}
+              </div>
+              <p
+                className="address-text"
+                style={{
+                  margin: "0 0 15px",
+                  fontSize: "15px",
+                  lineHeight: "1.5",
+                  width: "30%",
+                }}
+              >
+                {address.address}
+              </p>
 
-                            <div
-                                className="address-actions"
-                                style={{
-                                    display: 'flex',
-                                    justifyContent: 'space-between',
-                                    borderTop: '1px solid #f0f0f0',
-                                    paddingTop: '10px'
-                                }}
-                            >
-                                <div style={{ display: 'flex', gap: '15px' }}>
-                                    <b
-                                        className="update-button"
-                                        onClick={() => handleUpdateAddress(address.id, address.address)}
-                                        style={{
-                                            color: '#00a651',
-                                            cursor: 'pointer',
-                                            transition: 'color 0.3s'
-                                        }}
-                                    >
-                                        Cập nhật
-                                    </b>
-                                    <b
-                                        className="delete-button"
-                                        onClick={() => handleDeleteAddress(address.id)}
-                                        style={{
-                                            color: '#ff4d4f',
-                                            cursor: 'pointer',
-                                            transition: 'color 0.3s'
-                                        }}
-                                    >
-                                        Xóa
-                                    </b>
-                                </div>
-                                <div
-                                    className="default-checkbox"
-                                    style={{
-                                        display: 'flex',
-                                        alignItems: 'center',
-                                        gap: '8px'
-                                    }}
-                                >
-                                    <p style={{ margin: '0', fontSize: '14px' }}>Chọn làm mặc định</p>
-                                    <input
-                                        type="checkbox"
-                                        checked={address.isDefault}
-                                        onChange={() => handleSetDefaultAddress(address.id)}
-                                        style={{
-                                            width: '16px',
-                                            height: '16px',
-                                            cursor: 'pointer',
-                                            backgroundColor: '#00a651'
-                                        }}
-                                    />
-                                </div>
-                            </div>
-                        </div>
-                    ))
-                ) : (
-                    <p style={{
-                        textAlign: 'center',
-                        padding: '20px',
-                        backgroundColor: '#fff',
-                        borderRadius: '8px',
-                        boxShadow: '0 2px 8px rgba(0,0,0,0.05)'
-                    }}>
-                        Không có địa chỉ nào.
-                    </p>
-                )}
-            </div>
+              <div
+                className="address-actions"
+                style={{
+                  display: "flex",
+                  justifyContent: "space-between",
+                  borderTop: "1px solid #f0f0f0",
+                  paddingTop: "10px",
+                }}
+              >
+                <div style={{ display: "flex", gap: "15px" }}>
+                  <b
+                    className="update-button"
+                    onClick={() =>
+                      handleUpdateAddress(address.id, address.address)
+                    }
+                    style={{
+                      color: "#00a651",
+                      cursor: "pointer",
+                      transition: "color 0.3s",
+                    }}
+                  >
+                    Cập nhật
+                  </b>
+                  <b
+                    className="delete-button"
+                    onClick={() => handleDeleteAddress(address.id)}
+                    style={{
+                      color: "#ff4d4f",
+                      cursor: "pointer",
+                      transition: "color 0.3s",
+                    }}
+                  >
+                    Xóa
+                  </b>
+                </div>
+                <div
+                  className="default-checkbox"
+                  style={{
+                    display: "flex",
+                    alignItems: "center",
+                    gap: "8px",
+                  }}
+                >
+                  <p style={{ margin: "0", fontSize: "14px" }}>
+                    Chọn làm mặc định
+                  </p>
+                  <input
+                    type="checkbox"
+                    checked={address.isDefault}
+                    onChange={() => handleSetDefaultAddress(address.id)}
+                    style={{
+                      width: "16px",
+                      height: "16px",
+                      cursor: "pointer",
+                      backgroundColor: "#00a651",
+                    }}
+                  />
+                </div>
+              </div>
+            </div>
+          ))
+        ) : (
+          <p
+            style={{
+              textAlign: "center",
+              padding: "20px",
+              backgroundColor: "#fff",
+              borderRadius: "8px",
+              boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
+            }}
+          >
+            Không có địa chỉ nào.
+          </p>
+        )}
+      </div>
 
-            <Modal
-                title="Thêm địa chỉ mới"
-                visible={isModalVisible}
-                onCancel={handleCancel}
-                footer={[
-                    <Button key="back" onClick={handleCancel}>
-                        Hủy
-                    </Button>,
-                    <Button key="submit" type="primary" loading={loading} onClick={handleAddAddress}>
-                        Thêm
-                    </Button>,
-                ]}
-            >
-                <Input.TextArea
-                    value={newAddress}
-                    onChange={(e) => setNewAddress(e.target.value)}
-                    placeholder="Nhập địa chỉ mới"
-                    autoSize={{ minRows: 3, maxRows: 6 }}
-                />
-            </Modal>
-        </div>
-    );
-};
\ No newline at end of file
+      <Modal
+        title="Thêm địa chỉ mới"
+        visible={isModalVisible}
+        onCancel={handleCancel}
+        footer={[
+          <Button key="back" onClick={handleCancel}>
+            Hủy
+          </Button>,
+          <Button
+            key="submit"
+            type="primary"
+            loading={loading}
+            onClick={handleAddAddress}
+          >
+            Thêm
+          </Button>,
+        ]}
+      >
+        <Input.TextArea
+          value={newAddress}
+          onChange={(e) => setNewAddress(e.target.value)}
+          placeholder="Nhập địa chỉ mới"
+          autoSize={{ minRows: 3, maxRows: 6 }}
+        />
+      </Modal>
+    </div>
+  );
+};
Index: ../FE/home-clean-fe/src/index.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  /* animation: fadeSlideIn 1.2s ease-in-out; */\n}\n\n:where(.css-dev-only-do-not-override-1yacf91).ant-btn-variant-solid {\n  background: #039855 !important;\n  border-color: #039855 !important;\n}\n\n:where(.css-dev-only-do-not-override-1yacf91).ant-btn-variant-solid:hover {\n  background: #027a44 !important;\n  border-color: #027a44 !important;\n}\n\n/* .hero,\n.service-section,\n.service-section,\n.testimonial-section,\n.news-section,\n.main-content,\n.infomation-container,\n.contact-container {\n  animation: fadeSlideIn 1.2s ease-in-out;\n} */\n\nhtml,\nbody {\n  height: 100%;\n  margin: 0;\n}\n\n@keyframes fadeSlideIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\nbody {\n  font-family: \"Roboto\", 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  font-optical-sizing: auto;\n  font-style: normal;\n  line-height: 1.6;\n  scroll-behavior: smooth;\n}\n\n.app {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: #f5f5f5;\n}\n\n/* .Login-page{\n  min-height: ;\n} */\n/* Navbar styles */\n.navbar {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1rem 0;\n  /* background: white;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); */\n  max-width: 1200px;\n  margin: 0 auto;\n  width: 100%;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  color: #00a651;\n  font-weight: bold;\n}\n\n.logo-img {\n  height: 60px;\n  width: auto;\n}\n\n.login-logo-img {\n  height: 80px;\n  width: auto;\n}\n\n.menu {\n  display: flex;\n  gap: 2rem;\n  list-style: none;\n}\n\n.nav-link {\n  text-decoration: none;\n  color: #333;\n  transition: color 0.3s ease;\n  font-weight: bold;\n}\n\n.nav-link:hover {\n  color: #00a651;\n}\n\n.hamburger {\n  display: none;\n  flex-direction: column;\n  gap: 6px;\n  cursor: pointer;\n  padding: 10px;\n}\n\n.hamburger span {\n  display: block;\n  width: 25px;\n  height: 3px;\n  background-color: #333;\n  transition: all 0.3s ease;\n}\n\n.mobile-login {\n  display: none;\n}\n\n\n.Container {\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n/* Hero styles */\n.hero {\n  background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(\"https://images.unsplash.com/photo-1581578731548-c64695cc6952?auto=format&fit=crop&w=1200&q=80\");\n  background-size: cover;\n  background-position: center;\n  color: white;\n  padding: 4rem 2rem;\n  border-radius: 10px;\n  margin: 1rem auto;\n  max-width: 1200px;\n}\n\n.hero-content {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 3rem 2rem;\n}\n\n.hero h1 {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n}\n\n.hero-stats {\n  display: flex;\n  gap: 3rem;\n  margin: 2rem 0;\n}\n\n.stat {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  font-weight: bold;\n}\n\n.stat-label {\n  font-size: 0.9rem;\n  opacity: 0.8;\n}\n\n/* Service section styles */\n.service-section,\n.testimonial-section,\n.news-section,\n.job-list-section {\n  padding: 2rem 0;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n\n\n.section-title {\n  color: #333;\n  margin-bottom: 2rem;\n  position: relative;\n  display: inline-block;\n  font-size: 1.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.section-title::after {\n  content: \"\";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 60px;\n  height: 3px;\n  background: #00a651;\n}\n\n\n\n.service-grid {\n  display: flex;\n  justify-content: space-between;\n  gap: 1rem;\n  overflow-x: auto;\n  padding-bottom: 1rem;\n}\n\n.service-card {\n  flex: 0 0 calc(25% - 0.75rem);\n  min-width: 250px;\n}\n\n/* Features section styles */\n.features-section {\n  padding: 3rem 2rem;\n  background: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url('https://images.unsplash.com/photo-1581578731548-c64695cc6952?auto=format&fit=crop&w=1200&q=80');\n  background-size: cover;\n  background-position: center;\n  background-attachment: fixed;\n}\n\n.features-grid {\n  max-width: 1200px;\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 2rem;\n}\n\n.feature-card {\n  text-align: center;\n  color: white;\n  padding: 2rem;\n  transition: transform 0.3s ease;\n}\n\n.feature-card:hover {\n  transform: translateY(-10px);\n}\n\n.feature-icon {\n  font-size: 2.5rem;\n  margin-bottom: 1rem;\n  background: rgba(255, 255, 255, 0.1);\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto 1rem;\n}\n\n.feature-title {\n  font-size: 1.2rem;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.feature-description {\n  font-size: 0.9rem;\n  opacity: 0.9;\n  line-height: 1.5;\n}\n\n/* Testimonial section styles */\n/* .testimonial-section {\n  padding: 3rem 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n} */\n\n.testimonial-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 1.5rem;\n}\n\n.testimonial-card {\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.rating {\n  margin-bottom: 1rem;\n}\n\n.star {\n  color: #ddd;\n  font-size: 1.2rem;\n}\n\n.star.filled {\n  color: #ffc107;\n}\n\n.testimonial-content {\n  color: #333;\n  font-size: 0.9rem;\n  line-height: 1.6;\n  margin-bottom: 1rem;\n  min-height: 4.8rem;\n}\n\n.testimonial-author {\n  display: flex;\n  align-items: center;\n  gap: 0.8rem;\n}\n\n.author-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.author-name {\n  font-size: 0.9rem;\n  color: #666;\n}\n\n/* News section styles */\n/* .news-section {\n  padding: 3rem 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n} */\n\n.news-grid {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: 1.5rem;\n  overflow-x: auto;\n  padding: 1rem 0 1rem 0;\n}\n\n.news-card {\n  background: white;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease;\n}\n\n.news-card:hover {\n  transform: translateY(-5px);\n}\n\n.news-image {\n  position: relative;\n  height: 200px;\n}\n\n.news-image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.news-date {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 0.3rem 0.8rem;\n  font-size: 0.8rem;\n}\n\n.news-content {\n  padding: 1rem;\n}\n\n.news-title {\n  font-size: 1rem;\n  color: #333;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.news-description {\n  font-size: 0.9rem;\n  color: #666;\n  line-height: 1.5;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n/* Service card styles */\n.service-card {\n  background: white;\n  border-radius: 10px;\n  margin-top: 5px;\n  overflow: hidden;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease;\n}\n\n\n\n.service-card:hover {\n  transform: translateY(-5px);\n}\n\n.card-image {\n  position: relative;\n  height: 150px;\n}\n\n\n\n.card-image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.favorite-btn {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: white;\n  border: none;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background 0.3s ease;\n}\n\n.favorite-btn:hover {\n  background: #ffebee;\n  color: #ff4081;\n}\n\n\n\n.card-content {\n  padding: 1rem;\n}\n\n\n\n.service-title {\n  margin-bottom: 0.5rem;\n  color: #333;\n}\n\n.service-description {\n  color: #666;\n  font-size: 0.9rem;\n  margin-bottom: 1rem;\n}\n\n.service-meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.rating {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.stars {\n  color: #ffc107;\n}\n\n.review-count {\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.price {\n  font-weight: bold;\n  color: #00a651;\n}\n\n.card-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.user-avatars {\n  display: flex;\n}\n\n.avatar {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  border: 2px solid white;\n  margin-left: -10px;\n}\n\n.avatar:first-child {\n  margin-left: 0;\n}\n\n.hire-btn {\n  background: #00a651;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.hire-btn:hover {\n  background: #008c44;\n  transform: scale(1.05);\n}\n\n/* Login styles */\n.login-btn {\n  background: #00a651;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 64px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  text-decoration: none;\n}\n\n.login-btn:hover {\n  background: #008c44;\n}\n\n.login-container {\n  height: 100%;\n  display: flex;\n  align-items: center;\n}\n\n.login-box h2 {\n  text-align: center;\n  margin-bottom: 16px;\n  color: #333;\n  font-size: 24px;\n}\n\n.login-box {\n  background: white;\n  padding: 32px;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  width: 100%;\n}\n\n.form-group {\n  margin-bottom: 16px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 6px;\n  color: #333;\n  font-size: 14px;\n}\n\n.form-group input,\n.form-group textarea {\n  width: 100%;\n  padding: 10px;\n  font-size: 14px;\n  border-radius: 8px;\n  border: 1px solid #ddd;\n  transition: border-color 0.3s ease;\n}\n\n.form-group input.error,\n.form-group textarea.error {\n  border-color: red;\n  border-width: 1px;\n  outline: none;\n}\n\n.form-group input:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #039855;\n}\n\n.form-group.error input,\n.form-group.error textarea {\n  border-color: red;\n}\n\n.form-group.form-group-otp .otp-input {\n  display: flex;\n  justify-content: space-between;\n  gap: 1rem;\n}\n\n.form-checkbox {\n  display: flex;\n  align-items: center;\n  margin-bottom: 16px;\n  font-size: 14px;\n}\n\n.form-checkbox input[type=\"checkbox\"] {\n  margin-right: 8px;\n}\n\n.forgot-password {\n  margin-left: auto;\n  color: #039855;\n  text-decoration: none;\n  font-size: 14px;\n}\n\n.login-button {\n  width: 100%;\n  padding: 12px;\n  background-color: #039855;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 15px;\n  cursor: pointer;\n  margin-bottom: 16px;\n}\n\n.otp-button {\n  width: 100%;\n  padding: 10px;\n  background-color: #fff;\n  color: black;\n  border-radius: 4px;\n  border: 3px solid #039855;\n  font-size: 14px;\n  cursor: pointer;\n}\n\n.otp-button:hover {\n  background-color: #039855;\n  color: white;\n  border-radius: 4px;\n  border-color: #039855;\n}\n\n.login-button:hover {\n  background-color: #0D8A4E;\n}\n\n.social-login {\n  text-align: center;\n  margin-top: 16px;\n}\n\n.social-login p {\n  color: #666;\n  margin-bottom: 12px;\n  font-size: 14px;\n}\n\n.social-buttons {\n  display: flex;\n  gap: 8px;\n}\n\n.social-buttons button {\n  flex: 1;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  background: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.social-buttons img {\n  width: 16px;\n  height: 16px;\n}\n\n.signup-link {\n  text-align: center;\n  margin-top: 16px;\n  color: #666;\n  font-size: 14px;\n}\n\n.signup-link a {\n  color: #039855;\n  text-decoration: none;\n  font-weight: 500;\n}\n\n.signup-link a:hover {\n  text-decoration: underline;\n}\n\n.login-logo {\n  display: flex;\n  justify-content: center;\n}\n\n.login-container-right {\n  display: grid;\n}\n\n.register-selection {\n  margin-bottom: 24px;\n}\n\n.selection-label {\n  font-size: 14px;\n  color: #333;\n  margin-bottom: 12px;\n}\n\n.selection-options {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.selection-option {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.selection-option:hover {\n  border-color: #00a651;\n  background-color: #f9f9f9;\n}\n\n.selection-option input[type=\"radio\"] {\n  width: 20px;\n  height: 20px;\n  margin: 0;\n  cursor: pointer;\n  accent-color: #039855;\n}\n\n.selection-option input[type=\"radio\"]:checked+.option-text {\n  color: #00a651;\n  font-weight: 500;\n}\n\n.option-text {\n  font-size: 14px;\n  color: #333;\n}\n\n/* Footer styles */\n.footer {\n  background-color: #039855;\n  color: white;\n  padding: 40px 0;\n  max-height: 280px;\n  margin-top: auto;\n}\n\n.footer-content {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n  display: flex;\n  justify-content: space-between;\n  gap: 40px;\n}\n\n.footer-section {\n  flex: 2;\n}\n\n.footer-logo {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.footer-logo img {\n  width: 40px;\n  height: 40px;\n}\n\n.footer-logo h2 {\n  margin: 0;\n  font-size: 24px;\n}\n\n.footer-description {\n  margin-bottom: 20px;\n  line-height: 1.6;\n  font-size: 14px;\n}\n\n.footer-links {\n  flex: 1;\n  display: flex;\n  justify-content: space-around;\n  gap: 20px;\n}\n\n.footer-column h3 {\n  color: white;\n  margin-bottom: 20px;\n  font-size: 18px;\n}\n\n.footer-column ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.footer-column ul li {\n  margin-bottom: 10px;\n}\n\n.footer-column ul li a {\n  color: white;\n  text-decoration: none;\n  font-size: 14px;\n}\n\n.footer-column ul li a:hover {\n  text-decoration: underline;\n}\n\n/* Main content styles */\n.main-content {\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  max-width: 1440px;\n  margin: 0 auto;\n  width: 100%;\n  padding: 30px;\n  justify-content: center;\n  align-items: center;\n  gap: 40px;\n}\n\n.main-image {\n  flex: 0.6;\n\n}\n\n.main-image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 8px;\n  max-height: 700px;\n}\n\n.main-content>*:last-child {\n  flex: 0.4;\n}\n\n\n\n/*User Profile*/\n.user-section {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.username {\n  font-size: 16px;\n  font-weight: bold;\n  color: #333;\n}\n\n/* Error Message Styles */\n.error-message-container {\n  height: 20px;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n}\n\n.error-message {\n  color: red;\n  font-size: 14px;\n  margin-top: 4px;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 0.3s ease-in-out, visibility 0.3s;\n}\n\n.error-message.show {\n  opacity: 1;\n  visibility: visible;\n}\n\n.password-input-container {\n  position: relative;\n}\n\n.password-input-container input {\n  width: 100%;\n  padding-right: 30px;\n  /* Đảm bảo có không gian cho icon */\n}\n\n.password-toggle {\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  cursor: pointer;\n  font-size: 20px;\n}\n\n.password-toggle svg {\n  animation: none;\n}\n\n/* About Us */\n/* Story Section */\n.story-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 40px 20px;\n}\n\n.story-container h2 {\n  font-size: 2rem;\n  color: #333;\n  margin-bottom: 15px;\n}\n\n.divider {\n  display: flex;\n  margin-bottom: 30px;\n}\n\n.divider-green {\n  background: #00a651;\n  height: 3px;\n  width: 100px;\n}\n\n.divider-gray {\n  background: #e0e0e0;\n  height: 3px;\n  flex: 1;\n}\n\n.story-content {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 40px;\n  align-items: start;\n}\n\n.story-text p {\n  color: #666;\n  line-height: 1.8;\n  /* margin-bottom: 20px; */\n  font-size: 1rem;\n}\n\n/* .story-images {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px;\n} */\n\n.story-images img {\n  width: 100%;\n  /* height: 200px; */\n  object-fit: cover;\n  /* border-radius: 8px; */\n  /* box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); */\n}\n\n/* Services Section */\n.services-section {\n  background: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('../src/assets/bgintroduce.png');\n  background-size: cover;\n  background-position: center;\n  padding: 60px 0;\n  color: white;\n}\n\n.services-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.services-container h2 {\n  font-size: 2rem;\n\n}\n\n.services-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 30px;\n  margin-top: 40px;\n}\n\n.service-item {\n  /* background: rgba(255, 255, 255, 0.1); */\n  padding: 30px;\n  border-radius: 10px;\n  transition: transform 0.3s ease;\n}\n\n.service-item:hover {\n  transform: translateY(-5px);\n}\n\n.service-icon {\n  width: 60px;\n  height: 60px;\n  background: white;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 20px;\n}\n\n/* .service-icon img {\n  width: 30px;\n  height: 30px;\n} */\n\n.service-item b {\n  display: block;\n  font-size: 1.2rem;\n  margin-bottom: 10px;\n}\n\n.service-item p {\n  color: rgba(255, 255, 255, 0.8);\n  line-height: 1.6;\n}\n\n/* Team Section */\n.team-section {\n  max-width: 1200px;\n  margin: 60px auto;\n  padding: 0 20px;\n}\n\n.team-section h2 {\n  font-size: 2rem;\n  color: #333;\n  margin-bottom: 15px;\n}\n\n.team-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 40px;\n  margin-top: 40px;\n}\n\n.team-member {\n  padding: 20px;\n\n}\n\n/* .team-member:hover {\n  transform: translateY(-5px);\n} */\n\n.team-member img {\n  width: 70px;\n  height: 70px;\n  border-radius: 50%;\n  margin-bottom: 20px;\n  object-fit: cover;\n}\n\n.team-member b {\n  display: block;\n  font-size: 1.2rem;\n  color: #333;\n  margin-bottom: 5px;\n}\n\n.team-member .role {\n  color: #00a651;\n  margin-bottom: 10px;\n}\n\n.team-member p {\n  color: #666;\n  margin-bottom: 20px;\n  line-height: 1.6;\n}\n\n.social-icons {\n  display: flex;\n  gap: 15px;\n}\n\n.social-icons img {\n  width: 24px;\n  height: 24px;\n  transition: opacity 0.3s ease;\n}\n\n.social-icons img:hover {\n  opacity: 0.8;\n}\n\n.desktop-login {\n  display: flex;\n  align-items: center;\n}\n\n\n/* All media queries grouped together */\n@media (max-width: 1200px) {\n  .service-grid {\n    flex-wrap: wrap;\n  }\n\n  .service-card {\n    flex: 1 1 calc(25% - 0.5rem);\n  }\n\n  .Container {\n    padding: 0 24px;\n  }\n\n  .job-list-section {\n    padding: 2rem;\n  }\n}\n\n@media (max-width: 1024px) {\n  .main-content {\n    padding: 20px;\n  }\n\n  .main-image {\n    flex: 0.5;\n    margin-right: 24px;\n  }\n\n  .main-content>*:last-child {\n    flex: 0.5;\n  }\n\n  .features-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .testimonial-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .news-grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n\n  .story-content,\n  .services-grid,\n  .team-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n@media (width <=991px) {\n\n  .service-section,\n  .features-section,\n  .testimonial-section,\n  .news-section {\n    padding: 10px 40px;\n  }\n\n  .Container {\n    padding: 0 24px;\n  }\n\n  .hero-stats {\n    gap: 1rem;\n  }\n}\n\n@media (max-width: 768px) {\n  .hamburger {\n    display: flex;\n  }\n\n  .nav-content {\n    position: absolute;\n    top: 12%;\n    left: 0;\n    right: 0;\n    background: white;\n    padding: 1rem;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    transform: translateY(-100%);\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease;\n  }\n\n  .nav-content.active {\n    transform: translateY(0);\n    opacity: 1;\n    visibility: visible;\n    z-index: 1000;\n  }\n\n  .menu {\n    flex-direction: column;\n    gap: 1rem;\n    align-items: center;\n  }\n\n  .desktop-login {\n    display: none;\n  }\n\n  .mobile-login {\n    display: block;\n  }\n\n  /* Hamburger animation */\n  .hamburger.active span:nth-child(1) {\n    transform: rotate(45deg) translate(8px, 8px);\n  }\n\n  .hamburger.active span:nth-child(2) {\n    opacity: 0;\n  }\n\n  .hamburger.active span:nth-child(3) {\n    transform: rotate(-45deg) translate(7px, -7px);\n  }\n\n  .main-content {\n    flex-direction: column;\n    padding: 16px;\n  }\n\n  .main-image {\n    display: none;\n  }\n\n  .main-content>*:last-child {\n    flex: 1;\n    width: 100%;\n    max-width: 400px;\n    margin: 0 auto;\n  }\n\n  .footer-content {\n    flex-direction: column;\n  }\n\n  .footer-links {\n    flex-direction: row;\n    justify-content: flex-start;\n  }\n\n  .footer-column {\n    flex: 1;\n  }\n\n  .testimonial-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .news-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .footer {\n    max-height: none;\n  }\n\n  .story-content,\n  .services-grid,\n  .team-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .services-section {\n    padding: 40px 0;\n  }\n\n  .team-member {\n    max-width: 400px;\n    margin: 0 auto;\n  }\n\n  .job-list-section {\n    padding: 2rem;\n    display: grid;\n    grid-auto-rows: auto;\n  }\n}\n\n@media (max-width: 640px) {\n  .service-card {\n    flex: 0 0 48%;\n  }\n\n  .features-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n@media (max-width: 480px) {\n  .news-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .story-container h2,\n  .services-container h2,\n  .team-section h2 {\n    font-size: 1.5rem;\n  }\n\n  .service-item {\n    padding: 20px;\n  }\n}\n\n@media screen and (min-width: 62em) {\n  .Body {\n    padding: 1.25rem;\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/index.css b/../FE/home-clean-fe/src/index.css
--- a/../FE/home-clean-fe/src/index.css	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/index.css	(date 1743672482080)
@@ -25,6 +25,9 @@
 .contact-container {
   animation: fadeSlideIn 1.2s ease-in-out;
 } */
+.infomation-container,.job-list-section{
+  min-height: 600px;
+}
 
 html,
 body {
Index: ../FE/home-clean-fe/src/context/AuthContext.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { createContext, useEffect, useReducer } from \"react\";\n\n// Hàm kiểm tra và parse JSON an toàn\nconst getUserFromLocalStorage = () => {\n    try {\n        const user = localStorage.getItem(\"user\");\n        return user ? JSON.parse(user) : null;\n    } catch (error) {\n        console.error(\"Lỗi khi parse JSON:\", error);\n        return null;\n    }\n};\nconst getCleanerFromLocalStorage = () => {\n    try {\n        const cleaner = localStorage.getItem(\"cleaner\");\n        return cleaner ? JSON.parse(cleaner) : null;\n    } catch (error) {\n        console.error(\"Lỗi khi parse JSON:\", error);\n        return null;\n    }\n};\nconst initial_state = {\n    user: getUserFromLocalStorage(),\n    cleaner: getCleanerFromLocalStorage(),\n    token: localStorage.getItem(\"token\") || null,\n    customerId: localStorage.getItem(\"customerId\") || null,\n    cleanerId: localStorage.getItem(\"cleanerId\") || null,\n    loading: false,\n    error: null,\n};\n\nexport const AuthContext = createContext(initial_state);\n\nconst AuthReducer = (state, action) => {\n    switch (action.type) {\n        case \"LOGIN_START\":\n            return { ...state, user: null, loading: true, error: null };\n\n        case \"LOGIN_SUCCESS_CUSTOMER\":\n            const customerLogin = {\n                name: action.payload.name,\n                phone: action.payload.phone,\n                token: action.payload.token,\n                customerId: action.payload.customerId,\n                // role: action.payload.role\n            };\n            localStorage.setItem(\"user\", JSON.stringify(customerLogin));\n            return {\n                ...state,\n                user: customerLogin,\n                token: action.payload.token,\n                customerId: action.payload.customerId,\n                loading: false,\n                error: null\n            };\n\n        // case \"LOGIN_SUCCESS_CLEANER\":\n        //     const { name: empName, token: tokenC, cleanerId, phone: empPhone } = action.payload;\n\n        //     // Lưu thông tin của cleaner vào localStorage\n        //     localStorage.setItem(\"name\", empName);\n        //     localStorage.setItem(\"cleanerId\", cleanerId);\n        //     localStorage.setItem(\"token\", tokenC);\n\n        //     return {\n        //         ...state,\n        //         cleaner: { empName, empPhone },\n        //         token: tokenC,\n        //         cleanerId,\n        //         loading: false,\n        //         error: null\n        //     };\n\n        case \"LOGIN_SUCCESS_CLEANER\":\n\n\n            const cleanerLogin = {\n                name: action.payload.name,\n                phone: action.payload.phone,\n                token: action.payload.token,\n                cleanerId: action.payload.cleanerId,\n            };\n\n            localStorage.setItem(\"cleaner\", JSON.stringify(cleanerLogin));\n\n            return {\n                ...state,\n                cleaner: cleanerLogin,\n                token: action.payload.token,\n                cleanerId: action.payload.cleanerId,\n                loading: false,\n                error: null\n            };\n\n        case \"FETCH_PROFILE_SUCCESS_CUSTOMER\":\n            const { name: customerName, phone: customerPhone } = action.payload;\n            const customerProfile = { customerName, customerPhone };\n            localStorage.setItem(\"user\", JSON.stringify(customerProfile));\n            return { ...state, user: customerProfile };\n\n        case \"FETCH_PROFILE_SUCCESS_CLEANER\":\n            const { name: cleanerName, phone: cleanerPhone, email: cleanerEmail, age: cleanerAge, address: cleanerAddress, identity_number: cleanerIDnum, experience: cleanerExp, profile_image } = action.payload;\n            const cleanerProfile = { cleanerName, cleanerPhone, cleanerEmail, cleanerAge, cleanerAddress, cleanerIDnum, cleanerExp, profile_image };\n            localStorage.setItem(\"cleaner\", JSON.stringify(cleanerProfile));\n            return { ...state, cleaner: cleanerProfile };\n\n        case \"LOGIN_FAILURE\":\n            return { ...state, user: null, loading: false, error: action.payload };\n\n        case \"UPDATE_USER\":\n            const updatedUser = { ...state.user, ...action.payload };\n            localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n            return { ...state, user: updatedUser };\n\n        case \"LOGOUT\":\n            localStorage.removeItem(\"user\");\n            localStorage.removeItem(\"cleaner\");\n            localStorage.removeItem(\"name\");\n            localStorage.removeItem(\"token\");\n            localStorage.removeItem(\"role\");\n            localStorage.removeItem(\"customerId\");\n            localStorage.removeItem(\"cleanerId\");\n            return {\n                ...state,\n                user: null,\n                cleaner: null,\n                token: null,\n                customerId: null,\n                cleanerId: null,\n                name: null,\n                role: null,\n                loading: false,\n                error: null\n            };\n\n\n\n        default:\n            return state;\n    }\n};\n\nexport const AuthContextProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AuthReducer, initial_state);\n\n    useEffect(() => {\n        if (state.user) {\n            localStorage.setItem(\"user\", JSON.stringify(state.user));\n        } else {\n            localStorage.removeItem(\"user\");\n        }\n    }, [state.user]);\n\n    useEffect(() => {\n        if (state.cleaner) {\n            localStorage.setItem(\"cleaner\", JSON.stringify(state.cleaner));\n        } else {\n            localStorage.removeItem(\"cleaner\");\n        }\n    }, [state.cleaner]);\n    return (\n        <AuthContext.Provider value={{ ...state, dispatch }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/context/AuthContext.js b/../FE/home-clean-fe/src/context/AuthContext.js
--- a/../FE/home-clean-fe/src/context/AuthContext.js	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/context/AuthContext.js	(date 1743672482079)
@@ -38,8 +38,8 @@
 
         case "LOGIN_SUCCESS_CUSTOMER":
             const customerLogin = {
-                name: action.payload.name,
-                phone: action.payload.phone,
+                customerName: action.payload.name,
+                customerPhone: action.payload.phone,
                 token: action.payload.token,
                 customerId: action.payload.customerId,
                 // role: action.payload.role
@@ -72,11 +72,9 @@
         //     };
 
         case "LOGIN_SUCCESS_CLEANER":
-
-
             const cleanerLogin = {
-                name: action.payload.name,
-                phone: action.payload.phone,
+                cleanerName: action.payload.name, // Change name to cleanerName
+                cleanerPhone: action.payload.phone, // Change phone to cleanerPhone
                 token: action.payload.token,
                 cleanerId: action.payload.cleanerId,
             };
@@ -92,6 +90,24 @@
                 error: null
             };
 
+        case "LOGIN_SUCCESS_ADMIN":
+            const adminLogin = {
+                adminName: action.payload.name,
+                adminEmail: action.payload.email,
+                token: action.payload.token,
+                adminId: action.payload.adminId,
+                // role: action.payload.role
+            };
+            localStorage.setItem("admin", JSON.stringify(adminLogin));
+            return {
+                ...state,
+                admin: adminLogin,
+                token: action.payload.token,
+                adminId: action.payload.adminId,
+                loading: false,
+                error: null
+            };
+
         case "FETCH_PROFILE_SUCCESS_CUSTOMER":
             const { name: customerName, phone: customerPhone } = action.payload;
             const customerProfile = { customerName, customerPhone };
@@ -112,21 +128,30 @@
             localStorage.setItem("user", JSON.stringify(updatedUser));
             return { ...state, user: updatedUser };
 
+        case "UPDATE_CLEANER":
+            const updatedCleaner = { ...state.cleaner, ...action.payload };
+            localStorage.setItem("cleaner", JSON.stringify(updatedCleaner));
+            return { ...state, cleaner: updatedCleaner };
+
         case "LOGOUT":
             localStorage.removeItem("user");
             localStorage.removeItem("cleaner");
+            localStorage.removeItem("admin");
             localStorage.removeItem("name");
             localStorage.removeItem("token");
             localStorage.removeItem("role");
             localStorage.removeItem("customerId");
             localStorage.removeItem("cleanerId");
+            localStorage.removeItem("adminId");
             return {
                 ...state,
                 user: null,
                 cleaner: null,
+                admin:null,
                 token: null,
                 customerId: null,
                 cleanerId: null,
+                adminId:null,
                 name: null,
                 role: null,
                 loading: false,
@@ -158,6 +183,13 @@
             localStorage.removeItem("cleaner");
         }
     }, [state.cleaner]);
+    useEffect(() => {
+        if (state.admin) {
+            localStorage.setItem("admin", JSON.stringify(state.admin));
+        } else {
+            localStorage.removeItem("admin");
+        }
+    }, [state.admin]);
     return (
         <AuthContext.Provider value={{ ...state, dispatch }}>
             {children}
Index: ../FE/home-clean-fe/src/pages/CleanerDetails/CleanerDetails.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCleanerDetails } from \"../../components/api/CleanerDetail\";\nimport { ImageGallery } from \"../../components/cleaner-details/ImageGallery\";\nimport { ServiceInfo } from \"../../components/cleaner-details/ServiceInfo\";\nimport { PriceSection } from \"../../components/cleaner-details/PriceSection\";\nimport { TabsSection } from \"../../components/cleaner-details/TabsSection\";\nimport styles from \"../../components/cleaner-details/styles.module.css\";\n\nexport const CleanerDetails = () => {\n  const { cleanerId } = useParams();\n  const [cleaner, setCleaner] = useState(null);\n\n  useEffect(() => {\n    if (!cleanerId) {\n      console.error(\"Cleaner ID không hợp lệ!\");\n      return;\n    }\n\n    async function loadCleaner() {\n      const data = await fetchCleanerDetails(cleanerId);\n      if (data) {\n        setCleaner(data);\n      }\n    }\n    loadCleaner();\n  }, [cleanerId]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.mainContainer}>\n        <ImageGallery image={cleaner?.profileImage} />\n        <div className={styles.rightSection}>\n          <ServiceInfo\n            cleanerName={cleaner?.cleanerName}\n            averageRating={cleaner?.averageRating}\n          />\n          <PriceSection\n            cleanerId={cleanerId}  // Pass cleanerId here\n            cleanerName={cleaner?.cleanerName}  // Pass cleanerName here\n          />\n        </div>\n      </div>\n      <TabsSection />\n    </div>\n  );\n};\n\nexport default CleanerDetails;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/CleanerDetails/CleanerDetails.jsx b/../FE/home-clean-fe/src/pages/CleanerDetails/CleanerDetails.jsx
--- a/../FE/home-clean-fe/src/pages/CleanerDetails/CleanerDetails.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/pages/CleanerDetails/CleanerDetails.jsx	(date 1743672482086)
@@ -1,9 +1,9 @@
 import { useEffect, useState } from "react";
 import { useParams } from "react-router-dom";
-import { fetchCleanerDetails } from "../../components/api/CleanerDetail";
+import { fetchCleanerDetails } from "../../services/owner/OwnerAPI";
 import { ImageGallery } from "../../components/cleaner-details/ImageGallery";
 import { ServiceInfo } from "../../components/cleaner-details/ServiceInfo";
-import { PriceSection } from "../../components/cleaner-details/PriceSection";
+import PriceSection from "../../components/cleaner-details/PriceSection";
 import { TabsSection } from "../../components/cleaner-details/TabsSection";
 import styles from "../../components/cleaner-details/styles.module.css";
 
@@ -36,8 +36,8 @@
             averageRating={cleaner?.averageRating}
           />
           <PriceSection
-            cleanerId={cleanerId}  // Pass cleanerId here
-            cleanerName={cleaner?.cleanerName}  // Pass cleanerName here
+            cleanerId={cleanerId} // Pass cleanerId here
+            cleanerName={cleaner?.cleanerName} // Pass cleanerName here
           />
         </div>
       </div>
@@ -46,4 +46,4 @@
   );
 };
 
-export default CleanerDetails;
\ No newline at end of file
+export default CleanerDetails;
Index: ../FE/home-clean-fe/src/layouts/Layout.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\"\nimport { useLocation } from \"react-router-dom\"\nimport Navbar from \"../components/Home/Owner/Navbar\"\nimport Footer from \"../components/Home/Owner/Footer\"\nimport Routers from \"../routers/Routers\"\n\nconst Layout = () => {\n    const location = useLocation()\n\n    // Danh sách các trang không cần Navbar và Footer\n    const hideNavbarFooter = [\n        \"/login\",\n        \"/register\",\n        \"/forgot-password\",\n        \"/register/user\",\n        \"/register/cleaner\",\n        \"/login\",\n        \"/login/user\",\n        \"/login/cleaner\",\n        \"/homeclean\",\n        \"/\",\n        \"/infomationcleaner\",\n        \"/activityjob\",\n        \"/applysuccess\",\n        \"/job-list\"\n    ].includes(location.pathname) || location.pathname.startsWith(\"/workdetail/\")\n\n    return (\n        <>\n            {!hideNavbarFooter && <Navbar />}\n            <Routers />\n            {!hideNavbarFooter && <Footer />}\n        </>\n    )\n}\n\nexport default Layout\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/layouts/Layout.jsx b/../FE/home-clean-fe/src/layouts/Layout.jsx
--- a/../FE/home-clean-fe/src/layouts/Layout.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/layouts/Layout.jsx	(date 1743672482081)
@@ -1,37 +1,42 @@
-import React from "react"
-import { useLocation } from "react-router-dom"
-import Navbar from "../components/Home/Owner/Navbar"
-import Footer from "../components/Home/Owner/Footer"
-import Routers from "../routers/Routers"
+import React from "react";
+import { useLocation } from "react-router-dom";
+import Navbar from "../components/Home/Owner/Navbar";
+import Footer from "../components/Home/Owner/Footer";
+import Routers from "../routers/Routers";
 
 const Layout = () => {
-    const location = useLocation()
+  const location = useLocation();
 
-    // Danh sách các trang không cần Navbar và Footer
-    const hideNavbarFooter = [
-        "/login",
-        "/register",
-        "/forgot-password",
-        "/register/user",
-        "/register/cleaner",
-        "/login",
-        "/login/user",
-        "/login/cleaner",
-        "/homeclean",
-        "/",
-        "/infomationcleaner",
-        "/activityjob",
-        "/applysuccess",
-        "/job-list"
-    ].includes(location.pathname) || location.pathname.startsWith("/workdetail/")
+  // Danh sách các trang không cần Navbar và Footer
+  const hideNavbarFooter =
+    [
+      "/login",
+      "/register",
+      "/forgot-password",
+      "/register/user",
+      "/register/cleaner",
+      "/login",
+      "/login/user",
+      "/login/cleaner",
+      "/homeclean",
+      "/",
+      "/infomationcleaner",
+      "/activityjob",
+      "/applysuccess",
+      "/job-list",
+      "/admin-login",
+      "/admin",
+    ].includes(location.pathname) ||
+    location.pathname.startsWith("/workdetail/") ||
+    location.pathname.startsWith("/admin/");
 
-    return (
-        <>
-            {!hideNavbarFooter && <Navbar />}
-            <Routers />
-            {!hideNavbarFooter && <Footer />}
-        </>
-    )
-}
+  return (
+    <>
+      {!hideNavbarFooter && <Navbar />}
+      <Routers />
+      {!hideNavbarFooter && <Footer />}
+    </>
+  );
+};
 
-export default Layout
+export default Layout;
Index: ../FE/home-clean-fe/src/pages/profile/cleanner/infomationCleaner.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState, useContext } from \"react\";\nimport MenuInfomation from \"../../../components/profile/cleanner/menu_Infomation\";\nimport { PersonaInformation } from \"../../../components/profile/cleanner/personal_information\";\nimport { Address } from \"../../../components/profile/cleanner/address\";\nimport { AuthContext } from \"../../../context/AuthContext\";\nimport { BASE_URL } from \"../../../utils/config\";\nimport { message } from \"antd\";\nimport Navbar from \"../../../components/Home/Cleaner/Navbar\";\nimport Footer from \"../../../components/Home/Cleaner/Footer\";\nimport { WalletBalance } from \"../../../components/profile/cleanner/wallet_balance\";\n\nconst InfomationCleaner = () => {\n    const { dispatch } = useContext(AuthContext); // Lấy thông tin user từ AuthContext\n    const [selectedMenu, setSelectedMenu] = useState(\"1\");\n\n    useEffect(() => {\n        const fetchProfile = async () => {\n            const token = localStorage.getItem(\"token\");\n            const cleanerId = localStorage.getItem(\"cleanerId\");\n\n            if (token && cleanerId) {\n                try {\n                    const response = await fetch(`${BASE_URL}/employee/${cleanerId}/get-employee-profile`, {\n                        method: 'GET',\n                        headers: { 'Authorization': `Bearer ${token}` },\n                    });\n\n                    const { data } = await response.json();\n                    if (response.ok) {\n                        dispatch({ type: 'FETCH_PROFILE_SUCCESS_CLEANER', payload: data });\n                        // localStorage.setItem(\"cleaner\", JSON.stringify(data)); // Lưu lại thông tin cleaner vào localStorage\n                    } else {\n                        message.error(\"Không thể lấy thông tin người dùng.\");\n                    }\n                } catch (error) {\n                    message.error(\"Lỗi máy chủ, vui lòng thử lại sau.\");\n                }\n            }\n        };\n\n        fetchProfile();\n    }, [dispatch]);\n\n    const menuComponents = {\n        \"1\": <PersonaInformation />,\n        \"2\": <Address />,\n        \"3\": <WalletBalance />\n    };\n\n    return (\n        <>\n            <Navbar />\n            <div className=\"infomation-container\">\n                <div className=\"menu-container\">\n                    <MenuInfomation selectedMenu={selectedMenu} setSelectedMenu={setSelectedMenu} />\n                </div>\n                <div className=\"content-container\">\n                    {/* Hiển thị component theo lựa chọn menu */}\n                    {menuComponents[selectedMenu] || <p>Chưa có nội dung</p>}\n                </div>\n            </div>\n            <Footer />\n        </>\n    );\n};\n\nexport default InfomationCleaner;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/profile/cleanner/infomationCleaner.jsx b/../FE/home-clean-fe/src/pages/profile/cleanner/infomationCleaner.jsx
--- a/../FE/home-clean-fe/src/pages/profile/cleanner/infomationCleaner.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/pages/profile/cleanner/infomationCleaner.jsx	(date 1743672482087)
@@ -10,58 +10,64 @@
 import { WalletBalance } from "../../../components/profile/cleanner/wallet_balance";
 
 const InfomationCleaner = () => {
-    const { dispatch } = useContext(AuthContext); // Lấy thông tin user từ AuthContext
-    const [selectedMenu, setSelectedMenu] = useState("1");
+  const { dispatch } = useContext(AuthContext); // Lấy thông tin user từ AuthContext
+  const [selectedMenu, setSelectedMenu] = useState("1");
 
-    useEffect(() => {
-        const fetchProfile = async () => {
-            const token = localStorage.getItem("token");
-            const cleanerId = localStorage.getItem("cleanerId");
+  useEffect(() => {
+    const fetchProfile = async () => {
+      const token = localStorage.getItem("token");
+      const cleanerId = localStorage.getItem("cleanerId");
 
-            if (token && cleanerId) {
-                try {
-                    const response = await fetch(`${BASE_URL}/employee/${cleanerId}/get-employee-profile`, {
-                        method: 'GET',
-                        headers: { 'Authorization': `Bearer ${token}` },
-                    });
+      if (token && cleanerId) {
+        try {
+          const response = await fetch(
+            `${BASE_URL}/employee/${cleanerId}/get_employee_profile`,
+            {
+              method: "GET",
+              headers: { Authorization: `Bearer ${token}` },
+            }
+          );
 
-                    const { data } = await response.json();
-                    if (response.ok) {
-                        dispatch({ type: 'FETCH_PROFILE_SUCCESS_CLEANER', payload: data });
-                        // localStorage.setItem("cleaner", JSON.stringify(data)); // Lưu lại thông tin cleaner vào localStorage
-                    } else {
-                        message.error("Không thể lấy thông tin người dùng.");
-                    }
-                } catch (error) {
-                    message.error("Lỗi máy chủ, vui lòng thử lại sau.");
-                }
-            }
-        };
+          const { data } = await response.json();
+          if (response.ok) {
+            dispatch({ type: "FETCH_PROFILE_SUCCESS_CLEANER", payload: data });
+            // localStorage.setItem("cleaner", JSON.stringify(data)); // Lưu lại thông tin cleaner vào localStorage
+          } else {
+            message.error("Không thể lấy thông tin người dùng.");
+          }
+        } catch (error) {
+          message.error("Lỗi máy chủ, vui lòng thử lại sau.");
+        }
+      }
+    };
 
-        fetchProfile();
-    }, [dispatch]);
+    fetchProfile();
+  }, [dispatch]);
 
-    const menuComponents = {
-        "1": <PersonaInformation />,
-        "2": <Address />,
-        "3": <WalletBalance />
-    };
+  const menuComponents = {
+    1: <PersonaInformation />,
+    2: <Address />,
+    3: <WalletBalance />,
+  };
 
-    return (
-        <>
-            <Navbar />
-            <div className="infomation-container">
-                <div className="menu-container">
-                    <MenuInfomation selectedMenu={selectedMenu} setSelectedMenu={setSelectedMenu} />
-                </div>
-                <div className="content-container">
-                    {/* Hiển thị component theo lựa chọn menu */}
-                    {menuComponents[selectedMenu] || <p>Chưa có nội dung</p>}
-                </div>
-            </div>
-            <Footer />
-        </>
-    );
+  return (
+    <>
+      <Navbar />
+      <div className="infomation-container">
+        <div className="menu-container">
+          <MenuInfomation
+            selectedMenu={selectedMenu}
+            setSelectedMenu={setSelectedMenu}
+          />
+        </div>
+        <div className="content-container">
+          {/* Hiển thị component theo lựa chọn menu */}
+          {menuComponents[selectedMenu] || <p>Chưa có nội dung</p>}
+        </div>
+      </div>
+      <Footer />
+    </>
+  );
 };
 
 export default InfomationCleaner;
Index: ../FE/home-clean-fe/src/pages/ForgotPass.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport '../index.css';\nimport Footer from '../components/Home/Owner/Footer';\nimport logo from '../assets/HouseClean_logo.png';\nimport { Link } from 'react-router-dom';\nimport ImgLeft from '../assets/deep-cleaning-list-hero.jpg';\n\nfunction ForgotPassword() {\n    return (\n        <div className=\"app\">\n            <main className=\"main-content\">\n                <div className=\"main-image\">\n                    <img src={ImgLeft} alt=\"Interior\" />\n                </div>\n\n                <div className=\"login-container login-container-right\">\n                    <div className=\"logo login-logo\">\n                        <Link to=\"/\">\n                            <img\n                                src={logo}\n                                alt=\"House Clean Logo\"\n                                className=\"logo-img login-logo-img\"\n                            />\n                        </Link>\n                    </div>\n                    <div className=\"login-box\">\n\n\n                        <h2>Quên Mật Khẩu</h2>\n\n                        <form className=\"login-form\">\n                            <div className=\"form-group\">\n                                <label>Số điện thoại</label>\n                                <input type=\"tel\" placeholder=\"Nhập số điện thoại\" />\n                            </div>\n\n                            <div className=\"form-group form-group-otp\">\n                                <label>Mã xác nhận</label>\n                                <div className=\"otp-input\">\n                                    <input type=\"text\" placeholder=\"Nhập mã xác nhận\" required />\n                                    <button type=\"submit\" className=\"otp-button\">Láy mã</button>\n                                </div>\n                            </div>\n\n                            <button type=\"submit\" className=\"login-button\">Quên mật khẩu</button>\n                        </form>\n\n                        {/* <div className=\"social-login\">\n              <p>Hoặc đăng nhập bằng</p>\n              <div className=\"social-buttons\">\n                <button className=\"google-btn\">\n                  <img src=\"/google-icon.png\" alt=\"Google\" />\n                  Google\n                </button>\n                <button className=\"facebook-btn\">\n                  <img src=\"/facebook-icon.png\" alt=\"Facebook\" />\n                  Facebook\n                </button>\n              </div>\n            </div> */}\n\n                        <p className=\"signup-link\">\n                            Chưa có tài khoản? <Link to=\"/register\">Đăng kí ngay</Link>\n                        </p>\n\n                    </div>\n\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n\nexport default ForgotPassword;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/ForgotPass.jsx b/../FE/home-clean-fe/src/pages/ForgotPass.jsx
--- a/../FE/home-clean-fe/src/pages/ForgotPass.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/pages/ForgotPass.jsx	(date 1743672482087)
@@ -1,11 +1,30 @@
-import React from 'react';
+import React, { useState, useEffect } from 'react';
 import '../index.css';
 import Footer from '../components/Home/Owner/Footer';
 import logo from '../assets/HouseClean_logo.png';
-import { Link } from 'react-router-dom';
-import ImgLeft from '../assets/deep-cleaning-list-hero.jpg';
+import { Link, useNavigate } from 'react-router-dom';
+import ImgLeft from '../assets/image-left.png';
 
 function ForgotPassword() {
+    const [errors, setErrors] = useState({});
+    const [errorMessage, setErrorMessage] = useState('');
+    const navigate = useNavigate();
+
+    const [formData, setFormData] = useState({
+        email: '',
+    });
+
+    useEffect(() => {
+        if (errorMessage) {
+            const timer = setTimeout(() => setErrorMessage(''), 3000);
+            return () => clearTimeout(timer);
+        }
+    }, [errorMessage]);
+
+    const handleChange = (e) => {
+        const { name, value } = e.target;
+        setFormData({ ...formData, [name]: value });
+    };
     return (
         <div className="app">
             <main className="main-content">
@@ -29,19 +48,29 @@
                         <h2>Quên Mật Khẩu</h2>
 
                         <form className="login-form">
-                            <div className="form-group">
-                                <label>Số điện thoại</label>
-                                <input type="tel" placeholder="Nhập số điện thoại" />
+                            <div className={`form-group ${errors.email ? 'error' : ''}`}>
+                                <label>Email</label>
+                                <input
+                                    type="email"
+                                    name="email"
+                                    placeholder="Nhập email"
+                                    value={formData.email}
+                                    onChange={handleChange}
+                                />
                             </div>
 
-                            <div className="form-group form-group-otp">
+                            {/* <div className="form-group form-group-otp">
                                 <label>Mã xác nhận</label>
                                 <div className="otp-input">
-                                    <input type="text" placeholder="Nhập mã xác nhận" required />
-                                    <button type="submit" className="otp-button">Láy mã</button>
+                                    <button type="submit" className="otp-button">Lấy mã</button>
+                                </div>
+                            </div> */}
+
+                            <div className="error-message-container">
+                                <div className={`error-message ${errorMessage ? 'show' : ''}`}>
+                                    {errorMessage}
                                 </div>
                             </div>
-
                             <button type="submit" className="login-button">Quên mật khẩu</button>
                         </form>
 
Index: ../FE/home-clean-fe/src/pages/work/WorkDetail.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\nimport WorkDetailsDesCription from \"../../components/work/WorkDetailsDescription\";\nimport ServiceCard from \"../../components/service-details/ServiceCard\";\nimport styles from \"../../assets/CSS/work/WorkDetails.module.css\";\nimport Navbar from \"../../components/Home/Cleaner/Navbar\";\nimport Footer from \"../../components/Home/Cleaner/Footer\";\nconst WorkDetail = () => {\n    return (\n        <>\n            <Navbar />\n            <div className={styles.container}>\n                <div className={styles.containerbody}>\n                    {/* <div className={styles.backButton}>\n                        <Link to=\"/homeclean\" className={styles.backLink}>\n                            <FaArrowLeft />\n                            <span>Quay lại trang chủ</span>\n                        </Link>\n                    </div> */}\n\n                    <WorkDetailsDesCription />\n\n                    {/* <div className={styles.similarServices}>\n                        <h2 className={styles.sectionTitle}>Dịch vụ tương tự</h2>\n                        <div className={styles.serviceList}>\n                            {Array(5)\n                                .fill(null)\n                                .map((_, index) => (\n                                    <ServiceCard key={index} />\n                                ))}\n                        </div>\n                    </div> */}\n                </div>\n            </div>\n            <Footer />\n        </>\n    );\n};\n\nexport default WorkDetail;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/work/WorkDetail.jsx b/../FE/home-clean-fe/src/pages/work/WorkDetail.jsx
--- a/../FE/home-clean-fe/src/pages/work/WorkDetail.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/pages/work/WorkDetail.jsx	(date 1743672482090)
@@ -7,21 +7,21 @@
 import Navbar from "../../components/Home/Cleaner/Navbar";
 import Footer from "../../components/Home/Cleaner/Footer";
 const WorkDetail = () => {
-    return (
-        <>
-            <Navbar />
-            <div className={styles.container}>
-                <div className={styles.containerbody}>
-                    {/* <div className={styles.backButton}>
+  return (
+    <>
+      <Navbar />
+      <div className={styles.container}>
+        <div className={styles.containerbody}>
+          {/* <div className={styles.backButton}>
                         <Link to="/homeclean" className={styles.backLink}>
                             <FaArrowLeft />
                             <span>Quay lại trang chủ</span>
                         </Link>
                     </div> */}
 
-                    <WorkDetailsDesCription />
+          <WorkDetailsDesCription />
 
-                    {/* <div className={styles.similarServices}>
+          {/* <div className={styles.similarServices}>
                         <h2 className={styles.sectionTitle}>Dịch vụ tương tự</h2>
                         <div className={styles.serviceList}>
                             {Array(5)
@@ -31,11 +31,11 @@
                                 ))}
                         </div>
                     </div> */}
-                </div>
-            </div>
-            <Footer />
-        </>
-    );
+        </div>
+      </div>
+      <Footer />
+    </>
+  );
 };
 
-export default WorkDetail;
\ No newline at end of file
+export default WorkDetail;
Index: ../FE/home-clean-fe/src/pages/register/RegisterCleaner.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\nimport { message } from \"antd\";\nimport Footer from '../../components/Home/Owner/Footer';\nimport logo from '../../assets/HouseClean_logo.png';\nimport { Link, useNavigate } from 'react-router-dom';\nimport ImgLeft from '../../assets/image-left.png';\nimport { BASE_URL } from '../../utils/config';\nimport { validatePhone, validateName, validatePassword, validateConfirmPassword, validateEmail, validateAge, validateIdentityNumber } from \"../../utils/validate\";\nimport { AiFillEye, AiFillEyeInvisible } from 'react-icons/ai';\n\nfunction RegisterCleaner() {\n    const [formData, setFormData] = useState({\n        phone: '',\n        name: '',\n        password: '',\n        confirmPassword: '',\n        email: '',\n        age: '',\n        address: '',\n        identity_number: '',\n        experience: ''\n    });\n\n    const [errors, setErrors] = useState({});\n    const [errorMessage, setErrorMessage] = useState('');\n    const [showPassword, setShowPassword] = useState(false);\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (errorMessage) {\n            const timer = setTimeout(() => setErrorMessage(''), 3000);\n            return () => clearTimeout(timer);\n        }\n    }, [errorMessage]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData({ ...formData, [name]: value });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const { phone, name, password, confirmPassword, email, age, address, identity_number, experience } = formData;\n\n        console.log(\"\uD83D\uDC49 Dữ liệu form trước khi validate:\", formData);\n\n        // Validate all fields\n        const newErrors = {\n            phone: validatePhone(phone),\n            name: validateName(name),\n            password: validatePassword(password),\n            confirmPassword: validateConfirmPassword(password, confirmPassword),\n            email: validateEmail(email),\n            age: validateAge(age),\n            identity_number: validateIdentityNumber(identity_number)\n        };\n\n        if (!address.trim()) {\n            newErrors.address = \"Vui lòng nhập địa chỉ!\";\n        }\n\n        if (!experience.trim()) {\n            newErrors.experience = \"Vui lòng nhập kinh nghiệm!\";\n        }\n\n        console.log(\"\uD83D\uDD0D Lỗi sau khi validate:\", newErrors);\n\n        setErrors(newErrors);\n\n        // Check if there are any errors\n        if (Object.values(newErrors).some(error => error !== \"\")) {\n            setErrorMessage(\"Vui lòng kiểm tra lại thông tin!\");\n            console.warn(\"⚠\uFE0F Có lỗi validate, dừng đăng ký.\");\n            return;\n        }\n\n        console.log(\"\uD83D\uDE80 Dữ liệu gửi đi API:\", {\n            phone,\n            password,\n            name,\n            email,\n            age: parseInt(age),\n            address,\n            identity_number: parseInt(identity_number),\n            experience\n        });\n\n        try {\n            const response = await fetch(`${BASE_URL}/employee/register`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    phone,\n                    password,\n                    name,\n                    email,\n                    age: parseInt(age),\n                    address,\n                    identity_number: parseInt(identity_number),\n                    experience\n                })\n            });\n\n            console.log(\"\uD83D\uDCE4 Phản hồi thô từ server:\", response);\n\n            const result = await response.json();\n            console.log(\"\uD83D\uDCE5 Phản hồi JSON từ server:\", result);\n\n            if (response.ok) {\n                message.success(result.message || 'Đăng ký thành công!');\n                console.log(\"✅ Đăng ký thành công.\");\n                navigate('/login');\n            } else {\n                message.error(result.message || 'Đăng ký thất bại!');\n                // setErrorMessage(result.message || 'Đăng ký thất bại!');\n\n            }\n        } catch (error) {\n            // console.error(\"\uD83D\uDEAB Lỗi kết nối hoặc xử lý:\", error);\n            // setErrorMessage('Lỗi kết nối đến server!');\n            message.error('Lỗi kết nối đến server!');\n        }\n    };\n\n\n    return (\n        <div className=\"app\">\n            <main className=\"main-content\">\n                <div className=\"main-image\">\n                    <img src={ImgLeft} alt=\"Interior\" />\n                </div>\n\n                <div className=\"login-container login-container-right\">\n                    <div className=\"logo login-logo\">\n                        <Link to=\"/\">\n                            <img src={logo} alt=\"House Clean Logo\" className=\"logo-img login-logo-img\" />\n                        </Link>\n                    </div>\n                    <div className=\"login-box\">\n                        <h2>Đăng Ký Người Giúp Việc</h2>\n\n                        <form className=\"login-form\" onSubmit={handleSubmit}>\n                            <div className={`form-group ${errors.phone ? 'error' : ''}`}>\n                                <label>Số điện thoại</label>\n                                <input\n                                    type=\"tel\"\n                                    name=\"phone\"\n                                    placeholder=\"Nhập số điện thoại\"\n                                    value={formData.phone}\n                                    onChange={handleChange}\n                                />\n                            </div>\n\n                            <div className={`form-group ${errors.name ? 'error' : ''}`}>\n                                <label>Họ và tên</label>\n                                <input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    placeholder=\"Nhập họ và tên\"\n                                    value={formData.name}\n                                    onChange={handleChange}\n                                />\n                            </div>\n\n                            <div className={`form-group ${errors.email ? 'error' : ''}`}>\n                                <label>Email</label>\n                                <input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\"Nhập email\"\n                                    value={formData.email}\n                                    onChange={handleChange}\n                                />\n                            </div>\n\n                            <div className={`form-group ${errors.age ? 'error' : ''}`}>\n                                <label>Tuổi</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"age\"\n                                    placeholder=\"Nhập tuổi\"\n                                    value={formData.age}\n                                    onChange={handleChange}\n                                />\n                            </div>\n\n                            <div className={`form-group ${errors.address ? 'error' : ''}`}>\n                                <label>Địa chỉ</label>\n                                <input\n                                    type=\"text\"\n                                    name=\"address\"\n                                    placeholder=\"Nhập địa chỉ\"\n                                    value={formData.address}\n                                    onChange={handleChange}\n                                />\n                            </div>\n\n                            <div className={`form-group ${errors.identity_number ? 'error' : ''}`}>\n                                <label>Số CMND/CCCD</label>\n                                <input\n                                    type=\"text\"\n                                    name=\"identity_number\"\n                                    placeholder=\"Nhập số CMND/CCCD\"\n                                    value={formData.identity_number}\n                                    onChange={handleChange}\n                                />\n                            </div>\n\n                            <div className={`form-group ${errors.experience ? 'error' : ''}`}>\n                                <label>Kinh nghiệm</label>\n                                <textarea\n                                    name=\"experience\"\n                                    placeholder=\"Mô tả kinh nghiệm làm việc của bạn\"\n                                    value={formData.experience}\n                                    onChange={handleChange}\n                                    rows=\"3\"\n                                    className=\"form-textarea\"\n                                />\n                            </div>\n\n                            <div className={`form-group ${errors.password ? 'error' : ''}`}>\n                                <label>Mật khẩu</label>\n                                <div className=\"password-input-container\">\n                                    <input\n                                        type={showPassword ? 'text' : 'password'}\n                                        name=\"password\"\n                                        placeholder=\"Nhập mật khẩu\"\n                                        value={formData.password}\n                                        onChange={handleChange}\n                                    />\n                                    <span\n                                        className=\"password-toggle\"\n                                        onClick={() => setShowPassword(!showPassword)}\n                                    >\n                                        {showPassword ? <AiFillEyeInvisible /> : <AiFillEye />}\n                                    </span>\n                                </div>\n                            </div>\n\n                            <div className={`form-group ${errors.confirmPassword ? 'error' : ''}`}>\n                                <label>Nhập lại mật khẩu</label>\n                                <div className=\"password-input-container\">\n                                    <input\n                                        type={showConfirmPassword ? 'text' : 'password'}\n                                        name=\"confirmPassword\"\n                                        placeholder=\"Nhập lại mật khẩu\"\n                                        value={formData.confirmPassword}\n                                        onChange={handleChange}\n                                    />\n                                    <span\n                                        className=\"password-toggle\"\n                                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                    >\n                                        {showConfirmPassword ? <AiFillEyeInvisible /> : <AiFillEye />}\n                                    </span>\n                                </div>\n                            </div>\n\n                            <div className=\"error-message-container\">\n                                <div className={`error-message ${errorMessage ? 'show' : ''}`}>\n                                    {errorMessage}\n                                </div>\n                            </div>\n\n                            <button type=\"submit\" className=\"login-button\">Đăng Ký</button>\n                        </form>\n\n                        <p className=\"signup-link\">\n                            Đã có tài khoản? <Link to=\"/login\">Đăng nhập ngay</Link>\n                        </p>\n                    </div>\n                </div>\n            </main>\n        </div>\n    );\n}\n\nexport default RegisterCleaner;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/register/RegisterCleaner.jsx b/../FE/home-clean-fe/src/pages/register/RegisterCleaner.jsx
--- a/../FE/home-clean-fe/src/pages/register/RegisterCleaner.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/pages/register/RegisterCleaner.jsx	(date 1743672482089)
@@ -16,7 +16,7 @@
         confirmPassword: '',
         email: '',
         age: '',
-        address: '',
+        address: '',  // Vẫn giữ trường này trong state nhưng sẽ không yêu cầu người dùng nhập
         identity_number: '',
         experience: ''
     });
@@ -42,7 +42,7 @@
 
     const handleSubmit = async (e) => {
         e.preventDefault();
-        const { phone, name, password, confirmPassword, email, age, address, identity_number, experience } = formData;
+        const { phone, name, password, confirmPassword, email, age, identity_number, experience } = formData;
 
         console.log("👉 Dữ liệu form trước khi validate:", formData);
 
@@ -57,9 +57,9 @@
             identity_number: validateIdentityNumber(identity_number)
         };
 
-        if (!address.trim()) {
-            newErrors.address = "Vui lòng nhập địa chỉ!";
-        }
+        // if (!address.trim()) {
+        //     newErrors.address = "Vui lòng nhập địa chỉ!";
+        // }
 
         if (!experience.trim()) {
             newErrors.experience = "Vui lòng nhập kinh nghiệm!";
@@ -76,18 +76,8 @@
             return;
         }
 
-        console.log("🚀 Dữ liệu gửi đi API:", {
-            phone,
-            password,
-            name,
-            email,
-            age: parseInt(age),
-            address,
-            identity_number: parseInt(identity_number),
-            experience
-        });
-
         try {
+            // Luôn gửi address dưới dạng chuỗi trống
             const response = await fetch(`${BASE_URL}/employee/register`, {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
@@ -96,9 +86,9 @@
                     password,
                     name,
                     email,
+                    address: "", // Gửi chuỗi trống cho address
                     age: parseInt(age),
-                    address,
-                    identity_number: parseInt(identity_number),
+                    identity_number,
                     experience
                 })
             });
@@ -110,12 +100,11 @@
 
             if (response.ok) {
                 message.success(result.message || 'Đăng ký thành công!');
-                console.log("✅ Đăng ký thành công.");
+                console.log("Đăng ký thành công.");
                 navigate('/login');
             } else {
                 message.error(result.message || 'Đăng ký thất bại!');
                 // setErrorMessage(result.message || 'Đăng ký thất bại!');
-
             }
         } catch (error) {
             // console.error("🚫 Lỗi kết nối hoặc xử lý:", error);
@@ -152,6 +141,44 @@
                                     onChange={handleChange}
                                 />
                             </div>
+
+                            <div className={`form-group ${errors.password ? 'error' : ''}`}>
+                                <label>Mật khẩu</label>
+                                <div className="password-input-container">
+                                    <input
+                                        type={showPassword ? 'text' : 'password'}
+                                        name="password"
+                                        placeholder="Nhập mật khẩu"
+                                        value={formData.password}
+                                        onChange={handleChange}
+                                    />
+                                    <span
+                                        className="password-toggle"
+                                        onClick={() => setShowPassword(!showPassword)}
+                                    >
+                                        {showPassword ? <AiFillEyeInvisible /> : <AiFillEye />}
+                                    </span>
+                                </div>
+                            </div>
+
+                            <div className={`form-group ${errors.confirmPassword ? 'error' : ''}`}>
+                                <label>Nhập lại mật khẩu</label>
+                                <div className="password-input-container">
+                                    <input
+                                        type={showConfirmPassword ? 'text' : 'password'}
+                                        name="confirmPassword"
+                                        placeholder="Nhập lại mật khẩu"
+                                        value={formData.confirmPassword}
+                                        onChange={handleChange}
+                                    />
+                                    <span
+                                        className="password-toggle"
+                                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
+                                    >
+                                        {showConfirmPassword ? <AiFillEyeInvisible /> : <AiFillEye />}
+                                    </span>
+                                </div>
+                            </div>
 
                             <div className={`form-group ${errors.name ? 'error' : ''}`}>
                                 <label>Họ và tên</label>
@@ -186,7 +213,7 @@
                                 />
                             </div>
 
-                            <div className={`form-group ${errors.address ? 'error' : ''}`}>
+                            {/* <div className={`form-group ${errors.address ? 'error' : ''}`}>
                                 <label>Địa chỉ</label>
                                 <input
                                     type="text"
@@ -195,7 +222,7 @@
                                     value={formData.address}
                                     onChange={handleChange}
                                 />
-                            </div>
+                            </div> */}
 
                             <div className={`form-group ${errors.identity_number ? 'error' : ''}`}>
                                 <label>Số CMND/CCCD</label>
@@ -219,44 +246,6 @@
                                     className="form-textarea"
                                 />
                             </div>
-
-                            <div className={`form-group ${errors.password ? 'error' : ''}`}>
-                                <label>Mật khẩu</label>
-                                <div className="password-input-container">
-                                    <input
-                                        type={showPassword ? 'text' : 'password'}
-                                        name="password"
-                                        placeholder="Nhập mật khẩu"
-                                        value={formData.password}
-                                        onChange={handleChange}
-                                    />
-                                    <span
-                                        className="password-toggle"
-                                        onClick={() => setShowPassword(!showPassword)}
-                                    >
-                                        {showPassword ? <AiFillEyeInvisible /> : <AiFillEye />}
-                                    </span>
-                                </div>
-                            </div>
-
-                            <div className={`form-group ${errors.confirmPassword ? 'error' : ''}`}>
-                                <label>Nhập lại mật khẩu</label>
-                                <div className="password-input-container">
-                                    <input
-                                        type={showConfirmPassword ? 'text' : 'password'}
-                                        name="confirmPassword"
-                                        placeholder="Nhập lại mật khẩu"
-                                        value={formData.confirmPassword}
-                                        onChange={handleChange}
-                                    />
-                                    <span
-                                        className="password-toggle"
-                                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
-                                    >
-                                        {showConfirmPassword ? <AiFillEyeInvisible /> : <AiFillEye />}
-                                    </span>
-                                </div>
-                            </div>
 
                             <div className="error-message-container">
                                 <div className={`error-message ${errorMessage ? 'show' : ''}`}>
Index: ../FE/home-clean-fe/src/routers/Routers.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\"\nimport { Routes, Route } from \"react-router-dom\"\n\nimport HomeOwner from \"../pages/Home/Owner/Home\"\nimport HomeCleaner from \"../pages/Home/Cleaner/HomeCleaner\"\n\nimport LoginUser from \"../pages/login/LoginUser\"\nimport LoginCleaner from \"../pages/login/LoginCleaner\"\nimport LoginSelection from \"../pages/login/LoginSelection\"\n\nimport RegisterUser from \"../pages/register/RegisterUser\"\nimport RegisterSelection from \"../pages/register/RegisterSelection\"\nimport RegisterCleaner from \"../pages/register/RegisterCleaner\"\n\n\nimport ForgotPassword from \"../pages/ForgotPass\"\nimport Infomation from \"../pages/profile/owner/infomation\"\nimport InfomationCleaner from \"../pages/profile/cleanner/infomationCleaner\"\n\nimport About from \"../pages/About\"\n\nimport { ActivityList } from \"../pages/ActivityList\"\n\nimport Contact from \"../pages/Contact\"\nimport ServiceDetails from \"../pages/ServiceDetails/ServiceDetails\"\nimport CleanerDetails from \"../pages/CleanerDetails/CleanerDetails\"\nimport CreateJob from \"../pages/ServiceDetails/CreateJob\"\nimport CreateJobToCleaner from \"../pages/ServiceDetails/CreateJobToCleaner\"\nimport OrderSuccess from \"../pages/order_success/OrderSuccess\"\nimport ApplySuccess from \"../pages/order_success/ApplySuccess\"\nimport WorkDetail from \"../pages/work/WorkDetail\"\nimport ActivityJob from \"../pages/ActivityJob\"\nimport JobListFilter from \"../pages/JobListFilter\"\nimport ServiceDetailsCombo from './../pages/ServiceDetails/ServiceDetailsCombo';\nimport ServiceDetailsCleaner from './../pages/CleanerDetails/ServiceDetail';\n\nconst Routers = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<HomeOwner />} />\n            <Route path=\"/homeclean\" element={<HomeCleaner />} />\n\n            <Route path=\"/login\" element={<LoginSelection />} />\n            <Route path=\"/login/user\" element={<LoginUser />} />\n            <Route path=\"/login/cleaner\" element={<LoginCleaner />} />\n\n            <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n\n            <Route path=\"/register\" element={<RegisterSelection />} />\n            <Route path=\"/register/user\" element={<RegisterUser />} />\n            <Route path=\"/register/cleaner\" element={<RegisterCleaner />} />\n\n            <Route path=\"/activitylist\" element={<ActivityList />} />\n\n            <Route path=\"/contact\" element={<Contact />} />\n\n            <Route path=\"/infomation\" element={<Infomation />} />\n            <Route path=\"/infomationcleaner\" element={<InfomationCleaner />} />\n            <Route path=\"/about\" element={<About />} />\n\n            <Route path=\"/service/:id?\" element={<ServiceDetails />} />\n\n            <Route path=\"/cleaner/:cleanerId\" element={<CleanerDetails />} />\n            <Route path=\"/createjob\" element={<CreateJob />} />\n            <Route path=\"/createjobtocleaner\" element={<CreateJobToCleaner />} />\n            <Route path=\"/activityjob\" element={<ActivityJob />} />\n\n            <Route path=\"/ordersuccess\" element={<OrderSuccess />} />\n            <Route path=\"/applysuccess\" element={<ApplySuccess />} />\n\n            <Route path=\"/workdetail/:jobId?\" element={<WorkDetail />} />\n\n            <Route path=\"/service-details-combo\" element={<ServiceDetailsCombo />} />\n            <Route path=\"/service-details-cleaner\" element={<ServiceDetailsCleaner />} />\n\n            <Route path=\"/job-list\" element={<JobListFilter />} />\n        </Routes>\n    )\n}\n\nexport default Routers
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/routers/Routers.jsx b/../FE/home-clean-fe/src/routers/Routers.jsx
--- a/../FE/home-clean-fe/src/routers/Routers.jsx	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/routers/Routers.jsx	(date 1743672482090)
@@ -1,81 +1,100 @@
-import React from "react"
-import { Routes, Route } from "react-router-dom"
+import React from "react";
+import { Routes, Route } from "react-router-dom";
 
-import HomeOwner from "../pages/Home/Owner/Home"
-import HomeCleaner from "../pages/Home/Cleaner/HomeCleaner"
+import HomeOwner from "../pages/Home/Owner/Home";
+import HomeCleaner from "../pages/Home/Cleaner/HomeCleaner";
 
-import LoginUser from "../pages/login/LoginUser"
-import LoginCleaner from "../pages/login/LoginCleaner"
-import LoginSelection from "../pages/login/LoginSelection"
+import LoginUser from "../pages/login/LoginUser";
+import LoginCleaner from "../pages/login/LoginCleaner";
+import LoginSelection from "../pages/login/LoginSelection";
 
-import RegisterUser from "../pages/register/RegisterUser"
-import RegisterSelection from "../pages/register/RegisterSelection"
-import RegisterCleaner from "../pages/register/RegisterCleaner"
+import RegisterUser from "../pages/register/RegisterUser";
+import RegisterSelection from "../pages/register/RegisterSelection";
+import RegisterCleaner from "../pages/register/RegisterCleaner";
 
+import ForgotPassword from "../pages/ForgotPass";
+import Infomation from "../pages/profile/owner/infomation";
+import InfomationCleaner from "../pages/profile/cleanner/infomationCleaner";
 
-import ForgotPassword from "../pages/ForgotPass"
-import Infomation from "../pages/profile/owner/infomation"
-import InfomationCleaner from "../pages/profile/cleanner/infomationCleaner"
+import About from "../pages/About";
 
-import About from "../pages/About"
+import { ActivityList } from "../pages/ActivityList";
 
-import { ActivityList } from "../pages/ActivityList"
+import Contact from "../pages/Contact";
+import ServiceDetails from "../pages/ServiceDetails/ServiceDetails";
+import CleanerDetails from "../pages/CleanerDetails/CleanerDetails";
+import CreateJob from "../pages/ServiceDetails/CreateJob";
+import CreateJobToCleaner from "../pages/ServiceDetails/CreateJobToCleaner";
+import OrderSuccess from "../pages/order_success/OrderSuccess";
+import ApplySuccess from "../pages/order_success/ApplySuccess";
+import WorkDetail from "../pages/work/WorkDetail";
+import ActivityJob from "../pages/ActivityJob";
+import JobListFilter from "../pages/JobListFilter";
+import ServiceDetailsCombo from "./../pages/ServiceDetails/ServiceDetailsCombo";
+import ServiceDetailsCleaner from "./../pages/CleanerDetails/ServiceDetail";
+import MainDashboard from "../pages/Admin/MainDashboard";
 
-import Contact from "../pages/Contact"
-import ServiceDetails from "../pages/ServiceDetails/ServiceDetails"
-import CleanerDetails from "../pages/CleanerDetails/CleanerDetails"
-import CreateJob from "../pages/ServiceDetails/CreateJob"
-import CreateJobToCleaner from "../pages/ServiceDetails/CreateJobToCleaner"
-import OrderSuccess from "../pages/order_success/OrderSuccess"
-import ApplySuccess from "../pages/order_success/ApplySuccess"
-import WorkDetail from "../pages/work/WorkDetail"
-import ActivityJob from "../pages/ActivityJob"
-import JobListFilter from "../pages/JobListFilter"
-import ServiceDetailsCombo from './../pages/ServiceDetails/ServiceDetailsCombo';
-import ServiceDetailsCleaner from './../pages/CleanerDetails/ServiceDetail';
-
+import OwnerList from "../pages/Admin/ManageUser/Owner/OwnerList";
+import CleanerList from "../pages/Admin/ManageUser/Cleaner/CleanerList";
+import OwnerDetails from "../pages/Admin/ManageUser/Owner/OwnerDetails";
+import AdminCleanerDetails from "../pages/Admin/ManageUser/Cleaner/CleanerDetails";
+import LoginAdmin from "../pages/Admin/LoginAdmin";
 const Routers = () => {
-    return (
-        <Routes>
-            <Route path="/" element={<HomeOwner />} />
-            <Route path="/homeclean" element={<HomeCleaner />} />
+  return (
+    <Routes>
+      <Route path="/" element={<HomeOwner />} />
+      <Route path="/homeclean" element={<HomeCleaner />} />
 
-            <Route path="/login" element={<LoginSelection />} />
-            <Route path="/login/user" element={<LoginUser />} />
-            <Route path="/login/cleaner" element={<LoginCleaner />} />
+      <Route path="/login" element={<LoginSelection />} />
+      <Route path="/login/user" element={<LoginUser />} />
+      <Route path="/login/cleaner" element={<LoginCleaner />} />
 
-            <Route path="/forgot-password" element={<ForgotPassword />} />
+      <Route path="/forgot-password" element={<ForgotPassword />} />
 
-            <Route path="/register" element={<RegisterSelection />} />
-            <Route path="/register/user" element={<RegisterUser />} />
-            <Route path="/register/cleaner" element={<RegisterCleaner />} />
+      <Route path="/register" element={<RegisterSelection />} />
+      <Route path="/register/user" element={<RegisterUser />} />
+      <Route path="/register/cleaner" element={<RegisterCleaner />} />
 
-            <Route path="/activitylist" element={<ActivityList />} />
+      <Route path="/activitylist" element={<ActivityList />} />
 
-            <Route path="/contact" element={<Contact />} />
+      <Route path="/contact" element={<Contact />} />
 
-            <Route path="/infomation" element={<Infomation />} />
-            <Route path="/infomationcleaner" element={<InfomationCleaner />} />
-            <Route path="/about" element={<About />} />
+      <Route path="/infomation" element={<Infomation />} />
+      <Route path="/infomationcleaner" element={<InfomationCleaner />} />
+      <Route path="/about" element={<About />} />
 
-            <Route path="/service/:id?" element={<ServiceDetails />} />
+      <Route path="/service/:id?" element={<ServiceDetails />} />
 
-            <Route path="/cleaner/:cleanerId" element={<CleanerDetails />} />
-            <Route path="/createjob" element={<CreateJob />} />
-            <Route path="/createjobtocleaner" element={<CreateJobToCleaner />} />
-            <Route path="/activityjob" element={<ActivityJob />} />
+      <Route path="/cleaner/:cleanerId" element={<CleanerDetails />} />
+      <Route path="/createjob" element={<CreateJob />} />
+      <Route path="/createjobtocleaner" element={<CreateJobToCleaner />} />
+      <Route path="/activityjob" element={<ActivityJob />} />
 
-            <Route path="/ordersuccess" element={<OrderSuccess />} />
-            <Route path="/applysuccess" element={<ApplySuccess />} />
+      <Route path="/ordersuccess" element={<OrderSuccess />} />
+      <Route path="/applysuccess" element={<ApplySuccess />} />
 
-            <Route path="/workdetail/:jobId?" element={<WorkDetail />} />
+      <Route path="/workdetail/:jobId?" element={<WorkDetail />} />
 
-            <Route path="/service-details-combo" element={<ServiceDetailsCombo />} />
-            <Route path="/service-details-cleaner" element={<ServiceDetailsCleaner />} />
+      <Route path="/service-details-combo" element={<ServiceDetailsCombo />} />
+      <Route
+        path="/service-details-cleaner"
+        element={<ServiceDetailsCleaner />}
+      />
 
-            <Route path="/job-list" element={<JobListFilter />} />
-        </Routes>
-    )
-}
+      <Route path="/job-list" element={<JobListFilter />} />
+
+      {/* Admin */}
+      <Route path="/admin" element={<MainDashboard />} />
+      <Route path="/admin-login" element={<LoginAdmin />} />
+      <Route path="/admin/owners" element={<OwnerList />} />
+      <Route path="/admin/cleaners" element={<CleanerList />} />
+      <Route path="/admin/owners/:customerId" element={<OwnerDetails />} />
+      <Route
+        path="/admin/cleaners/:cleanerId"
+        element={<AdminCleanerDetails />}
+      />
+    </Routes>
+  );
+};
 
-export default Routers
\ No newline at end of file
+export default Routers;
Index: ../FE/home-clean-fe/src/utils/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export const BASE_URL = 'http://localhost:8080/api'\nexport const URL_WEB_SOCKET = 'http://localhost:8080'\n// export const BASE_URL = 'http://34.44.194.43:8080/api' // This is the IP address of the server
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/utils/config.js b/../FE/home-clean-fe/src/utils/config.js
--- a/../FE/home-clean-fe/src/utils/config.js	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/utils/config.js	(date 1743672482093)
@@ -1,3 +1,4 @@
 export const BASE_URL = 'http://localhost:8080/api'
 export const URL_WEB_SOCKET = 'http://localhost:8080'
-// export const BASE_URL = 'http://34.44.194.43:8080/api' // This is the IP address of the server
\ No newline at end of file
+// export const BASE_URL = 'https://pike-armor-ms-hampton.trycloudflare.com/api'
+// export const URL_WEB_SOCKET = 'https://pike-armor-ms-hampton.trycloudflare.com'
Index: src/main/java/com/example/homecleanapi/repositories/FeedbackRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.repositories;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport com.example.homecleanapi.models.Feedback;\r\n\r\npublic interface FeedbackRepository extends JpaRepository<Feedback, Long> {\r\n\tList<Feedback> findByJobId(Integer jobId); \r\n\t\r\n\tList<Feedback> findByJobId(Long jobId);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/repositories/FeedbackRepository.java b/src/main/java/com/example/homecleanapi/repositories/FeedbackRepository.java
--- a/src/main/java/com/example/homecleanapi/repositories/FeedbackRepository.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/repositories/FeedbackRepository.java	(date 1743672482132)
@@ -1,6 +1,7 @@
 package com.example.homecleanapi.repositories;
 
 import java.util.List;
+import java.util.Optional;
 
 import org.springframework.data.jpa.repository.JpaRepository;
 
@@ -10,5 +11,7 @@
 	List<Feedback> findByJobId(Integer jobId); 
 	
 	List<Feedback> findByJobId(Long jobId);
+	
+	Optional<Feedback> findByJob_IdAndJob_Customer_Id(Long jobId, Long customerId);
 
 }
Index: ../FE/home-clean-fe/src/services/owner/OwnerAPI.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import profileImg from '../../assets/imgProfile/imgProfile.svg';\nimport { BASE_URL } from '../../utils/config';\n\n// Fetch online cleaners\nexport async function fetchCleaners() {\n    try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch(`${BASE_URL}/customer/cleaners/online`, {\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to fetch data');\n        }\n\n        const data = await response.json();\n\n        return data.map(cleaner => ({\n            cleanerId: cleaner.cleanerId,\n            cleanerName: cleaner.cleanerName,\n            cleanerImg: cleaner.profileImage\n                ? `data:image/png;base64,${cleaner.profileImage}`\n                : profileImg // Nếu không có ảnh thì dùng ảnh mặc định\n        }));\n    } catch (error) {\n        console.error('Error fetching cleaners:', error);\n        return [];\n    }\n}\n\n// Fetch service details\nexport async function fetchServiceDetails(serviceId) {\n    try {\n        const response = await fetch(`${BASE_URL}/services/details/${serviceId}`);\n\n        if (!response.ok) {\n            throw new Error('Failed to fetch service details');\n        }\n\n        const data = await response.json();\n\n        // Sort service details by minRoomSize\n        const sortedDetails = Array.isArray(data?.serviceDetails)\n            ? [...data.serviceDetails].sort((a, b) => (a.minRoomSize || 0) - (b.minRoomSize || 0))\n            : [];\n\n        return { ...data, serviceDetails: sortedDetails };\n    } catch (error) {\n        console.error('Error fetching service details:', error);\n        throw error;\n    }\n}\n\n// Create job\nexport async function createJob(customerId, jobData) {\n    try {\n        const token = localStorage.getItem(\"token\");\n\n        if (!token) {\n            throw new Error(\"No authentication token found\");\n        }\n\n        const response = await fetch(`${BASE_URL}/customer/${customerId}/createjob`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify(jobData),\n        });\n\n        return await response.json();\n    } catch (error) {\n        console.error('Error creating job:', error);\n        throw error;\n    }\n}\n\n// Create job\nexport async function createJobToCleaner(customerId, cleanerId, jobData) {\n    try {\n        const token = localStorage.getItem(\"token\");\n\n        if (!token) {\n            throw new Error(\"No authentication token found\");\n        }\n        const response = await fetch(`${BASE_URL}/customer/${customerId}/bookjob/${cleanerId}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify(jobData),\n        });\n\n        return await response.json();\n    } catch (error) {\n        console.error('Error creating job:', error);\n        throw error;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/services/owner/OwnerAPI.js b/../FE/home-clean-fe/src/services/owner/OwnerAPI.js
--- a/../FE/home-clean-fe/src/services/owner/OwnerAPI.js	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/../FE/home-clean-fe/src/services/owner/OwnerAPI.js	(date 1743672482092)
@@ -101,4 +101,33 @@
         console.error('Error creating job:', error);
         throw error;
     }
-}
\ No newline at end of file
+}
+
+export async function fetchCleanerDetails(cleanerId) {
+    try {
+        const token = localStorage.getItem("token");
+        const response = await fetch(`${BASE_URL}/customer/viewdetailcleaner/${cleanerId}`, {
+            headers: {
+                "Authorization": `Bearer ${token}`,
+                "Content-Type": "application/json",
+            },
+        });
+
+        if (!response.ok) {
+            throw new Error("Failed to fetch cleaner details");
+        }
+
+        const data = await response.json();
+
+        return {
+            cleanerName: data.cleanerName,
+            averageRating: data.averageRating,
+            profileImage: data.profileImage
+                ? `data:image/png;base64,${data.profileImage}`
+                : null,
+        };
+    } catch (error) {
+        console.error("Error fetching cleaner details:", error);
+        return null;
+    }
+}
Index: src/main/java/com/example/homecleanapi/repositories/JobServiceDetailRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.repositories;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport com.example.homecleanapi.models.JobServiceDetail;\r\n\r\npublic interface JobServiceDetailRepository extends JpaRepository<JobServiceDetail, Long> {\r\n\tList<JobServiceDetail> findByJobId(Long jobId);\r\n\t\r\n\tList<JobServiceDetail> findByJobIdIn(List<Long> jobIds);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/repositories/JobServiceDetailRepository.java b/src/main/java/com/example/homecleanapi/repositories/JobServiceDetailRepository.java
--- a/src/main/java/com/example/homecleanapi/repositories/JobServiceDetailRepository.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/repositories/JobServiceDetailRepository.java	(date 1743672482134)
@@ -10,4 +10,6 @@
 	List<JobServiceDetail> findByJobId(Long jobId);
 	
 	List<JobServiceDetail> findByJobIdIn(List<Long> jobIds);
+	
+	List<JobServiceDetail> findByServiceId(Long serviceId);
 }
Index: src/main/java/com/example/homecleanapi/repositories/CustomerAddressRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\npackage com.example.homecleanapi.repositories;\n\nimport com.example.homecleanapi.models.CustomerAddresses;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface CustomerAddressRepository extends JpaRepository<CustomerAddresses, Integer> {\n    List<CustomerAddresses> findCustomerAddressesByCustomer_Id(Integer id);\n    CustomerAddresses findCustomerAddressesById(Integer id);\n    List<CustomerAddresses> findByCustomerId(Integer customerId);\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/repositories/CustomerAddressRepository.java b/src/main/java/com/example/homecleanapi/repositories/CustomerAddressRepository.java
--- a/src/main/java/com/example/homecleanapi/repositories/CustomerAddressRepository.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/repositories/CustomerAddressRepository.java	(date 1743672482131)
@@ -10,7 +10,8 @@
 @Repository
 public interface CustomerAddressRepository extends JpaRepository<CustomerAddresses, Integer> {
     List<CustomerAddresses> findCustomerAddressesByCustomer_Id(Integer id);
-    CustomerAddresses findCustomerAddressesById(Integer id);
     List<CustomerAddresses> findByCustomerId(Integer customerId);
+
+    CustomerAddresses findCustomerAddressesById(Integer id);
 }
 
Index: ../FE/home-clean-fe/src/assets/images/calendar.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/calendar.svg b/../FE/home-clean-fe/src/assets/images/calendar.svg
new file mode 100644
--- /dev/null	(date 1743672482007)
+++ b/../FE/home-clean-fe/src/assets/images/calendar.svg	(date 1743672482007)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14"><defs><style>.a{fill:#fff;}</style></defs><path class="a" d="M12.25,14H1.75A1.752,1.752,0,0,1,0,12.25V3.5A1.752,1.752,0,0,1,1.75,1.75h.876V.875a.875.875,0,0,1,1.75,0V1.75h5.25V.875a.875.875,0,0,1,1.75,0V1.75h.875A1.752,1.752,0,0,1,14,3.5v8.75A1.752,1.752,0,0,1,12.25,14ZM3.5,4.375a.875.875,0,0,0,0,1.75h7a.875.875,0,0,0,0-1.75Z"/></svg>
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/repositories/ConversationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.repositories;\n\nimport com.example.homecleanapi.models.Conversation;\nimport org.springframework.data.domain.Limit;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n@Repository\npublic interface ConversationRepository extends JpaRepository<Conversation, Long> {\n    Optional<Conversation> findByCustomerIdAndCleanerId(Integer customerId, Integer cleanerId);\n\n    List<Conversation> findConversationByCustomerId(Integer customerId);\n\n    List<Conversation> findConversationByCleanerId(Integer cleanerId);\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/repositories/ConversationRepository.java b/src/main/java/com/example/homecleanapi/repositories/ConversationRepository.java
--- a/src/main/java/com/example/homecleanapi/repositories/ConversationRepository.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/repositories/ConversationRepository.java	(date 1743672482130)
@@ -1,6 +1,8 @@
 package com.example.homecleanapi.repositories;
 
 import com.example.homecleanapi.models.Conversation;
+import com.example.homecleanapi.models.Customers;
+import com.example.homecleanapi.models.Employee;
 import org.springframework.data.domain.Limit;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.jpa.repository.JpaRepository;
@@ -13,7 +15,7 @@
 @Repository
 public interface ConversationRepository extends JpaRepository<Conversation, Long> {
     Optional<Conversation> findByCustomerIdAndCleanerId(Integer customerId, Integer cleanerId);
-
+    Optional<Conversation> findByCustomerAndCleaner(Customers customer, Employee cleaner);
     List<Conversation> findConversationByCustomerId(Integer customerId);
 
     List<Conversation> findConversationByCleanerId(Integer cleanerId);
Index: ../FE/home-clean-fe/src/assets/images/duplicate.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/duplicate.svg b/../FE/home-clean-fe/src/assets/images/duplicate.svg
new file mode 100644
--- /dev/null	(date 1743672482009)
+++ b/../FE/home-clean-fe/src/assets/images/duplicate.svg	(date 1743672482009)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14"><defs><style>.a{fill:#fff;}</style></defs><path class="a" d="M0,2A2,2,0,0,1,2,0H8a2,2,0,0,1,2,2V8a2,2,0,0,1-2,2H2A2,2,0,0,1,0,8Z" transform="translate(4 4)"/><path class="a" d="M2,0A2,2,0,0,0,0,2V8a2,2,0,0,0,2,2V4A2,2,0,0,1,4,2h6A2,2,0,0,0,8,0Z"/></svg>
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/repositories/JobApplicationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.repositories;\r\n\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport com.example.homecleanapi.models.Employee;\r\nimport com.example.homecleanapi.models.Job;\r\nimport com.example.homecleanapi.models.JobApplication;\r\n\r\n@Repository\r\npublic interface JobApplicationRepository extends JpaRepository<JobApplication, Long> {\r\n\tOptional<JobApplication> findByJobAndCleaner(Job job, Employee cleaner);\r\n\t\r\n\tList<JobApplication> findByJob(Job job);\r\n\t\r\n\tList<JobApplication> findByJobAndStatus(Job job, String status);\r\n\t\r\n\tJobApplication findByJobIdAndStatus(Long jobId, String status);\r\n\t\r\n\tOptional<JobApplication> findByJobIdAndCleanerId(Long jobId, Long cleanerId);\r\n\t\r\n\tList<JobApplication> findByCleanerId(Long cleanerId);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/repositories/JobApplicationRepository.java b/src/main/java/com/example/homecleanapi/repositories/JobApplicationRepository.java
--- a/src/main/java/com/example/homecleanapi/repositories/JobApplicationRepository.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/repositories/JobApplicationRepository.java	(date 1743672482133)
@@ -24,4 +24,15 @@
 	Optional<JobApplication> findByJobIdAndCleanerId(Long jobId, Long cleanerId);
 	
 	List<JobApplication> findByCleanerId(Long cleanerId);
+	
+	List<JobApplication> findByStatus(String status);
+	
+	public List<JobApplication> findByCleanerIdAndStatus(Long cleanerId, String status);
+	
+	List<JobApplication> findByJob_Customer_Id(Long customerId);
+	
+	Optional<JobApplication> findByJob_IdAndJob_Customer_Id(Long jobId, Long customerId);
+	
+	
+
 }
Index: ../FE/home-clean-fe/src/assets/images/icon-1.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/icon-1.svg b/../FE/home-clean-fe/src/assets/images/icon-1.svg
new file mode 100644
--- /dev/null	(date 1743672482036)
+++ b/../FE/home-clean-fe/src/assets/images/icon-1.svg	(date 1743672482036)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14"><defs><style>.a{fill:#fff;}</style></defs><path class="a" d="M0,1A1,1,0,0,1,1,0H13a1,1,0,0,1,1,1V3a1,1,0,0,1-1,1H1A1,1,0,0,1,0,3Z"/><path class="a" d="M0,1A1,1,0,0,1,1,0H7A1,1,0,0,1,8,1V7A1,1,0,0,1,7,8H1A1,1,0,0,1,0,7Z" transform="translate(0 6)"/><path class="a" d="M1,0A1,1,0,0,0,0,1V7A1,1,0,0,0,1,8H3A1,1,0,0,0,4,7V1A1,1,0,0,0,3,0Z" transform="translate(10 6)"/></svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/logo-apple.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logo-apple.svg b/../FE/home-clean-fe/src/assets/images/logo-apple.svg
new file mode 100644
--- /dev/null	(date 1743672482054)
+++ b/../FE/home-clean-fe/src/assets/images/logo-apple.svg	(date 1743672482054)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg width="86px" height="106px" viewBox="0 0 86 106" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
+    <title>logo-apple</title>
+    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
+        <g id="logo-apple" fill="#000000" fill-rule="nonzero">
+            <path d="M71.8245757,56.3144672 C71.9729986,72.3558068 85.8462965,77.693898 86,77.7618473 C85.882695,78.1381238 83.7832747,85.3689537 78.6908794,92.8378901 C74.2885468,99.295347 69.7198749,105.728766 62.5225901,105.862015 C55.4505312,105.992803 53.1764736,101.653321 45.0911031,101.653321 C37.0081843,101.653321 34.4816003,105.728955 27.7871051,105.992992 C20.839895,106.257029 15.5494767,99.0104898 11.1109341,92.5766922 C2.04091819,79.4164795 -4.89045012,55.3891073 4.41662757,39.1702288 C9.04018008,31.1158682 17.3028283,26.0155051 26.2711924,25.8847168 C33.0931767,25.7541178 39.532128,30.4908859 43.7026794,30.4908859 C47.8705906,30.4908859 55.6953252,24.7944993 63.9213863,25.6310898 C67.3650994,25.774938 77.0318244,27.0271739 83.238806,36.1456322 C82.7386566,36.4567985 71.7046304,42.9034667 71.8245757,56.3144672 M58.5334653,16.9244915 C62.2217838,12.443811 64.704237,6.20629042 64.0269986,0 C58.7105544,0.214447302 52.2817871,3.55550977 48.4684313,8.03372969 C45.0509327,11.999396 42.0579576,18.3466954 42.8655139,24.4301471 C48.791303,24.8902719 54.8449582,21.4080111 58.5334653,16.9244915" id="Shape"></path>
+        </g>
+    </g>
+</svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/logo-atlassian.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logo-atlassian.svg b/../FE/home-clean-fe/src/assets/images/logo-atlassian.svg
new file mode 100644
--- /dev/null	(date 1743672482054)
+++ b/../FE/home-clean-fe/src/assets/images/logo-atlassian.svg	(date 1743672482054)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24"><defs><style>.a{fill:url(#a);}.b{fill:#2684ff;}</style><linearGradient id="a" x1="0.997" y1="0.157" x2="0.399" y2="0.973" gradientUnits="objectBoundingBox"><stop offset="0" stop-color="#0052cc"/><stop offset="0.92" stop-color="#2684ff"/></linearGradient></defs><path class="a" d="M7.239.254A.732.732,0,0,0,6.264.132a.683.683,0,0,0-.2.237L.076,11.516a.645.645,0,0,0,.32.893.748.748,0,0,0,.32.071H9.053a.693.693,0,0,0,.64-.368C11.493,8.651,10.4,3.389,7.239.254Z" transform="translate(0 11.52)"/><path class="b" d="M2.554.382A15.282,15.282,0,0,0,1.63,15.708l4.025,7.9A.718.718,0,0,0,6.3,24h8.347a.722.722,0,0,0,.507-.206.7.7,0,0,0,.209-.5.7.7,0,0,0-.074-.314L3.773.379a.68.68,0,0,0-1.219,0Z" transform="translate(8.64)"/></svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/logo-shopify.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logo-shopify.svg b/../FE/home-clean-fe/src/assets/images/logo-shopify.svg
new file mode 100644
--- /dev/null	(date 1743672482056)
+++ b/../FE/home-clean-fe/src/assets/images/logo-shopify.svg	(date 1743672482056)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="22" height="24.87" viewBox="0 0 22 24.87"><defs><style>.a{fill:#95bf46;}.b{fill:#5e8e3e;}.c{fill:#fff;}</style></defs><path class="a" d="M0,22.212S1.832,8.135,1.9,7.639c.093-.656.114-.678.814-.9.113-.036,1-.31,2.258-.7C5.456,4.01,7,0,10.224,0a1.687,1.687,0,0,1,1.3.743c.04,0,.079,0,.117,0,1.385,0,2.173,1.173,2.619,2.449l.747-.23a.612.612,0,0,1,.545.069l1.481,1.463,2.014.149a.241.241,0,0,1,.219.2C19.286,4.967,22,23.207,22,23.207L14.269,24.87Z"/><path class="b" d="M4.732,1.712l-1.993-.15S1.417.241,1.272.094A.361.361,0,0,0,1.068,0L0,22l7.652-1.667S4.966,2.04,4.949,1.914a.24.24,0,0,0-.216-.2" transform="translate(14.348 2.87)"/><path class="c" d="M8.609.366,7.616,3.144a4.788,4.788,0,0,0-1.935-.437c-1.562,0-1.641.923-1.641,1.155,0,1.269,3.514,1.755,3.514,4.727a3.6,3.6,0,0,1-3.7,3.844A5.278,5.278,0,0,1,0,10.941L.683,8.818A5,5,0,0,0,3.154,9.9a.968.968,0,0,0,1.04-.948C4.194,7.3,1.31,7.224,1.31,4.5,1.31,2.215,3.056,0,6.58,0A4.559,4.559,0,0,1,8.609.366" transform="translate(2.87 8.609)"/></svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/logo-slack.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logo-slack.svg b/../FE/home-clean-fe/src/assets/images/logo-slack.svg
new file mode 100644
--- /dev/null	(date 1743672482056)
+++ b/../FE/home-clean-fe/src/assets/images/logo-slack.svg	(date 1743672482056)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><defs><style>.a{fill:#36c5f0;}.b{fill:#2eb67d;}.c{fill:#ecb22e;}.d{fill:#e01e5a;}</style></defs><path class="a" d="M2.482,11.587a2.483,2.483,0,0,1,0-4.966H9.1a2.483,2.483,0,0,1,0,4.966ZM9.1,4.964A2.482,2.482,0,1,1,9.1,0h0a2.484,2.484,0,0,1,2.484,2.483V4.964Z"/><path class="b" d="M6.62,11.587V9.1A2.484,2.484,0,1,1,9.1,11.587ZM0,9.1V2.482a2.483,2.483,0,0,1,4.965,0V9.1A2.483,2.483,0,1,1,0,9.1Z" transform="translate(12.414)"/><path class="c" d="M0,9.1V6.622H2.483A2.482,2.482,0,1,1,0,9.1ZM2.483,4.965A2.483,2.483,0,1,1,2.484,0H9.1a2.483,2.483,0,0,1,0,4.965Z" transform="translate(12.414 12.414)"/><path class="d" d="M6.62,9.1V2.483h0a2.483,2.483,0,0,1,4.966,0V9.1a2.483,2.483,0,0,1-4.966,0ZM0,2.482A2.483,2.483,0,0,1,2.483,0H4.966V2.482A2.483,2.483,0,0,1,0,2.482Zm6.62,0h0Z" transform="translate(0 12.414)"/></svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/logo-invision.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logo-invision.svg b/../FE/home-clean-fe/src/assets/images/logo-invision.svg
new file mode 100644
--- /dev/null	(date 1743672482055)
+++ b/../FE/home-clean-fe/src/assets/images/logo-invision.svg	(date 1743672482055)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 21 21"><defs><style>.a{fill:#dc395f;}.b{fill:#fff;}</style></defs><path class="a" d="M19.1,0H1.9A1.9,1.9,0,0,0,0,1.9V19.1A1.9,1.9,0,0,0,1.9,21H19.1A1.9,1.9,0,0,0,21,19.1V1.9A1.9,1.9,0,0,0,19.1,0"/><path class="b" d="M.41,10.235a4.366,4.366,0,0,1,.112-.949L1.47,5.36H0L.446,3.692H3.983L2.587,9.3a3.579,3.579,0,0,0-.131.863c0,.358.175.463.446.526A2.334,2.334,0,0,0,5.111,9.077L6.027,5.36H4.539l.447-1.669H8.168l-.41,1.895a3.613,3.613,0,0,1,2.773-2.058A2.177,2.177,0,0,1,12.67,5.994a4.84,4.84,0,0,1-.2,1.374l-.6,2.166a2.521,2.521,0,0,0-.093.584c0,.377.149.565.428.565s.633-.208,1.042-1.356l.819.32c-.484,1.715-1.358,2.43-2.456,2.43a1.709,1.709,0,0,1-1.9-1.828,3.356,3.356,0,0,1,.13-.941l.614-2.224a2.273,2.273,0,0,0,.093-.679A1.048,1.048,0,0,0,9.433,5.257c-.875,0-1.452.636-1.75,1.86L6.493,11.955H4.409l.373-1.52A2.959,2.959,0,0,1,2.27,12.085,1.68,1.68,0,0,1,.41,10.235Zm1.47-8.973A1.265,1.265,0,1,1,3.145,2.525,1.258,1.258,0,0,1,1.879,1.262Z" transform="translate(3.962 4.16)"/></svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/logo-jira.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logo-jira.svg b/../FE/home-clean-fe/src/assets/images/logo-jira.svg
new file mode 100644
--- /dev/null	(date 1743672482055)
+++ b/../FE/home-clean-fe/src/assets/images/logo-jira.svg	(date 1743672482055)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="21.999" height="22.617" viewBox="0 0 21.999 22.617"><defs><style>.a{fill:#2684ff;}.b{fill:url(#a);}.c{fill:url(#b);}</style><linearGradient id="a" x1="0.918" y1="0.403" x2="0.282" y2="0.816" gradientUnits="objectBoundingBox"><stop offset="0.18" stop-color="#0052cc"/><stop offset="1" stop-color="#2684ff"/></linearGradient><linearGradient id="b" x1="0.087" y1="-0.233" x2="0.722" y2="0.179" xlink:href="#a"/></defs><g transform="translate(0)"><path class="a" d="M6.993,18.635.263,11.941a.9.9,0,0,1,0-1.266L3.632,7.326,11,0l.949.943,9.787,9.732a.894.894,0,0,1,0,1.272L18.48,15.178l-.114.113L11,22.617Z"/><path class="b" d="M7.4,7.946A5.607,5.607,0,0,1,7.377,0L0,7.322l4.015,3.986Z" transform="translate(3.495)"/><path class="c" d="M3.382,0,0,3.351a5.59,5.59,0,0,1,0,7.957L7.4,3.98Z" transform="translate(10.897 11.308)"/></g></svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/logo-webdev.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logo-webdev.svg b/../FE/home-clean-fe/src/assets/images/logo-webdev.svg
new file mode 100644
--- /dev/null	(date 1743672482058)
+++ b/../FE/home-clean-fe/src/assets/images/logo-webdev.svg	(date 1743672482058)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg width="115px" height="98px" viewBox="0 0 115 98" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
+    <title>logo-webdev</title>
+    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
+        <g id="logo-webdev" fill-rule="nonzero">
+            <path d="M70,47.6912893 C69.5660914,44.2013941 67.8304569,40.7114989 65.2270052,38.5303144 L20.5344173,2.75888864 C14.8936053,-1.60348036 7.08325012,-0.731006558 2.74416392,4.94007314 C-1.59492228,10.6111528 -0.727105036,18.463417 4.91370702,22.825786 L37.4568535,49 L4.91370702,75.174214 C-0.727105036,79.536583 -1.59492228,87.3888472 2.74416392,93.0599269 C7.08325012,98.7310066 14.8936053,99.6034804 20.5344173,95.2411114 L65.2270052,58.5972118 C68.2643655,55.9797904 70,52.4898952 70,48.5637631 L70,47.6912893 Z" id="Path" fill="#0D55FF"></path>
+            <path d="M101.927755,72 L63.2119216,72 C62.7769122,72 61.9068935,72 61.4718841,72.4310345 L32.326257,95.2758621 C31.8912477,95.7068966 31.8912477,96.137931 32.326257,96.5689655 C32.326257,97 32.7612664,97 33.1962757,97 L102.362764,97 C109.322914,97 115.413045,90.9655172 114.978035,83.637931 C114.543026,76.7413793 108.452895,72 101.927755,72" id="Path" fill="#00C9DB"></path>
+            <path d="M114,84.5 C114,91.3965517 108.396552,97 101.5,97 C94.6034483,97 89,91.3965517 89,84.5 C89,77.6034483 94.6034483,72 101.5,72 C108.396552,72 114,77.6034483 114,84.5" id="Path" fill="#7000F2"></path>
+        </g>
+    </g>
+</svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/logo-slack1.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logo-slack1.svg b/../FE/home-clean-fe/src/assets/images/logo-slack1.svg
new file mode 100644
--- /dev/null	(date 1743672482057)
+++ b/../FE/home-clean-fe/src/assets/images/logo-slack1.svg	(date 1743672482057)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><defs><style>.a{fill:#36c5f0;}.b{fill:#2eb67d;}.c{fill:#ecb22e;}.d{fill:#e01e5a;}</style></defs><path class="a" d="M2.482,11.587a2.483,2.483,0,0,1,0-4.966H9.1a2.483,2.483,0,0,1,0,4.966ZM9.1,4.964A2.482,2.482,0,1,1,9.1,0h0a2.484,2.484,0,0,1,2.484,2.483V4.964Z"/><path class="b" d="M6.62,11.587V9.1A2.484,2.484,0,1,1,9.1,11.587ZM0,9.1V2.482a2.483,2.483,0,0,1,4.965,0V9.1A2.483,2.483,0,1,1,0,9.1Z" transform="translate(12.414)"/><path class="c" d="M0,9.1V6.622H2.483A2.482,2.482,0,1,1,0,9.1ZM2.483,4.965A2.483,2.483,0,1,1,2.484,0H9.1a2.483,2.483,0,0,1,0,4.965Z" transform="translate(12.414 12.414)"/><path class="d" d="M6.62,9.1V2.483h0a2.483,2.483,0,0,1,4.966,0V9.1a2.483,2.483,0,0,1-4.966,0ZM0,2.482A2.483,2.483,0,0,1,2.483,0H4.966V2.482A2.483,2.483,0,0,1,0,2.482Zm6.62,0h0Z" transform="translate(0 12.414)"/></svg>
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/repositories/JobRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.repositories;\r\n\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\nimport com.example.homecleanapi.enums.JobStatus;\r\nimport com.example.homecleanapi.models.CustomerAddresses;\r\nimport com.example.homecleanapi.models.Job;\r\n\r\n@Repository\r\npublic interface JobRepository extends JpaRepository<Job, Long> {\r\n    // Lấy tất cả các job có trạng thái \"Open\"\r\n    List<Job> findByStatus(JobStatus status);\r\n    \r\n    Optional<Job> findById(Long jobId);\r\n   \r\n    List<Job> findByCleanerIdAndScheduledTimeBetween(Long cleanerId, LocalDateTime startTime, LocalDateTime endTime);\r\n    \r\n    List<Job> findByCleanerId(Long cleanerId);\r\n    \r\n    List<Job> findByCustomerId(Long customerId);\r\n\r\n    public List<Job> findByScheduledTimeAndCustomerAddress(LocalDateTime scheduledTime, CustomerAddresses customerAddress);\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/repositories/JobRepository.java b/src/main/java/com/example/homecleanapi/repositories/JobRepository.java
--- a/src/main/java/com/example/homecleanapi/repositories/JobRepository.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/repositories/JobRepository.java	(date 1743672482133)
@@ -25,7 +25,15 @@
     List<Job> findByCustomerId(Long customerId);
 
     public List<Job> findByScheduledTimeAndCustomerAddress(LocalDateTime scheduledTime, CustomerAddresses customerAddress);
+    
+    List<Job> findByCleanerIdAndStatus(Long cleanerId, JobStatus status);
 
 
+    List<Job> findByCleanerIdAndStatusIn(Long cleanerId, List<String> statuses);
+    
+    Optional<Job> findByTxnRef(String txnRef); 
+
+
+
 }
 
Index: ../FE/home-clean-fe/src/assets/images/logo-spotify.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logo-spotify.svg b/../FE/home-clean-fe/src/assets/images/logo-spotify.svg
new file mode 100644
--- /dev/null	(date 1743672482057)
+++ b/../FE/home-clean-fe/src/assets/images/logo-spotify.svg	(date 1743672482057)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg width="107px" height="107px" viewBox="0 0 107 107" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
+    <title>logo-spotify</title>
+    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
+        <g id="logo-spotify" fill="#2EBD59" fill-rule="nonzero">
+            <path d="M53.5,0 C23.9517912,0 0,23.9517912 0,53.5 C0,83.0482088 23.9517912,107 53.5,107 C83.0482088,107 107,83.0482088 107,53.5 C107,23.9554418 83.0482088,0.00365063118 53.5,0 Z M78.0358922,77.1597407 C77.0757762,78.7368134 75.0204708,79.2296486 73.4506994,78.2695326 C60.8888775,70.5922552 45.0743432,68.8582054 26.4524736,73.1111907 C24.656363,73.523712 22.8675537,72.3993176 22.458683,70.6032071 C22.0461617,68.8070966 23.1669055,67.0182873 24.9666667,66.6094166 C45.3444899,61.9548618 62.8273627,63.9590583 76.9297509,72.5745479 C78.4995223,73.5419652 78.9996588,75.5899693 78.0358922,77.1597407 L78.0358922,77.1597407 Z M84.5814739,62.5973729 C83.373115,64.5614125 80.8030706,65.1747185 78.8426817,63.9700102 C64.4664961,55.1318321 42.5408052,52.5727397 25.5325145,57.7347322 C23.3275333,58.4027977 20.9984306,57.1579324 20.3267144,54.9566018 C19.6622996,52.7516206 20.9071648,50.4261685 23.1084954,49.7544524 C42.5371546,43.858683 66.6933811,46.7134766 83.2051859,56.8622313 C85.1692255,58.0705902 85.7898328,60.636984 84.5814739,62.5973729 Z M85.1436711,47.4253497 C67.8980894,37.1853292 39.4523712,36.2434664 22.9880246,41.2375299 C20.3449676,42.0406687 17.5485841,40.5475606 16.7490959,37.9045036 C15.9496076,35.2614466 17.4390652,32.4650631 20.0857728,31.6619243 C38.9850904,25.9267827 70.3987718,27.0329239 90.2509041,38.8171614 C92.627465,40.2299556 93.4087001,43.3001365 91.9995565,45.6730467 C90.5940635,48.0532583 87.5165814,48.838144 85.1436711,47.4253497 Z" id="Shape"></path>
+        </g>
+    </g>
+</svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/pencil.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/pencil.svg b/../FE/home-clean-fe/src/assets/images/pencil.svg
new file mode 100644
--- /dev/null	(date 1743672482061)
+++ b/../FE/home-clean-fe/src/assets/images/pencil.svg	(date 1743672482061)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14"><defs><style>.a{fill:#8c8c8c;}</style></defs><path class="a" d="M.793.586A2,2,0,0,1,3.621,3.414l-.793.793L0,1.379Z" transform="translate(9.793 0)"/><path class="a" d="M8.379,0,0,8.379v2.828H2.828l8.379-8.379Z" transform="translate(0 2.793)"/></svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/assets/images/logos-facebook.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/logos-facebook.svg b/../FE/home-clean-fe/src/assets/images/logos-facebook.svg
new file mode 100644
--- /dev/null	(date 1743672482059)
+++ b/../FE/home-clean-fe/src/assets/images/logos-facebook.svg	(date 1743672482059)
@@ -0,0 +1,1 @@
+<svg fill="#4267B2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M504 256C504 119 393 8 256 8S8 119 8 256c0 123.78 90.69 226.38 209.25 245V327.69h-63V256h63v-54.64c0-62.15 37-96.48 93.67-96.48 27.14 0 55.52 4.84 55.52 4.84v61h-31.28c-30.8 0-40.41 19.12-40.41 38.73V256h68.78l-11 71.69h-57.78V501C413.31 482.38 504 379.78 504 256z"/></svg>
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/services/JobService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.services;\r\n\r\n\r\n\r\nimport com.example.homecleanapi.dtos.BookJobRequest;\r\nimport com.example.homecleanapi.dtos.BookJobRequest.ServiceRequest;\r\nimport com.example.homecleanapi.enums.JobStatus;\r\nimport com.example.homecleanapi.models.*;\r\nimport com.example.homecleanapi.repositories.*;\r\n\r\nimport io.swagger.v3.oas.annotations.parameters.RequestBody;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\n\r\nimport java.time.DayOfWeek;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class JobService {\r\n\r\n    @Autowired\r\n    private JobRepository jobRepository;\r\n\r\n    @Autowired\r\n    private JobApplicationRepository jobApplicationRepository;\r\n    \r\n    @Autowired\r\n    private CustomerRepo customerRepo;\r\n    \r\n    @Autowired\r\n    private CustomerAddressRepository customerAddressRepository; \r\n    \r\n    @Autowired\r\n    private ServiceRepository serviceRepository;\r\n    \r\n    @Autowired\r\n    private ServiceDetailRepository serviceDetailRepository;\r\n    \r\n    @Autowired \r\n    private JobDetailsRepository jobDetailsRepository;\r\n    \r\n    @Autowired\r\n    private CustomerRepository customerRepository;\r\n    \r\n    @Autowired\r\n    private JobServiceDetailRepository jobServiceDetailRepository; \r\n    \r\n\r\n    \r\n    \r\n\r\n    // Tạo job mới cho customer\r\n//    public Map<String, Object> bookJob(@PathVariable Long customerId, BookJobRequest request) {\r\n//        Map<String, Object> response = new HashMap<>();\r\n//\r\n//        System.out.println(\"customerId = \" + customerId);\r\n//\r\n//        Optional<Customers> customerOpt = customerRepo.findById(customerId);\r\n//        if (!customerOpt.isPresent()) {\r\n//            response.put(\"message\", \"Customer not found with customerId: \" + customerId);\r\n//            return response;\r\n//        }\r\n//\r\n//        Customers customer = customerOpt.get();\r\n//\r\n//        // Tìm địa chỉ của customer\r\n//        Optional<CustomerAddresses> customerAddressOpt = customerAddressRepository.findById(request.getCustomerAddressId());\r\n//        if (!customerAddressOpt.isPresent()) {\r\n//            response.put(\"message\", \"Customer address not found\");\r\n//            return response;\r\n//        }\r\n//        CustomerAddresses customerAddress = customerAddressOpt.get();\r\n//\r\n//        Job job = new Job();\r\n//\r\n//        // Kiểm tra Service\r\n//        Optional<Services> serviceOpt = serviceRepository.findById(request.getServiceId());\r\n//        if (!serviceOpt.isPresent()) {\r\n//            response.put(\"message\", \"Service not found\");\r\n//            return response;\r\n//        }\r\n//        Services service = serviceOpt.get();\r\n//\r\n//        // Kiểm tra Service Detail\r\n//        Optional<ServiceDetail> serviceDetailOpt = serviceDetailRepository.findById(request.getServiceDetailId());\r\n//        if (!serviceDetailOpt.isPresent()) {\r\n//            response.put(\"message\", \"Service Detail not found\");\r\n//            return response;\r\n//        }\r\n//        ServiceDetail serviceDetail = serviceDetailOpt.get();\r\n//\r\n//        // Gán thông tin cho Job\r\n//        job.setService(service);\r\n//        job.setServiceDetail(serviceDetail);\r\n//\r\n//        // Chuyển jobTime từ String sang LocalDateTime\r\n//        try {\r\n//            DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\r\n//            LocalDateTime jobTime = LocalDateTime.parse(request.getJobTime(), formatter);\r\n//            job.setScheduledTime(jobTime);\r\n//        } catch (Exception e) {\r\n//            response.put(\"message\", \"Invalid job time format\");\r\n//            return response;\r\n//        }\r\n//\r\n//        job.setCustomerAddress(customerAddress);\r\n//        job.setStatus(JobStatus.OPEN);\r\n//        job.setCustomer(customer);\r\n//\r\n//        // Tính toán giá dịch vụ dựa trên giá trong service_detail\r\n//        double serviceDetailPrice = serviceDetail.getPrice();  // Sử dụng giá dịch vụ từ service_detail\r\n//        double additionalPrice = serviceDetail.getAdditionalPrice();\r\n//        double finalPrice = serviceDetailPrice + additionalPrice;  // Bắt đầu với giá dịch vụ từ service_detail và phụ phí\r\n//\r\n//        // Kiểm tra xem job có thuộc giờ cao điểm hoặc ngày lễ/cuối tuần không\r\n//        double peakTimeFee = 0;\r\n//        double discount = 0;\r\n//\r\n//        // Kiểm tra ngày lễ và cuối tuần\r\n//        DayOfWeek dayOfWeek = job.getScheduledTime().getDayOfWeek();\r\n//        if (dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY) {\r\n//            // Thêm phụ phí cho cuối tuần\r\n//            peakTimeFee = 0.1 * finalPrice;  // 10% phụ phí cho cuối tuần\r\n//        }\r\n//\r\n//        // Kiểm tra xem job có vào khung giờ cao điểm hay không\r\n//        if (job.getScheduledTime().getHour() >= 18 && job.getScheduledTime().getHour() <= 22) {\r\n//            // Thêm phụ phí giờ cao điểm\r\n//            peakTimeFee += 0.2 * finalPrice; // 20% phụ phí giờ cao điểm\r\n//        }\r\n//\r\n//        // Cộng phụ phí vào giá cuối cùng\r\n//        finalPrice += peakTimeFee;\r\n//\r\n//        // Kiểm tra chiết khấu từ dịch vụ (nếu có)\r\n//        if (serviceDetail.getDiscounts() != null && !serviceDetail.getDiscounts().isEmpty()) {\r\n//            discount = 0.05 * finalPrice;  // Giảm giá 5% nếu có chiết khấu\r\n//            finalPrice -= discount;\r\n//        }\r\n//\r\n//        // Gán giá cuối cùng cho Job\r\n//        job.setTotalPrice(finalPrice);\r\n//\r\n//        // Tạo JobDetails mới và liên kết với Job\r\n//        JobDetails jobDetails = new JobDetails();\r\n//        jobDetails.setImageUrl(request.getImageUrl());\r\n//\r\n//        // Gán Job cho JobDetails trước khi lưu\r\n//        jobDetails.setJob(job); // Liên kết Job với JobDetails\r\n//\r\n//        // Lưu Job vào cơ sở dữ liệu trước\r\n//        jobRepository.save(job);\r\n//\r\n//        // Lưu JobDetails vào cơ sở dữ liệu\r\n//        jobDetailsRepository.save(jobDetails);\r\n//\r\n//        response.put(\"message\", \"Job booked successfully\");\r\n//        response.put(\"jobId\", job.getId());\r\n//        response.put(\"status\", job.getStatus());\r\n//        response.put(\"finalPrice\", finalPrice);  // Trả về giá cuối cùng\r\n//\r\n//        return response;\r\n//    }\r\n    \r\n    \r\n    public Map<String, Object> bookJob(@PathVariable Long customerId, @RequestBody BookJobRequest request) {\r\n        Map<String, Object> response = new HashMap<>();\r\n\r\n        // Kiểm tra khách hàng có tồn tại không\r\n        Optional<Customers> customerOpt = customerRepo.findById(customerId);\r\n        if (!customerOpt.isPresent()) {\r\n            response.put(\"message\", \"Customer not found with customerId: \" + customerId);\r\n            return response;\r\n        }\r\n        Customers customer = customerOpt.get();\r\n\r\n        // Kiểm tra địa chỉ của customer\r\n        Optional<CustomerAddresses> customerAddressOpt = customerAddressRepository.findById(request.getCustomerAddressId());\r\n        if (!customerAddressOpt.isPresent()) {\r\n            response.put(\"message\", \"Customer address not found\");\r\n            return response;\r\n        }\r\n        CustomerAddresses customerAddress = customerAddressOpt.get();\r\n\r\n        // Chuyển jobTime từ String sang LocalDateTime\r\n        LocalDateTime jobTime = null;\r\n        try {\r\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\r\n            jobTime = LocalDateTime.parse(request.getJobTime(), formatter);\r\n        } catch (Exception e) {\r\n            response.put(\"message\", \"Invalid job time format\");\r\n            return response;\r\n        }\r\n\r\n        // Kiểm tra trùng lịch và địa chỉ\r\n        List<Job> existingJobs = jobRepository.findByScheduledTimeAndCustomerAddress(jobTime, customerAddress);\r\n        if (!existingJobs.isEmpty()) {\r\n            // Kiểm tra trùng dịch vụ\r\n            for (Job existingJob : existingJobs) {\r\n                // Kiểm tra xem có dịch vụ và service detail trùng không\r\n                for (JobServiceDetail jobServiceDetail : existingJob.getJobServiceDetails()) {\r\n                    for (ServiceRequest serviceRequest : request.getServices()) {\r\n                        if (jobServiceDetail.getService().getId().equals(serviceRequest.getServiceId()) &&\r\n                                jobServiceDetail.getServiceDetail().getId().equals(serviceRequest.getServiceDetailId())) {\r\n                            response.put(\"message\", \"There is already a job booked at this time, address, and service.\");\r\n                            return response;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Tạo Job và gán các thuộc tính cần thiết\r\n        Job job = new Job();\r\n        job.setCustomer(customer);\r\n        job.setCustomerAddress(customerAddress);\r\n        job.setStatus(JobStatus.OPEN);\r\n        job.setScheduledTime(jobTime);\r\n\r\n        // Lưu Job vào cơ sở dữ liệu trước\r\n        job = jobRepository.save(job);\r\n\r\n        // Tính tổng giá cho tất cả các dịch vụ\r\n        double totalPrice = 0;\r\n\r\n        // Danh sách lưu các JobServiceDetail sẽ được tạo\r\n        List<JobServiceDetail> jobServiceDetails = new ArrayList<>();\r\n\r\n        // Duyệt qua các dịch vụ mà customer đã chọn\r\n        for (ServiceRequest serviceRequest : request.getServices()) {\r\n\r\n            // Kiểm tra dịch vụ có tồn tại không\r\n            Optional<Services> serviceOpt = serviceRepository.findById(serviceRequest.getServiceId());\r\n            if (!serviceOpt.isPresent()) {\r\n                response.put(\"message\", \"Service not found with serviceId: \" + serviceRequest.getServiceId());\r\n                return response;\r\n            }\r\n            Services service = serviceOpt.get();\r\n\r\n            // Kiểm tra chi tiết dịch vụ có tồn tại không\r\n            Optional<ServiceDetail> serviceDetailOpt = serviceDetailRepository.findById(serviceRequest.getServiceDetailId());\r\n            if (!serviceDetailOpt.isPresent()) {\r\n                response.put(\"message\", \"Service Detail not found for serviceId: \" + serviceRequest.getServiceDetailId());\r\n                return response;\r\n            }\r\n            ServiceDetail serviceDetail = serviceDetailOpt.get();\r\n\r\n            // Tính toán giá cho dịch vụ\r\n            double serviceDetailPrice = serviceDetail.getPrice();\r\n            double additionalPrice = serviceDetail.getAdditionalPrice();\r\n            double finalPrice = serviceDetailPrice + additionalPrice;\r\n\r\n            // Tính toán các phụ phí (giờ cao điểm, cuối tuần, chiết khấu...)\r\n            double peakTimeFee = 0;\r\n            if (job.getScheduledTime() != null) {\r\n                if (job.getScheduledTime().getDayOfWeek() == DayOfWeek.SATURDAY || job.getScheduledTime().getDayOfWeek() == DayOfWeek.SUNDAY) {\r\n                    peakTimeFee = 0.1 * finalPrice; // Phụ phí cuối tuần\r\n                }\r\n                if (job.getScheduledTime().getHour() >= 18 && job.getScheduledTime().getHour() <= 22) {\r\n                    peakTimeFee += 0.2 * finalPrice; // Phụ phí giờ cao điểm\r\n                }\r\n            }\r\n\r\n            finalPrice += peakTimeFee;\r\n\r\n            // Cộng tổng giá dịch vụ\r\n            totalPrice += finalPrice;\r\n\r\n            // Tạo JobServiceDetail và lưu vào cơ sở dữ liệu\r\n            JobServiceDetail jobServiceDetail = new JobServiceDetail();\r\n            jobServiceDetail.setJob(job);\r\n            jobServiceDetail.setService(service);\r\n            jobServiceDetail.setServiceDetail(serviceDetail);\r\n\r\n            // Thêm JobServiceDetail vào danh sách\r\n            jobServiceDetails.add(jobServiceDetail);\r\n        }\r\n\r\n        // Lưu các JobServiceDetail vào cơ sở dữ liệu\r\n        jobServiceDetailRepository.saveAll(jobServiceDetails);\r\n\r\n        // Cập nhật tổng giá và lưu lại Job\r\n        job.setTotalPrice(totalPrice);\r\n        jobRepository.save(job);\r\n\r\n        // Trả về thông tin công việc đã tạo\r\n        response.put(\"message\", \"Job booked successfully\");\r\n        response.put(\"jobId\", job.getId());\r\n        response.put(\"status\", job.getStatus());\r\n        response.put(\"totalPrice\", totalPrice);\r\n\r\n        return response;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public Map<String, Object> updateJobStatusToStarted(Long jobId, @PathVariable Long customerId) { // Dùng @PathVariable cho customerId\r\n        Map<String, Object> response = new HashMap<>();\r\n\r\n        // Tìm công việc theo jobId\r\n        Optional<Job> jobOpt = jobRepository.findById(jobId);\r\n        if (!jobOpt.isPresent()) {\r\n            response.put(\"message\", \"Job not found\");\r\n            return response;\r\n        }\r\n\r\n        Job job = jobOpt.get();\r\n\r\n        // Kiểm tra quyền của customer (sử dụng customerId từ @PathVariable)\r\n        if (!customerId.equals(job.getCustomer().getId().longValue())) {\r\n            response.put(\"message\", \"You are not authorized to start this job\");\r\n            return response;\r\n        }\r\n\r\n\r\n        // Kiểm tra trạng thái công việc và sự tồn tại của job application\r\n        JobApplication jobApplication = jobApplicationRepository.findByJobIdAndStatus(jobId, \"Accepted\");\r\n        if (jobApplication == null) {\r\n            response.put(\"message\", \"No cleaner assigned or job application is not in 'Accepted' state\");\r\n            return response;\r\n        }\r\n\r\n        if (!job.getStatus().equals(JobStatus.ARRIVED)) {\r\n            response.put(\"message\", \"Job is not in ARRIVED state\");\r\n            return response;\r\n        }\r\n\r\n        // Cập nhật trạng thái công việc thành 'STARTED'\r\n        job.setStatus(JobStatus.STARTED);\r\n        jobRepository.save(job);\r\n\r\n        response.put(\"message\", \"Job status updated to STARTED\");\r\n        return response;\r\n    }\r\n\r\n    \r\n    public List<CustomerAddresses> getAddressesByCustomerId(Integer customerId) {\r\n        return customerAddressRepository.findByCustomerId(customerId);\r\n    }\r\n    \r\n    \r\n    public boolean setDefaultAddressForCustomer(Integer customerId, Integer addressId) {\r\n        // Lấy tất cả các địa chỉ của customer\r\n        List<CustomerAddresses> addresses = customerAddressRepository.findByCustomerId(customerId);\r\n\r\n        if (addresses.isEmpty()) {\r\n            return false; // Nếu không có địa chỉ nào\r\n        }\r\n\r\n        // Cập nhật trạng thái is_default của tất cả các địa chỉ của customer thành false\r\n        for (CustomerAddresses address : addresses) {\r\n            address.setIs_current(false); // Hoặc nếu bạn dùng \"is_default\", hãy đổi theo thuộc tính đó\r\n            customerAddressRepository.save(address);\r\n        }\r\n\r\n        // Cập nhật địa chỉ được chọn thành mặc định\r\n        CustomerAddresses defaultAddress = customerAddressRepository.findById(addressId).orElse(null);\r\n        if (defaultAddress != null) {\r\n            defaultAddress.setIs_current(true); // Hoặc nếu bạn dùng \"is_default\", hãy đổi theo thuộc tính đó\r\n            customerAddressRepository.save(defaultAddress);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    \r\n    public Map<String, Object> updateJobStatusToDone(Long jobId) {\r\n        Map<String, Object> response = new HashMap<>();\r\n\r\n        // Lấy thông tin job từ jobId\r\n        Optional<Job> jobOpt = jobRepository.findById(jobId);\r\n        if (!jobOpt.isPresent()) {\r\n            response.put(\"message\", \"Job not found\");\r\n            return response;\r\n        }\r\n\r\n        Job job = jobOpt.get();\r\n\r\n        // Kiểm tra nếu job đã có trạng thái \"COMPLETED\"\r\n        if (!job.getStatus().equals(JobStatus.COMPLETED)) {\r\n            response.put(\"message\", \"Job must be in 'COMPLETED' state before marking as DONE\");\r\n            return response;\r\n        }\r\n\r\n        // Chuyển trạng thái công việc sang \"DONE\"\r\n        job.setStatus(JobStatus.DONE);\r\n        jobRepository.save(job);\r\n\r\n        response.put(\"message\", \"Job status updated to DONE\");\r\n        return response;\r\n    }\r\n    \r\n    // list tất cả job đã book\r\n    public List<Map<String, Object>> getBookedJobsForCustomer(Long customerId) {\r\n        List<Map<String, Object>> bookedJobs = new ArrayList<Map<String,Object>>();\r\n\r\n        // Lấy tất cả các job mà customer đã đặt\r\n        List<Job> jobs = jobRepository.findByCustomerId(customerId);\r\n\r\n        for (Job job : jobs) {\r\n            Map<String, Object> jobInfo = new HashMap<>();\r\n\r\n            // Thêm các thông tin chi tiết của job vào jobInfo\r\n            jobInfo.put(\"jobId\", job.getId());\r\n            jobInfo.put(\"scheduledTime\", job.getScheduledTime());  // Thời gian\r\n            jobInfo.put(\"customerAddress\", job.getCustomerAddress().getAddress());  // Địa chỉ\r\n            jobInfo.put(\"status\", job.getStatus());  // Trạng thái\r\n            jobInfo.put(\"totalPrice\", job.getTotalPrice());  // Giá\r\n            jobInfo.put(\"createdAt\", job.getCreatedAt());  // Thời gian tạo\r\n\r\n            // Thêm thông tin về customer đã đặt job\r\n            Customers customer = job.getCustomer();\r\n            if (customer != null) {\r\n                jobInfo.put(\"customerId\", customer.getId());\r\n                jobInfo.put(\"customerName\", customer.getFull_name());\r\n                jobInfo.put(\"customerPhone\", customer.getPhone());\r\n            }\r\n\r\n            // Thêm thông tin về địa chỉ của customer\r\n            CustomerAddresses customerAddress = job.getCustomerAddress();\r\n            if (customerAddress != null) {\r\n                jobInfo.put(\"customerAddressId\", customerAddress.getId());\r\n                jobInfo.put(\"customerAddress\", customerAddress.getAddress());\r\n                jobInfo.put(\"latitude\", customerAddress.getLatitude());\r\n                jobInfo.put(\"longitude\", customerAddress.getLongitude());\r\n            }\r\n\r\n            // Lấy tất cả các JobServiceDetail cho job này\r\n            List<JobServiceDetail> jobServiceDetails = jobServiceDetailRepository.findByJobId(job.getId());\r\n            if (jobServiceDetails != null && !jobServiceDetails.isEmpty()) {\r\n                List<Map<String, Object>> serviceList = new ArrayList<>();\r\n\r\n                // Duyệt qua tất cả các dịch vụ trong bảng job_service_detail\r\n                for (JobServiceDetail jobServiceDetail : jobServiceDetails) {\r\n                    Services service = jobServiceDetail.getService();\r\n                    if (service != null) {\r\n                        Map<String, Object> serviceInfo = new HashMap<>();\r\n                        serviceInfo.put(\"serviceName\", service.getName());\r\n                        serviceInfo.put(\"serviceDescription\", service.getDescription());\r\n\r\n                        // Lấy các chi tiết dịch vụ\r\n                        ServiceDetail serviceDetail = jobServiceDetail.getServiceDetail();\r\n                        if (serviceDetail != null) {\r\n                            serviceInfo.put(\"serviceDetailId\", serviceDetail.getId());\r\n                            serviceInfo.put(\"serviceDetailName\", serviceDetail.getName());\r\n                            serviceInfo.put(\"serviceDetailPrice\", serviceDetail.getPrice());\r\n                            serviceInfo.put(\"serviceDetailAdditionalPrice\", serviceDetail.getAdditionalPrice());\r\n                            serviceInfo.put(\"serviceDetailAreaRange\", serviceDetail.getAreaRange());\r\n                            serviceInfo.put(\"serviceDetailDescription\", serviceDetail.getDescription());\r\n                            serviceInfo.put(\"serviceDetailDiscounts\", serviceDetail.getDiscounts());\r\n                        }\r\n\r\n                        serviceList.add(serviceInfo);\r\n                    }\r\n                }\r\n\r\n                // Thêm thông tin dịch vụ vào jobInfo\r\n                jobInfo.put(\"services\", serviceList);\r\n            } else {\r\n                jobInfo.put(\"services\", \"No services found for this job\");\r\n            }\r\n\r\n            bookedJobs.add(jobInfo);\r\n        }\r\n\r\n        return bookedJobs;\r\n    }\r\n\r\n\r\n    \r\n    // huy job ddax book\r\n    public Map<String, Object> cancelJobForCustomer(Long customerId, Long jobId) {\r\n        Map<String, Object> response = new HashMap<>();\r\n\r\n        // Kiểm tra xem customer có tồn tại không\r\n        Optional<Customers> customerOpt = customerRepository.findById(customerId);\r\n        if (!customerOpt.isPresent()) {\r\n            response.put(\"message\", \"Customer not found\");\r\n            return response;\r\n        }\r\n        Customers customer = customerOpt.get();\r\n\r\n        // Tìm job theo jobId\r\n        Optional<Job> jobOpt = jobRepository.findById(jobId);\r\n        if (!jobOpt.isPresent()) {\r\n            response.put(\"message\", \"Job not found\");\r\n            return response;\r\n        }\r\n        Job job = jobOpt.get();\r\n\r\n        // Kiểm tra xem customer có phải là người tạo job này không\r\n        if (job.getCustomer().getId().longValue() != customerId) {\r\n            response.put(\"message\", \"You are not authorized to cancel this job\");\r\n            return response;\r\n        }\r\n\r\n\r\n        // Kiểm tra trạng thái của job\r\n        if (job.getStatus().equals(JobStatus.STARTED) || job.getStatus().equals(JobStatus.COMPLETED) || job.getStatus().equals(JobStatus.DONE) ) {\r\n            response.put(\"message\", \"You cannot cancel a job that has already started\");\r\n            return response;\r\n        }\r\n\r\n        // Cập nhật trạng thái công việc thành \"CANCELLED\"\r\n        job.setStatus(JobStatus.CANCELLED);\r\n        jobRepository.save(job);\r\n\r\n        response.put(\"message\", \"Job has been cancelled successfully\");\r\n        response.put(\"jobId\", jobId);\r\n        response.put(\"status\", job.getStatus());\r\n        return response;\r\n    }\r\n    \r\n    // LU\r\n    \r\n\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/services/JobService.java b/src/main/java/com/example/homecleanapi/services/JobService.java
--- a/src/main/java/com/example/homecleanapi/services/JobService.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/services/JobService.java	(date 1743672482141)
@@ -2,6 +2,9 @@
 
 
 
+import com.example.homecleanapi.Payment.VnpayConfig;
+import com.example.homecleanapi.Payment.VnpayRequest;
+import com.example.homecleanapi.Payment.VnpayService;
 import com.example.homecleanapi.dtos.BookJobRequest;
 import com.example.homecleanapi.dtos.BookJobRequest.ServiceRequest;
 import com.example.homecleanapi.enums.JobStatus;
@@ -54,124 +57,15 @@
     @Autowired
     private JobServiceDetailRepository jobServiceDetailRepository; 
     
-
+    @Autowired
+    private WalletRepository walletRepository;
     
+    @Autowired
+    private VnpayService vnpayService;
     
 
-    // Tạo job mới cho customer
-//    public Map<String, Object> bookJob(@PathVariable Long customerId, BookJobRequest request) {
-//        Map<String, Object> response = new HashMap<>();
-//
-//        System.out.println("customerId = " + customerId);
-//
-//        Optional<Customers> customerOpt = customerRepo.findById(customerId);
-//        if (!customerOpt.isPresent()) {
-//            response.put("message", "Customer not found with customerId: " + customerId);
-//            return response;
-//        }
-//
-//        Customers customer = customerOpt.get();
-//
-//        // Tìm địa chỉ của customer
-//        Optional<CustomerAddresses> customerAddressOpt = customerAddressRepository.findById(request.getCustomerAddressId());
-//        if (!customerAddressOpt.isPresent()) {
-//            response.put("message", "Customer address not found");
-//            return response;
-//        }
-//        CustomerAddresses customerAddress = customerAddressOpt.get();
-//
-//        Job job = new Job();
-//
-//        // Kiểm tra Service
-//        Optional<Services> serviceOpt = serviceRepository.findById(request.getServiceId());
-//        if (!serviceOpt.isPresent()) {
-//            response.put("message", "Service not found");
-//            return response;
-//        }
-//        Services service = serviceOpt.get();
-//
-//        // Kiểm tra Service Detail
-//        Optional<ServiceDetail> serviceDetailOpt = serviceDetailRepository.findById(request.getServiceDetailId());
-//        if (!serviceDetailOpt.isPresent()) {
-//            response.put("message", "Service Detail not found");
-//            return response;
-//        }
-//        ServiceDetail serviceDetail = serviceDetailOpt.get();
-//
-//        // Gán thông tin cho Job
-//        job.setService(service);
-//        job.setServiceDetail(serviceDetail);
-//
-//        // Chuyển jobTime từ String sang LocalDateTime
-//        try {
-//            DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
-//            LocalDateTime jobTime = LocalDateTime.parse(request.getJobTime(), formatter);
-//            job.setScheduledTime(jobTime);
-//        } catch (Exception e) {
-//            response.put("message", "Invalid job time format");
-//            return response;
-//        }
-//
-//        job.setCustomerAddress(customerAddress);
-//        job.setStatus(JobStatus.OPEN);
-//        job.setCustomer(customer);
-//
-//        // Tính toán giá dịch vụ dựa trên giá trong service_detail
-//        double serviceDetailPrice = serviceDetail.getPrice();  // Sử dụng giá dịch vụ từ service_detail
-//        double additionalPrice = serviceDetail.getAdditionalPrice();
-//        double finalPrice = serviceDetailPrice + additionalPrice;  // Bắt đầu với giá dịch vụ từ service_detail và phụ phí
-//
-//        // Kiểm tra xem job có thuộc giờ cao điểm hoặc ngày lễ/cuối tuần không
-//        double peakTimeFee = 0;
-//        double discount = 0;
-//
-//        // Kiểm tra ngày lễ và cuối tuần
-//        DayOfWeek dayOfWeek = job.getScheduledTime().getDayOfWeek();
-//        if (dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY) {
-//            // Thêm phụ phí cho cuối tuần
-//            peakTimeFee = 0.1 * finalPrice;  // 10% phụ phí cho cuối tuần
-//        }
-//
-//        // Kiểm tra xem job có vào khung giờ cao điểm hay không
-//        if (job.getScheduledTime().getHour() >= 18 && job.getScheduledTime().getHour() <= 22) {
-//            // Thêm phụ phí giờ cao điểm
-//            peakTimeFee += 0.2 * finalPrice; // 20% phụ phí giờ cao điểm
-//        }
-//
-//        // Cộng phụ phí vào giá cuối cùng
-//        finalPrice += peakTimeFee;
-//
-//        // Kiểm tra chiết khấu từ dịch vụ (nếu có)
-//        if (serviceDetail.getDiscounts() != null && !serviceDetail.getDiscounts().isEmpty()) {
-//            discount = 0.05 * finalPrice;  // Giảm giá 5% nếu có chiết khấu
-//            finalPrice -= discount;
-//        }
-//
-//        // Gán giá cuối cùng cho Job
-//        job.setTotalPrice(finalPrice);
-//
-//        // Tạo JobDetails mới và liên kết với Job
-//        JobDetails jobDetails = new JobDetails();
-//        jobDetails.setImageUrl(request.getImageUrl());
-//
-//        // Gán Job cho JobDetails trước khi lưu
-//        jobDetails.setJob(job); // Liên kết Job với JobDetails
-//
-//        // Lưu Job vào cơ sở dữ liệu trước
-//        jobRepository.save(job);
-//
-//        // Lưu JobDetails vào cơ sở dữ liệu
-//        jobDetailsRepository.save(jobDetails);
-//
-//        response.put("message", "Job booked successfully");
-//        response.put("jobId", job.getId());
-//        response.put("status", job.getStatus());
-//        response.put("finalPrice", finalPrice);  // Trả về giá cuối cùng
-//
-//        return response;
-//    }
     
-    
+  
     public Map<String, Object> bookJob(@PathVariable Long customerId, @RequestBody BookJobRequest request) {
         Map<String, Object> response = new HashMap<>();
 
@@ -200,53 +94,62 @@
             response.put("message", "Invalid job time format");
             return response;
         }
-
-        // Kiểm tra trùng lịch và địa chỉ
-        List<Job> existingJobs = jobRepository.findByScheduledTimeAndCustomerAddress(jobTime, customerAddress);
-        if (!existingJobs.isEmpty()) {
-            // Kiểm tra trùng dịch vụ
-            for (Job existingJob : existingJobs) {
-                // Kiểm tra xem có dịch vụ và service detail trùng không
-                for (JobServiceDetail jobServiceDetail : existingJob.getJobServiceDetails()) {
-                    for (ServiceRequest serviceRequest : request.getServices()) {
-                        if (jobServiceDetail.getService().getId().equals(serviceRequest.getServiceId()) &&
-                                jobServiceDetail.getServiceDetail().getId().equals(serviceRequest.getServiceDetailId())) {
-                            response.put("message", "There is already a job booked at this time, address, and service.");
-                            return response;
-                        }
-                    }
-                }
-            }
-        }
 
         // Tạo Job và gán các thuộc tính cần thiết
         Job job = new Job();
         job.setCustomer(customer);
         job.setCustomerAddress(customerAddress);
-        job.setStatus(JobStatus.OPEN);
         job.setScheduledTime(jobTime);
+        job.setReminder(request.getReminder());
 
-        // Lưu Job vào cơ sở dữ liệu trước
-        job = jobRepository.save(job);
+        // Kiểm tra phương thức thanh toán
+        if ("cash".equalsIgnoreCase(request.getPaymentMethod())) {
+            job.setStatus(JobStatus.OPEN);  // Nếu thanh toán bằng tiền mặt, đặt status là OPEN
+        } else if ("vnpay".equalsIgnoreCase(request.getPaymentMethod())) {
+            job.setStatus(JobStatus.PAID);  // Nếu thanh toán qua VNPay, đặt status là PAID
+        }
+
+        job.setPaymentMethod(request.getPaymentMethod());
 
         // Tính tổng giá cho tất cả các dịch vụ
         double totalPrice = 0;
+        for (ServiceRequest serviceRequest : request.getServices()) {
+            Optional<Services> serviceOpt = serviceRepository.findById(serviceRequest.getServiceId());
+            if (!serviceOpt.isPresent()) {
+                response.put("message", "Service not found with serviceId: " + serviceRequest.getServiceId());
+                return response;
+            }
+            Services service = serviceOpt.get();
+            Optional<ServiceDetail> serviceDetailOpt = serviceDetailRepository.findById(serviceRequest.getServiceDetailId());
+            if (!serviceDetailOpt.isPresent()) {
+                response.put("message", "Service Detail not found for serviceId: " + serviceRequest.getServiceDetailId());
+                return response;
+            }
+            ServiceDetail serviceDetail = serviceDetailOpt.get();
+
+            // Tính toán giá dịch vụ
+            totalPrice += serviceDetail.getPrice() + serviceDetail.getAdditionalPrice();
+        }
 
-        // Danh sách lưu các JobServiceDetail sẽ được tạo
+        // Kiểm tra nếu totalPrice lớn hơn 1 triệu và phương thức thanh toán là tiền mặt
+        if (totalPrice > 1000000 && "cash".equalsIgnoreCase(request.getPaymentMethod())) {
+            response.put("message", "Total price exceeds 1 million. Cash payment is not allowed.");
+            return response;  // Dừng lại và trả về phản hồi, không tạo job
+        }
+
+        // Lưu Job vào cơ sở dữ liệu
+        job.setTotalPrice(totalPrice);
+        job = jobRepository.save(job);
+
+        // Lưu các JobServiceDetail nếu có
         List<JobServiceDetail> jobServiceDetails = new ArrayList<>();
-
-        // Duyệt qua các dịch vụ mà customer đã chọn
         for (ServiceRequest serviceRequest : request.getServices()) {
-
-            // Kiểm tra dịch vụ có tồn tại không
             Optional<Services> serviceOpt = serviceRepository.findById(serviceRequest.getServiceId());
             if (!serviceOpt.isPresent()) {
                 response.put("message", "Service not found with serviceId: " + serviceRequest.getServiceId());
                 return response;
             }
             Services service = serviceOpt.get();
-
-            // Kiểm tra chi tiết dịch vụ có tồn tại không
             Optional<ServiceDetail> serviceDetailOpt = serviceDetailRepository.findById(serviceRequest.getServiceDetailId());
             if (!serviceDetailOpt.isPresent()) {
                 response.put("message", "Service Detail not found for serviceId: " + serviceRequest.getServiceDetailId());
@@ -254,45 +157,46 @@
             }
             ServiceDetail serviceDetail = serviceDetailOpt.get();
 
-            // Tính toán giá cho dịch vụ
-            double serviceDetailPrice = serviceDetail.getPrice();
-            double additionalPrice = serviceDetail.getAdditionalPrice();
-            double finalPrice = serviceDetailPrice + additionalPrice;
-
-            // Tính toán các phụ phí (giờ cao điểm, cuối tuần, chiết khấu...)
-            double peakTimeFee = 0;
-            if (job.getScheduledTime() != null) {
-                if (job.getScheduledTime().getDayOfWeek() == DayOfWeek.SATURDAY || job.getScheduledTime().getDayOfWeek() == DayOfWeek.SUNDAY) {
-                    peakTimeFee = 0.1 * finalPrice; // Phụ phí cuối tuần
-                }
-                if (job.getScheduledTime().getHour() >= 18 && job.getScheduledTime().getHour() <= 22) {
-                    peakTimeFee += 0.2 * finalPrice; // Phụ phí giờ cao điểm
-                }
-            }
-
-            finalPrice += peakTimeFee;
-
-            // Cộng tổng giá dịch vụ
-            totalPrice += finalPrice;
-
-            // Tạo JobServiceDetail và lưu vào cơ sở dữ liệu
+            // Tạo JobServiceDetail và lưu vào danh sách
             JobServiceDetail jobServiceDetail = new JobServiceDetail();
             jobServiceDetail.setJob(job);
             jobServiceDetail.setService(service);
             jobServiceDetail.setServiceDetail(serviceDetail);
 
-            // Thêm JobServiceDetail vào danh sách
             jobServiceDetails.add(jobServiceDetail);
         }
 
         // Lưu các JobServiceDetail vào cơ sở dữ liệu
         jobServiceDetailRepository.saveAll(jobServiceDetails);
 
-        // Cập nhật tổng giá và lưu lại Job
-        job.setTotalPrice(totalPrice);
-        jobRepository.save(job);
+        // Nếu chọn phương thức thanh toán VNPay
+        if ("vnpay".equalsIgnoreCase(request.getPaymentMethod())) {
+            try {
+                // Tạo VNPay Request với số tiền thanh toán
+                VnpayRequest vnpayRequest = new VnpayRequest();
+                long amount = (long) (totalPrice);  // Đảm bảo chuyển đổi tổng tiền thành đơn vị tiền tệ hợp lệ
+                vnpayRequest.setAmount(String.valueOf(amount)); // Gửi số tiền đã được nhân với 100
+
+                // Tạo URL thanh toán VNPay
+                String paymentUrl = vnpayService.createPayment(vnpayRequest);
+
+                // Lấy txnRef từ URL của VNPay
+                String txnRef = extractTxnRefFromUrl(paymentUrl);  // Lấy txnRef từ URL của VNPay
+
+                // Lưu txnRef vào Job ngay sau khi tạo paymentUrl
+                job.setTxnRef(txnRef);  // Lưu txnRef vào Job
+                jobRepository.save(job);  // Lưu cập nhật txnRef vào database
 
-        // Trả về thông tin công việc đã tạo
+                // Trả về URL thanh toán cho người dùng
+                response.put("paymentUrl", paymentUrl);
+                return response;
+            } catch (Exception e) {
+                response.put("message", "Failed to create payment through VNPay: " + e.getMessage());
+                return response;
+            }
+        }
+
+        // Nếu chọn phương thức thanh toán tiền mặt, hoàn tất tạo job
         response.put("message", "Job booked successfully");
         response.put("jobId", job.getId());
         response.put("status", job.getStatus());
@@ -305,6 +209,25 @@
 
 
 
+    // Hàm để trích xuất txnRef từ URL trả về của VNPay
+    private String extractTxnRefFromUrl(String paymentUrl) {
+        try {
+            // Trích xuất txnRef từ URL
+            String[] urlParts = paymentUrl.split("\\?");
+            for (String part : urlParts[1].split("&")) {
+                if (part.startsWith("vnp_TxnRef")) {
+                    return part.split("=")[1];
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+
+
+
 
 
 
@@ -397,13 +320,56 @@
             return response;
         }
 
+        // Kiểm tra xem có cleaner nào đã ứng tuyển và được chấp nhận cho công việc này
+        JobApplication jobApplication = jobApplicationRepository.findByJobIdAndStatus(jobId, "Accepted");
+
+        if (jobApplication == null) {
+            response.put("message", "No cleaner assigned to this job");
+            return response;
+        }
+
+        // Lấy cleaner từ jobApplication
+        Employee cleaner = jobApplication.getCleaner();
+
         // Chuyển trạng thái công việc sang "DONE"
         job.setStatus(JobStatus.DONE);
         jobRepository.save(job);
 
+        // Nếu phương thức thanh toán là "Cash", tiến hành trừ tiền hoa hồng từ ví của cleaner
+        if (job.getPaymentMethod().equalsIgnoreCase("Cash")) {
+            // Lấy thông tin ví của cleaner
+            Optional<Wallet> walletOpt = walletRepository.findByCleanerId(cleaner.getId());
+            if (!walletOpt.isPresent()) {
+                response.put("message", "Cleaner wallet not found");
+                return response;
+            }
+
+            Wallet wallet = walletOpt.get();
+
+            // Tính hoa hồng (20% của tổng giá)
+            double commission = 0.2 * job.getTotalPrice();
+
+            // Kiểm tra số dư ví của cleaner có đủ để trừ hoa hồng không
+            if (wallet.getBalance() < commission) {
+                response.put("message", "Insufficient balance in cleaner's wallet to cover the commission");
+                return response;
+            }
+
+            // Trừ đi hoa hồng từ ví của cleaner
+            wallet.setBalance(wallet.getBalance() - commission);
+            walletRepository.save(wallet);
+
+            response.put("message", "Commission deducted from cleaner's wallet");
+        }
+
         response.put("message", "Job status updated to DONE");
         return response;
     }
+
+
+
+
+
     
     // list tất cả job đã book
     public List<Map<String, Object>> getBookedJobsForCustomer(Long customerId) {
@@ -526,6 +492,9 @@
         return response;
     }
     
+    
+    
+    
     // LU
     
 
Index: ../FE/home-clean-fe/src/assets/images/user-circle.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/images/user-circle.svg b/../FE/home-clean-fe/src/assets/images/user-circle.svg
new file mode 100644
--- /dev/null	(date 1743672482065)
+++ b/../FE/home-clean-fe/src/assets/images/user-circle.svg	(date 1743672482065)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14"><defs><style>.a{fill:#fff;}</style></defs><path class="a" d="M7,14a7,7,0,1,1,7-7A7.008,7.008,0,0,1,7,14ZM7,7.875a4.389,4.389,0,0,0-3.978,2.551,5.251,5.251,0,0,0,7.956,0A4.391,4.391,0,0,0,7,7.875Zm0-5.25a1.75,1.75,0,1,0,1.75,1.75A1.752,1.752,0,0,0,7,2.625Z"/></svg>
\ No newline at end of file
Index: ../FE/home-clean-fe/src/components/Admin/AppHeader.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/Admin/AppHeader.jsx b/../FE/home-clean-fe/src/components/Admin/AppHeader.jsx
new file mode 100644
--- /dev/null	(date 1743672482067)
+++ b/../FE/home-clean-fe/src/components/Admin/AppHeader.jsx	(date 1743672482067)
@@ -0,0 +1,72 @@
+import { useContext } from "react";
+import { AuthContext } from "../../context/AuthContext";
+import { useNavigate } from "react-router-dom";
+import { Layout, Badge, Avatar, Dropdown, Space, message } from "antd";
+import {
+  BellOutlined,
+  CaretDownOutlined,
+  UserOutlined,
+  LogoutOutlined,
+} from "@ant-design/icons";
+
+const { Header } = Layout;
+
+const AppHeader = () => {
+  const { admin, dispatch } = useContext(AuthContext);
+  const navigate = useNavigate();
+
+  const handleLogout = () => {
+    dispatch({ type: "LOGOUT" });
+    message.success("Đăng xuất thành công!");
+    navigate("/admin-login");
+  };
+
+  // Menu items for the dropdown
+  const menuItems = [
+    {
+      key: "1",
+      label: "Đăng xuất",
+      icon: <LogoutOutlined />,
+      onClick: handleLogout,
+    },
+  ];
+
+  const getAdminName = () => {
+    if (admin && admin.adminName) {
+      return admin.adminName;
+    }
+    // Fallback to localStorage for compatibility
+    const storedName = localStorage.getItem("name");
+    return storedName ? storedName : "";
+  };
+
+  return (
+    <Header
+      style={{
+        background: "#fff",
+        padding: "0 16px",
+        display: "flex",
+        alignItems: "center",
+        justifyContent: "space-between",
+      }}
+    >
+      <div style={{ display: "flex", alignItems: "center" }}>
+        {/* Left side of header can be extended here */}
+      </div>
+      <div style={{ display: "flex", alignItems: "center" }}>
+        <Badge count={2} style={{ marginRight: 24 }}>
+          <BellOutlined style={{ fontSize: 20 }} />
+        </Badge>
+        <Dropdown menu={{ items: menuItems }} placement="bottomRight">
+          <Space style={{ marginLeft: 16, cursor: "pointer" }}>
+            <Avatar icon={<UserOutlined />} />
+            <div>{getAdminName()}</div>
+            <CaretDownOutlined />
+          </Space>
+        </Dropdown>
+      </div>
+    </Header>
+  );
+};
+
+export default AppHeader;
Index: ../FE/home-clean-fe/src/assets/styles/main.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/styles/main.css b/../FE/home-clean-fe/src/assets/styles/main.css
new file mode 100644
--- /dev/null	(date 1743672482066)
+++ b/../FE/home-clean-fe/src/assets/styles/main.css	(date 1743672482066)
@@ -0,0 +1,3048 @@
+/*!
+=========================================================
+* Muse Ant Design Dashboard - v1.0.0
+=========================================================
+* Product Page: https://www.creative-tim.com/product/muse-ant-design-dashboard
+* Copyright 2021 Creative Tim (https://www.creative-tim.com)
+* Licensed under MIT (https://github.com/creativetimofficial/muse-ant-design-dashboard/blob/main/LICENSE.md)
+* Coded by Creative Tim
+=========================================================
+* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
+*/
+body {
+  padding: 0 0 30px 0;
+  background-color: #fafafa;
+  letter-spacing: -0.3px;
+  color: rgba(0, 0, 0, 0.65);
+  font-size: 14px;
+  line-height: 1.6;
+  font-weight: 400;
+  font-family: open sans, Helvetica, Arial, sans-serif;
+}
+.ant-layout.ant-layout-has-sider {
+  flex-direction: row;
+}
+.layout-dashboard {
+  background: transparent;
+  text-align: left;
+  position: relative;
+  overflow-x: hidden;
+}
+@media (min-width: 992px) {
+  .layout-dashboard {
+    overflow: auto;
+  }
+}
+.layout-dashboard .ant-layout-sider.sider-primary {
+  width: 250px;
+  position: fixed;
+  left: 0;
+  z-index: 99;
+  height: 100vh;
+  overflow: auto;
+  margin: 0;
+  padding: 33px 20px;
+}
+.layout-dashboard .ant-layout-sider.sider-primary .brand img {
+  height: 30px;
+}
+.layout-dashboard .ant-layout-sider.sider-primary hr {
+  margin: 18px 0;
+  border: none;
+  height: 1px;
+  background-color: #f5f5f5;
+}
+.layout-dashboard .ant-layout-sider.sider-primary .brand {
+  font-weight: 600;
+}
+.layout-dashboard .ant-layout-sider.sider-primary .brand span {
+  vertical-align: middle;
+  margin-left: 3px;
+}
+
+.layout-dashboard .ant-layout-sider.sider-primary .ant-layout-sider-children {
+  width: auto;
+}
+
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-inline {
+  border: none;
+}
+.layout-dashboard .ant-menu {
+  background: transparent;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-inline
+  .ant-menu-item,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-inline
+  .ant-menu-submenu {
+  margin: 0;
+  overflow: visible;
+}
+
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-item,
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-submenu {
+  padding: 0 !important;
+  height: auto;
+  line-height: normal;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-inline
+  .ant-menu-item:after,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-inline
+  .ant-menu-submenu:after {
+  display: none;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-item.ant-menu-item-selected,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-item.ant-menu-item:active,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-item
+  .ant-menu-submenu-selected,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-item.ant-menu-submenu-title:active,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-item
+  .ant-menu-submenu:active,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu.ant-menu-item-selected,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu.ant-menu-item:active,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu
+  .ant-menu-submenu-selected,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu.ant-menu-submenu-title:active,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu
+  .ant-menu-submenu:active {
+  background-color: transparent;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-item.ant-menu-item-selected
+  .active,
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-item .active,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu.ant-menu-item-selected
+  .active,
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-submenu .active {
+  background-color: #fff;
+  box-shadow: 0 20px 27px rgb(0 0 0 / 5%);
+  font-weight: 600;
+}
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-item a,
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-submenu a {
+  padding: 10px 16px;
+  color: #141414;
+  border-radius: 8px;
+  display: flex;
+  align-items: center;
+  white-space: nowrap;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary.ant-layout-sider-primary
+  .ant-menu-item.ant-menu-item-selected
+  .active
+  .icon,
+.layout-dashboard
+  .ant-layout-sider.sider-primary.ant-layout-sider-primary
+  .ant-menu-item
+  .active
+  .icon {
+  background-color: #1890ff;
+}
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-item.ant-menu-item-selected
+  .active
+  .icon,
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-item .active .icon,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu.ant-menu-item-selected
+  .active
+  .icon,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu
+  .active
+  .icon {
+  background-color: #1890ff;
+}
+
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-item .icon,
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-submenu .icon {
+  display: inline-flex;
+  width: 32px;
+  height: 32px;
+  background-color: #fff;
+  box-shadow: 0 4px 6px rgb(0 0 0 / 12%);
+  border-radius: 6px;
+  justify-content: center;
+  align-items: center;
+  margin-right: 11px;
+  vertical-align: middle;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-item.ant-menu-item-selected
+  .active
+  svg
+  path,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-item
+  .active
+  svg
+  path,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu.ant-menu-item-selected
+  .active
+  svg
+  path,
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-submenu
+  .active
+  svg
+  path {
+  fill: #fff;
+}
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-item svg path,
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-submenu svg path {
+  fill: #bfbfbf;
+}
+
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-item a:hover,
+.layout-dashboard .ant-layout-sider.sider-primary .ant-menu-submenu a:hover {
+  color: #141414;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary
+  .ant-menu-inline
+  .ant-menu-item.menu-item-header {
+  padding: 10px 16px !important;
+  color: #8c8c8c;
+  font-weight: 700;
+  font-size: 13px;
+  text-transform: uppercase;
+  display: block;
+}
+
+.menu-item-header:hover {
+  color: inherit;
+}
+
+.layout-dashboard .ant-layout-sider.sider-primary.ant-layout-sider-zero-width {
+  overflow-x: hidden;
+  width: 210px;
+  margin: 0;
+  padding: 33px 0;
+}
+
+.layout-dashboard.has-sidebar .ant-layout-sider.sider-primary .aside-footer {
+  display: block;
+}
+.layout-dashboard
+  .ant-layout-sider.sider-primary.ant-layout-sider-primary
+  .footer-box {
+  background-color: #1890ff;
+  color: #fff;
+  box-shadow: none;
+}
+.layout-dashboard .ant-layout-sider.sider-primary .footer-box {
+  background-color: #fff;
+  color: #141414;
+  padding: 16px;
+  border-radius: 8px;
+  box-shadow: 0 20px 27px rgb(0 0 0 / 5%);
+  margin-bottom: 8px;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary.ant-layout-sider-primary
+  .footer-box
+  .icon {
+  background-color: #fff;
+}
+.layout-dashboard .ant-layout-sider.sider-primary .footer-box .icon {
+  display: inline-flex;
+  width: 32px;
+  height: 32px;
+  box-shadow: 0 4px 6px rgb(0 0 0 / 12%);
+  border-radius: 6px;
+  justify-content: center;
+  align-items: center;
+  margin-bottom: 15px;
+  background-color: #1890ff;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary.ant-layout-sider-primary
+  .footer-box
+  h6 {
+  color: #fff;
+}
+.layout-dashboard .ant-layout-sider.sider-primary .footer-box h6 {
+  font-weight: 600;
+  font-size: 16px;
+  color: #141414;
+  margin-bottom: 0;
+}
+.layout-dashboard
+  .ant-layout-sider.sider-primary.ant-layout-sider-primary
+  .footer-box
+  p {
+  color: #f5f5f5;
+}
+.layout-dashboard .ant-layout-sider.sider-primary .footer-box p {
+  color: #8c8c8c;
+  font-weight: 600;
+}
+
+.layout-dashboard
+  .ant-layout-sider.sider-primary.ant-layout-sider-primary
+  .footer-box
+  button {
+  background-color: #fff;
+  border-color: #f0f0f0;
+  color: #141414;
+}
+
+.layout-dashboard .ant-layout-sider.sider-primary .footer-box button {
+  margin: 0;
+}
+.ant-btn-sm,
+.ant-radio-group-small .ant-radio-button-wrapper {
+  height: 34px;
+  font-size: 12px;
+  padding: 0 15px;
+}
+.ant-btn-sm {
+  border-radius: 4px;
+}
+
+.ant-btn-sm,
+.ant-radio-group-small .ant-radio-button-wrapper {
+  height: 34px;
+  font-size: 12px;
+  padding: 0 15px;
+}
+.ant-btn-sm {
+  border-radius: 4px;
+}
+.ant-btn,
+.ant-radio-group .ant-radio-button-wrapper {
+  font-weight: 600;
+}
+
+.layout-dashboard .ant-layout-sider.sider-primary .aside-footer {
+  padding-top: 100px;
+  padding-bottom: 33px;
+}
+.ant-menu-inline.ant-menu-root .ant-menu-item,
+.ant-menu-inline.ant-menu-root .ant-menu-submenu-title {
+  display: block;
+}
+
+.ant-layout.ant-layout-has-sider > .ant-layout,
+.ant-layout.ant-layout-has-sider > .ant-layout-content {
+  overflow-x: hidden;
+}
+.layout-dashboard .ant-layout {
+  background: transparent;
+  position: relative;
+  min-height: 100vh;
+  width: 100%;
+  flex-shrink: 0;
+}
+
+.layout-dashboard .ant-layout-header {
+  background: transparent;
+  height: auto;
+  padding: 16px;
+  margin: 10px 4px;
+  line-height: inherit;
+  border-radius: 12px;
+  transition: 0.2s;
+}
+
+.layout-dashboard .ant-breadcrumb > span .ant-breadcrumb-link a {
+  color: #8c8c8c;
+}
+.layout-dashboard .ant-breadcrumb > span:last-child .ant-breadcrumb-link {
+  color: #141414;
+}
+.layout-dashboard .ant-page-header-heading {
+  margin-top: 0;
+}
+.layout-dashboard .ant-page-header-heading .ant-page-header-heading-title {
+  font-weight: 700;
+  font-size: 16px;
+  line-height: 20px;
+  margin-top: 4px;
+}
+.layout-dashboard .header-control {
+  display: flex;
+  flex-direction: row-reverse;
+  align-items: center;
+  margin-top: 10px;
+}
+
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown {
+  background: #fff;
+  box-shadow: 0 20px 27px rgb(0 0 0 / 5%);
+  border-radius: 12px;
+  min-width: 276px;
+  padding: 16px 8px;
+}
+
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown
+  ul.ant-dropdown-menu-items {
+  margin: 0px;
+  padding: 0px;
+}
+
+.ant-dropdown.ant-dropdown-placement-bottomRight {
+  min-width: inherit !important;
+}
+
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown
+  .ant-list-item {
+  padding: 5px 16px;
+  margin-bottom: 8px;
+}
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown
+  .ant-avatar {
+  width: 36px;
+  height: 36px;
+  background-color: #fafafa;
+  box-shadow: 0 4px 6px rgb(0 0 0 / 12%);
+  display: flex;
+  justify-content: center;
+  align-items: center;
+}
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown
+  .ant-list-item-meta-title {
+  line-height: normal;
+}
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdownt
+  .ant-list-item-meta-description {
+  color: #8c8c8c;
+  font-size: 12px;
+  line-height: 12px;
+  font-weight: 600;
+}
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown
+  .ant-list-item-meta-description
+  svg {
+  width: 14px;
+  height: 14px;
+  fill: #8c8c8c;
+  vertical-align: middle;
+  margin-right: 4px;
+}
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown
+  .ant-list-item-meta-description
+  svg
+  path {
+  fill: #8c8c8c;
+}
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown
+  .ant-list-item-meta-description
+  span {
+  vertical-align: middle;
+}
+
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown
+  .ant-avatar
+  .ant-avatar-string {
+  top: 6px;
+}
+
+.ant-dropdown-menu.ant-dropdown-menu-split.header-notifications-dropdown
+  .ant-avatar
+  .ant-avatar-string
+  svg {
+  width: 22px;
+  height: 22px;
+}
+
+.h3,
+.h4,
+h3,
+h4 {
+  font-weight: 700;
+  color: #141414;
+}
+
+.ant-list-item-meta-title > a {
+  color: rgba(0, 0, 0, 0.65);
+  transition: all 0.3s;
+}
+
+.ant-list-item-meta-title {
+  margin-bottom: 4px;
+  color: rgba(0, 0, 0, 0.65);
+  font-size: 14px;
+  line-height: 22px;
+}
+
+.layout-dashboard .header-control .ant-btn-link {
+  height: auto;
+  padding: 0 7px;
+  margin: 0;
+  box-shadow: none;
+  color: #8c8c8c;
+  line-height: normal;
+}
+
+.ant-btn svg {
+  margin-right: 5px;
+}
+.layout-dashboard .header-control svg {
+  width: 20px;
+  height: 20px;
+}
+
+.layout-dashboard .header-control svg path {
+  fill: #141414;
+}
+
+.layout-dashboard .header-control .btn-sign-in {
+  height: auto;
+  padding: 0 7px;
+  margin: 0;
+  box-shadow: none;
+  color: #8c8c8c;
+}
+.layout-dashboard .header-control .btn-sign-in svg {
+  margin-right: 4px;
+}
+.layout-dashboard .header-control svg {
+  vertical-align: middle;
+}
+
+.layout-dashboard .header-control .header-search {
+  width: 213px;
+  margin: 0 7px 0 0;
+  border-radius: 6px;
+  height: 40px;
+  border: 1px solid #d9d9d9;
+}
+
+.layout-dashboard .header-control .anticon.anticon-search svg {
+  width: 16px;
+  height: 16px;
+}
+.layout-dashboard .header-control .header-search svg path {
+  fill: #8c8c8c;
+}
+
+.settings-drawer .drawer-content > hr {
+  margin: 18px 0;
+  border: none;
+  height: 1px;
+  background-color: #f5f5f5;
+}
+
+.settings-drawer .drawer-content > h6 {
+  font-size: 20px;
+  margin-bottom: 0;
+}
+.layout-dashboard .settings-drawer .drawer-content h6 {
+  font-weight: 600;
+  color: #141414;
+}
+.settings-drawer .drawer-content p {
+  color: #8c8c8c;
+}
+p {
+  font-size: 14px;
+}
+.settings-drawer .drawer-content .sidebar-color h6 {
+  margin-bottom: 8px;
+}
+
+.h6,
+h6 {
+  font-size: 16px;
+}
+
+.drawer-sidebar .ant-drawer-body {
+  padding: 0px;
+}
+
+.drawer-sidebar
+  .ant-drawer-body
+  aside.ant-layout-sider.ant-layout-sider-light.sider-primary.ant-layout-sider-primary {
+  margin: 0px;
+}
+
+.layout-dashboard
+  .header-control
+  .header-search
+  .ant-input-suffix
+  .ant-input-search-icon.anticon-loading,
+.layout-dashboard .header-control .sidebar-toggler {
+  display: block;
+}
+.layout-dashboard .header-control .btn-sign-in span {
+  font-weight: 600;
+  vertical-align: middle;
+  display: none;
+}
+
+/* Old css start */
+.site-layout-background {
+  background: transparent;
+}
+
+header.ant-layout-header.subheader {
+  background: transparent;
+}
+
+.sidemenu {
+  margin-top: 20px;
+  margin-left: 20px;
+}
+
+.logo img {
+  width: 32px;
+  margin-right: 10px;
+}
+
+.logo {
+  margin-bottom: 15px;
+}
+.logo span {
+  font-size: 16px;
+  font-weight: 600;
+}
+
+hr.horizontal.dark {
+  background-image: linear-gradient(
+    90deg,
+    transparent,
+    rgb(0 0 0 / 12%),
+    transparent
+  );
+  border: 0px;
+}
+hr.horizontal {
+  background-color: transparent;
+}
+hr:not([size]) {
+  height: 1px;
+}
+
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav {
+  background: transparent;
+}
+
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav li {
+  padding: 10px 16px !important;
+  height: auto;
+  line-height: normal;
+  margin: 0px;
+  border: 0px;
+  font-size: 16px;
+  color: #141414;
+}
+
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav
+  li.ant-menu-item-selected {
+  box-shadow: 0px 20px 27px #0000000d;
+  border-radius: 8px;
+  background: #fff;
+  border: 0px;
+  font-weight: 600;
+}
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav
+  li.ant-menu-item-selected {
+  box-shadow: 0px 20px 27px #0000000d;
+  border-radius: 8px;
+  background: #fff;
+  border: 0px;
+  font-weight: 600;
+}
+.ant-menu-inline.ant-menu-root .ant-menu-item > .ant-menu-title-content,
+.ant-menu-inline.ant-menu-root
+  .ant-menu-submenu-title
+  > .ant-menu-title-content {
+  flex: auto;
+  min-width: 0;
+  overflow: visible;
+  text-overflow: ellipsis;
+}
+
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav li::after {
+  display: none;
+}
+
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav
+  li
+  span.anticon {
+  width: 32px;
+  height: 32px;
+  line-height: 32px;
+  background: #fff;
+  box-shadow: 0px 4px 6px #0000001f;
+  border-radius: 6px;
+  font-size: 16px;
+}
+
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav
+  li.ant-menu-item-selected
+  span.anticon {
+  background: #1890ff;
+  color: #fff;
+}
+
+/* ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav li:hover {
+  box-shadow: 0px 20px 27px #0000000d;
+  border-radius: 8px;
+  background: #fff;
+  border: 0px;
+  font-weight: 600;
+}
+
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav
+  li:hover
+  span.anticon {
+  background: #1890ff;
+  color: #fff;
+} */
+
+.divder {
+  display: table;
+  width: 100%;
+  padding: 10px 15px;
+  color: #8c8c8c;
+  font-weight: 600;
+  margin: 15px 0px;
+}
+
+.ant-card.ant-card-bordered.documentation-card {
+  border: 0px;
+  box-shadow: 0px 20px 27px #0000000d;
+  border-radius: 8px;
+  background: #fff;
+}
+.p-15 {
+  padding: 15px;
+}
+.card-document {
+  width: 32px;
+  height: 32px;
+  text-align: center;
+  box-shadow: 0px 4px 6px #0000001f;
+  border-radius: 6px;
+  font-size: 19px;
+  background: #1890ff;
+  color: #fff;
+  direction: ltr;
+  margin-bottom: 15px;
+}
+.documentation-card h4 {
+  margin: 0px;
+}
+.left-nav {
+  /* height: 435px;
+  overflow: hidden;
+  overflow-y: auto;
+  padding-right: 15px; */
+
+  margin-top: 15px;
+}
+.ant-layout {
+  background: #fafafa;
+}
+.pageheader {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+.rightside-top {
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  line-height: normal;
+}
+
+.signin {
+  white-space: nowrap;
+  margin: 0px 20px;
+}
+
+.signin span.ant-avatar {
+  margin-right: 9px;
+}
+
+.shadow-lg {
+  box-shadow: 0 8px 26px -4px hsla(0, 0%, 8%, 0.15),
+    0 8px 9px -5px hsla(0, 0%, 8%, 0.06) !important;
+}
+.ant-menu-inline,
+.ant-menu-vertical,
+.ant-menu-vertical-left {
+  border: 0px;
+}
+.header-top h4 {
+  margin: 0px;
+  font-size: 20px;
+}
+
+.header-top .subtitle {
+  display: block;
+  font-weight: normal;
+  color: #8c8c8c;
+  font-size: 14px;
+}
+
+.header-top {
+  margin-top: -10px;
+}
+
+.ant-drawer.ant-drawer-right.ant-drawer-open.colorside button.ant-drawer-close {
+  color: #000;
+}
+.header-top {
+  border-bottom: 1px solid rgb(140 140 140 / 7%);
+  padding-bottom: 15px;
+}
+
+.rightside-top span.ant-input-affix-wrapper {
+  border-radius: 4px;
+}
+
+.rightside-top span.ant-input-affix-wrapper span.ant-input-prefix {
+  color: #c0c0c0;
+}
+
+.setting button.ant-btn {
+  padding: 0px;
+  line-height: normal;
+  background: transparent;
+  border: 0px;
+  box-shadow: none;
+}
+button.ant-btn.bell {
+  padding: 0px;
+  border: 0px;
+  background: transparent;
+  box-shadow: none;
+  position: relative;
+}
+button.ant-btn.bell strong {
+  position: absolute;
+  top: -1px;
+  right: -5px;
+  display: inline-block;
+  width: 20px;
+  height: 20px;
+  background: #f5222d;
+  border-radius: 100%;
+  text-align: center;
+  line-height: normal;
+  font-weight: normal;
+  color: #fff;
+}
+.ant-dropdown-menu.ant-dropdown-menu-split.list-notifaction {
+  width: 336px;
+}
+
+.list-notifaction ul {
+  padding: 5px 10px;
+  margin: 0px;
+}
+
+.list-notifaction ul li {
+  display: block;
+  width: 100%;
+
+  clear: both;
+  font-weight: 400;
+  color: #67748e;
+  text-align: inherit;
+  white-space: nowrap;
+  background-color: transparent;
+  border: 0;
+}
+
+.list-notifaction ul li a {
+  display: block;
+  padding: 10px;
+  border-radius: 8px;
+}
+
+.list-notifaction ul li a:hover {
+  color: #252f40;
+  background-color: #e9ecef;
+}
+
+.list-notifaction ul span.ant-avatar.ant-avatar-image {
+  width: 48px;
+  height: 48px;
+  border-radius: 0.75rem;
+}
+
+.list-notifaction ul li {
+  padding: 0px;
+}
+.ant-dropdown-menu.ant-dropdown-menu-split.list-notifaction {
+  border-radius: 0.75rem;
+}
+.list-notifaction .ant-list-item-meta-title {
+  font-weight: bold;
+  color: #141414;
+}
+.list-notifaction .ant-list-item-meta-title {
+  font-weight: bold;
+  color: #141414;
+}
+
+.list-notifaction .ant-avatar.ant-avatar-circle {
+  width: 48px;
+  height: 48px;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+}
+.list-notifaction ul li a span.ant-avatar-string {
+  line-height: normal;
+}
+.bnb2 {
+  color: #52c41a;
+  font-weight: 700;
+}
+.ant-card.criclebox {
+  box-shadow: 0px 20px 27px #0000000d;
+  border-radius: 12px;
+}
+
+.number span {
+  font-weight: 600;
+  color: #8c8c8c;
+  font-size: 14px;
+}
+.number h3 {
+  font-weight: 700;
+  margin-bottom: 0px;
+  font-size: 30px;
+}
+
+.number h3 small {
+  font-weight: 600;
+  font-size: 14px;
+}
+.icon-box {
+  width: 48px;
+  height: 48px;
+  text-align: center;
+  background: #1890ff;
+  color: #fff;
+  border-radius: 0.5rem;
+  margin-left: auto;
+  line-height: 55px;
+}
+
+.icon-box span {
+  color: #fff;
+  font-size: 24px;
+}
+
+.listpage {
+  padding-top: 15px;
+}
+.bar-chart {
+  background: transparent
+    linear-gradient(62deg, #00369e 0%, #005cfd 53%, #a18dff 100%) 0% 0%
+    no-repeat padding-box;
+  box-shadow: 0px 4px 6px #0000001f;
+
+  border-radius: 8px;
+}
+
+.chart-vistior {
+  margin-top: 30px;
+}
+
+.chart-vistior h5 {
+  margin: 0px;
+  font-weight: 700;
+}
+.ant-typography.lastweek {
+  color: #8c8c8c;
+  font-weight: 600;
+}
+
+.chart-visitor-count h4 {
+  margin: 0px;
+  font-weight: 700;
+}
+
+.chart-visitor-count span {
+  color: rgba(0, 0, 0, 0.65);
+  font-weight: 600;
+}
+
+.linechart h5 {
+  font-weight: 700;
+  margin: 0px;
+}
+.linechart {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.sales ul {
+  margin: 0px;
+  padding: 0px;
+  list-style: none;
+}
+
+.sales ul li:first-child span.anticon {
+  color: #b37feb;
+}
+
+.sales ul li:last-child span.anticon {
+  color: #1890ff;
+}
+.sales ul li {
+  color: #8c8c8c;
+  margin-bottom: 3px;
+  cursor: pointer;
+  font-weight: 600;
+  font-size: 14px;
+}
+.project-ant h4 {
+  margin: 0px;
+  font-size: 16px;
+  font-weight: bold;
+  color: #141414;
+}
+
+span.blue {
+  margin-left: 5px;
+  color: #1890ff;
+  font-weight: 600;
+}
+.project-ant h5 {
+  margin: 0px;
+  color: #141414;
+  font-weight: 700;
+}
+
+span.blue {
+  margin-left: 5px;
+  color: #1890ff;
+  font-weight: 600;
+}
+.project-ant {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.antd-pro-pages-dashboard-analysis-style-salesExtra a {
+  display: inline-block;
+  padding: 7px 10px;
+  color: #595959;
+  border: 1px solid #d9d9d9;
+  text-align: center;
+  border-right: 1px solid transparent;
+}
+
+.antd-pro-pages-dashboard-analysis-style-salesExtra a:last-child {
+  border-right: 1px solid #d9d9d9;
+  border-radius: 0px 5px 5px 0px;
+}
+
+.antd-pro-pages-dashboard-analysis-style-salesExtra a:first-child {
+  border-radius: 5px 0px 0px 5px;
+}
+
+.antd-pro-pages-dashboard-analysis-style-salesExtra a:hover {
+  color: #1890ff;
+  border: 1px solid #1890ff;
+}
+.antd-pro-pages-dashboard-analysis-style-salesExtra a.active {
+  color: #1890ff;
+  border: 1px solid #1890ff;
+}
+
+.ant-list-box th {
+  text-align: left;
+  border-bottom: 1px solid #0000000d;
+  padding: 8px 0px;
+  color: #8c8c8c;
+  font-size: 12px;
+  font-weight: 600;
+}
+
+.ant-list-box td {
+  text-align: left;
+  border-bottom: 1px solid #0000000d;
+  padding: 16px 25px;
+  white-space: nowrap;
+  font-size: 12px;
+  font-weight: 600;
+}
+.table-responsive {
+  overflow-x: auto;
+  -webkit-overflow-scrolling: touch;
+}
+.py-1 {
+  padding-top: 0.25rem !important;
+  padding-bottom: 0.25rem !important;
+}
+.px-2 {
+  padding-right: 0.5rem !important;
+  padding-left: 0.5rem !important;
+}
+.d-flex {
+  display: flex !important;
+}
+.justify-content-center {
+  justify-content: center !important;
+}
+.flex-column {
+  flex-direction: column !important;
+}
+.me-3 {
+  margin-right: 1rem !important;
+}
+.tootip-img {
+  width: 24px;
+  height: 24px;
+  border-radius: 100%;
+  border: 1px solid #fff;
+  position: relative;
+  z-index: 2;
+  cursor: pointer;
+}
+
+.avatar-group .tootip-img + .tootip-img {
+  margin-left: -10px;
+}
+
+.tootip-img:hover {
+  z-index: 3;
+  cursor: pointer;
+}
+.title-box h5 {
+  margin: 0px;
+}
+
+.text-xs {
+  color: #8c8c8c;
+}
+
+.percent-progress span.ant-progress-text {
+  display: flex;
+  margin-top: -27px;
+  color: #8c8c8c;
+  position: relative;
+  margin-left: 0px;
+}
+/* .percent-progress .ant-progress-outer {
+  margin-right: 0px;
+  padding-right: 0px;
+} */
+
+.percent-progress .ant-progress-status-exception .ant-progress-text {
+  color: #ff4d4f;
+}
+.ant-full-box {
+  width: 100%;
+  border: 1px dashed #d9d9d9;
+  padding: 10px;
+  height: auto;
+  color: #141414;
+  border-radius: 10px;
+}
+.uploadfile {
+  margin-top: 15px;
+}
+
+.uploadfile .ant-upload.ant-upload-select {
+  display: block;
+}
+.ant-timeline-item-tail {
+  left: 7px;
+}
+
+.ant-list-box h5 {
+  font-size: 14px;
+}
+.timeline-box h5 {
+  margin-bottom: 0px;
+  font-weight: 700;
+}
+.timelinelist h5 {
+  font-size: 14px;
+  font-weight: 600;
+}
+
+.timelinelist span {
+  color: #8c8c8c;
+  font-size: 12px;
+}
+.ant-muse span {
+  color: #8c8c8c;
+  font-weight: 600;
+}
+
+.ant-muse h5 {
+  margin: 0px 0px 15px !important;
+  font-size: 20px;
+}
+.bg-gradient-primary {
+  background-image: linear-gradient(310deg, #2152ff, #21d4fd);
+}
+img {
+  max-width: 100%;
+}
+.border10 {
+  border-radius: 10px;
+}
+.py-4 {
+  padding: 20px;
+}
+.mb-5 {
+  margin-bottom: 3rem !important;
+}
+.icon-move-right .anticon-right {
+  color: #40a9ff;
+  margin-left: 2px;
+}
+.icon-move-right {
+  color: #1890ff;
+
+  display: block;
+}
+.mb-4 {
+  margin-bottom: 1.5rem !important;
+}
+
+.gradent {
+  background: url("../images/info-card-2.jpg") no-repeat center top;
+  background-size: cover;
+  padding: 15px;
+  border-radius: 15px;
+  color: #fff;
+}
+
+.gradent h5 {
+  color: #fff;
+}
+
+.gradent .ant-typography {
+  color: #fff;
+  font-size: 20px;
+}
+
+.gradent .icon-move-right {
+  color: #fff;
+}
+
+.gradent .icon-move-right .anticon-right {
+  color: #fff;
+}
+.copyright {
+  color: #8c8c8c;
+  margin-top: 7px;
+}
+.copyright .anticon-heart {
+  color: #f5222d;
+  margin: 0px 5px;
+}
+.copyright a {
+  margin: 0px 5px;
+  color: #141414;
+  font-weight: 700;
+}
+.footer-menu ul {
+  margin: 0px;
+  padding: 0px;
+  display: flex;
+  align-items: center;
+  justify-content: flex-end;
+}
+
+.footer-menu ul li {
+  list-style: none;
+}
+.footer-menu ul li a {
+  padding: 0.5rem 1rem;
+  display: block;
+  color: #8c8c8c;
+}
+span.ismobile {
+  display: none;
+  margin-right: 15px;
+  cursor: pointer;
+}
+@media (max-width: 992px) {
+  .footer-menu ul {
+    justify-content: center;
+  }
+  footer.ant-layout-footer {
+    padding: 0px 15px;
+    text-align: center;
+  }
+  .project-ant {
+    display: block;
+  }
+
+  .ant-filtertabs {
+    text-align: right;
+  }
+  .rightside-top span.ant-input-affix-wrapper {
+    width: 200px;
+  }
+
+  .rightside-top {
+    justify-content: flex-end;
+  }
+
+  header.ant-layout-header.subheader {
+    padding: 0px 24px 0px 0px;
+  }
+
+  main.ant-layout-content.content-ant {
+    padding-left: 0px !important;
+  }
+
+  .ant-row {
+    margin-left: -12px;
+    margin-right: -12px;
+  }
+  span.ismobile {
+    display: inline-block;
+  }
+  .bar-chart {
+    width: 100% !important;
+    max-width: 100%;
+  }
+  .full-width {
+    max-width: 100% !important;
+  }
+  .bar-chart {
+    width: 100% !important;
+  }
+
+  .icon-move-right {
+    margin-bottom: 15px;
+  }
+  .pageheader {
+    display: block;
+  }
+  .ant-cret img {
+    width: 100%;
+    height: 300px;
+    object-fit: cover;
+  }
+}
+
+.sidebar-color {
+  padding: 1.5rem 0px;
+}
+.theme-color button {
+  margin-right: 8px;
+  border: 0px;
+  width: 20px !important;
+  height: 20px !important;
+  padding: 0px;
+  box-shadow: none;
+  visibility: visible !important;
+  line-height: 20px !important;
+}
+
+.theme-color button:focus {
+  box-shadow: none;
+  border-color: transparent;
+}
+
+.theme-color button span {
+  opacity: 0;
+}
+
+.mb-2 {
+  margin-bottom: 25px;
+}
+
+.sidebarnav-color button {
+  width: 100%;
+  margin-right: 10px;
+  box-shadow: 0 3px 5px -1px rgb(0 0 0 / 9%), 0 2px 3px -1px rgb(0 0 0 / 7%);
+  height: 40px;
+}
+
+.sidebarnav-color h5 {
+  margin: 0px;
+}
+
+.sidebarnav-color span.ant-typography {
+  color: #8c8c8c;
+}
+
+.sidebarnav-color .trans {
+  margin-top: 1rem;
+  display: flex;
+}
+
+.sidebarnav-color button:last-child {
+  margin-right: 0px;
+}
+
+.ant-docment button {
+  width: 100%;
+  margin-bottom: 10px;
+  border-radius: 5px;
+}
+
+.viewstar {
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  margin-top: 15px;
+}
+
+.viewstar a {
+  display: inline-block;
+  padding: 5px 10px;
+  font-size: 12px;
+  line-height: 16px;
+  border-radius: 0em 0.25em 0.25em 0em;
+  border: 1px solid #ddddde;
+  border-left: 0px;
+  color: #141414;
+}
+
+.viewstar a:first-child {
+  color: #24292e;
+  background-color: #eff3f6;
+  border-color: #cfd3d6;
+  background-image: linear-gradient(180deg, #fafbfc, #eff3f6 90%);
+  border-radius: 0.25em 0 0 0.25em;
+  border-left: 1px solid #ddddde;
+}
+
+.social {
+  text-align: center;
+  margin-top: 25px;
+}
+
+.social button {
+  margin: 0px 5px;
+  display: inline-flex;
+  align-items: center;
+}
+
+.ant-thank {
+  text-align: center;
+  margin-top: 25px;
+}
+.setting-drwer {
+  background: #fff;
+  border-radius: 50%;
+  bottom: 42px;
+  right: 30px;
+  font-size: 1.25rem;
+  z-index: 990;
+  box-shadow: 0 2px 12px 0 rgb(0 0 0 / 16%);
+  width: 52px;
+  height: 52px;
+  text-align: center;
+  line-height: 60px;
+  position: fixed;
+  cursor: pointer;
+}
+
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav li:active {
+  background: transparent;
+}
+.rightside-top .ant-input {
+  height: 30px;
+}
+.aside-footer {
+  padding-top: 100px;
+}
+.ant-card-body {
+  padding: 16px;
+}
+
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav li svg path {
+  color: #bfbfbf;
+}
+
+.cardbody .ant-card-body {
+  padding-left: 0px;
+  padding-right: 0px;
+}
+
+.ant-card.criclebox .project-ant {
+  padding-left: 24px;
+  padding-right: 24px;
+}
+
+.ant-card.criclebox table th {
+  padding-left: 24px;
+  padding-right: 24px;
+  padding-top: 14px;
+  padding-bottom: 14px;
+}
+.percent-progress .ant-progress-bg {
+  height: 3px !important;
+}
+.uploadfile {
+  padding-left: 24px;
+  padding-right: 24px;
+}
+.ant-card.tablespace .ant-card-body {
+  padding: 0px;
+}
+.tablespace .ant-card-head-title {
+  font-size: 20px;
+  font-weight: 600;
+}
+.ant-radio-button-wrapper:first-child {
+  border-radius: 4px 0 0 4px;
+}
+.ant-radio-button-wrapper:last-child {
+  border-radius: 0 4px 4px 0;
+}
+ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light.left-nav
+  li.ant-menu-item-selected
+  path {
+  color: #fff;
+}
+.ant-avatar-group .ant-avatar-square {
+  border-radius: 4px;
+}
+
+.shape-avatar {
+  margin-right: 20px;
+}
+
+.shape-avatar img {
+  border-radius: 4px;
+}
+
+.avatar-info h5 {
+  font-weight: bold;
+  font-size: 14px;
+  line-height: 14px;
+  margin-bottom: 3px;
+}
+
+.avatar-info p {
+  font-size: 14px;
+  font-weight: 400;
+  color: #8c8c8c;
+  margin: 0px;
+}
+
+.ant-table-tbody > tr > td h5 {
+  font-size: 14px;
+  font-weight: 600;
+  color: #141414;
+  margin-bottom: 0px;
+}
+.ant-table-tbody > tr > td p {
+  font-size: 14px;
+  color: #8c8c8c;
+  margin: 0px;
+}
+
+.tag-primary {
+  border-radius: 6px;
+  padding: 2px 12px;
+  font-size: 14px;
+  height: auto;
+  line-height: 24px;
+  font-weight: 600;
+}
+
+.ant-employed {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  font-weight: 500;
+  color: #8c8c8c;
+}
+
+.ant-employed a {
+  color: #8c8c8c;
+  text-decoration: none;
+  font-weight: 600;
+}
+
+.tag-badge {
+  border-radius: 6px;
+  padding: 2px 12px;
+  font-size: 14px;
+  height: auto;
+  line-height: 24px;
+  font-weight: 600;
+  background: #8c8c8c;
+  color: #fff;
+  outline: none;
+}
+
+.tag-badge:hover {
+  background: #8c8c8c;
+  color: #fff;
+  border-color: #8c8c8c;
+  opacity: 0.9;
+}
+
+.ant-avatar-group {
+  align-items: center;
+}
+
+.mb-24 {
+  margin-bottom: 24px;
+}
+
+.ant-table-thead > tr > th {
+  color: #8c8c8c;
+  font-weight: 700;
+  background-color: transparent;
+  font-size: 12px;
+}
+
+.ant-border-space th:before {
+  display: none;
+}
+.ant-table-tbody > tr > td,
+.ant-table-thead > tr > th {
+  padding: 16px 25px;
+}
+.tablespace {
+  overflow: hidden;
+}
+.ant-table.ant-table-middle .ant-table-title,
+.ant-table.ant-table-middle .ant-table-footer,
+.ant-table.ant-table-middle .ant-table-thead > tr > th,
+.ant-table.ant-table-middle .ant-table-tbody > tr > td,
+.ant-table.ant-table-middle tfoot > tr > th,
+.ant-table.ant-table-middle tfoot > tr > td {
+  padding: 16px 25px;
+}
+
+.avatar-sm {
+  width: 25px;
+}
+
+.ant-progress-project {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.ant-progress-project .ant-progress-outer {
+  float: right;
+}
+
+.ant-progress-project .ant-progress-text {
+  margin: 0px 0px 0px 0px;
+  color: #8c8c8c;
+  font-weight: 600;
+}
+.semibold {
+  font-weight: 600;
+  color: #8c8c8c;
+}
+
+.text-sm {
+  font-size: 12px;
+  color: #8c8c8c;
+  font-weight: 600;
+}
+.ant-progress-project .ant-progress {
+  margin-right: 15px;
+}
+
+.semibold {
+  font-weight: 600;
+  color: #8c8c8c;
+}
+
+.text-sm {
+  font-size: 12px;
+  color: #8c8c8c;
+  font-weight: 600;
+}
+
+.ant-progress-project .ant-progress-bg {
+  height: 3px !important;
+}
+.ant-table-tbody > tr > td,
+.ant-table-thead > tr > th {
+  white-space: nowrap;
+}
+.h-full {
+  height: 100%;
+}
+@media (min-width: 1200px) {
+  .ant-col.col-img img {
+    height: 196px;
+  }
+  /* .bar-chart {
+    max-width: 438px;
+  } */
+  /* .full-width {
+    max-width: 658px;
+  } */
+}
+@media (max-width: 1024px) {
+  .bar-chart {
+    max-width: 100%;
+  }
+  .full-width {
+    max-width: 100%;
+  }
+  /* .ant-col.mobile-24 {
+    margin-bottom: 24px;
+  } */
+}
+
+body {
+  overflow: visible !important;
+  width: 100% !important;
+}
+
+.card-info-2 .ant-card-body {
+  height: 100%;
+}
+
+.col-content {
+  flex-grow: 1;
+  padding: 24px;
+  margin-right: 0;
+  border-radius: 8px;
+
+  display: flex;
+  flex-direction: column;
+  justify-content: space-between;
+}
+.card-content p {
+  font-size: 16px;
+}
+
+.ant-layout-footer {
+  padding: 0px 50px;
+}
+/* sign up start */
+.layout-default.ant-layout.layout-sign-up header.ant-layout-header {
+  background-color: transparent;
+  color: #fff;
+  margin: 0;
+  padding: 0 20px;
+  z-index: 1;
+}
+
+.layout-default .ant-layout-header {
+  display: flex;
+}
+
+.header-col.header-nav {
+  margin-left: auto;
+  width: 100%;
+  margin-right: auto;
+}
+.header-col.header-nav .ant-menu-overflow {
+  justify-content: center;
+}
+
+.header-col.header-nav .ant-menu-horizontal {
+  background: transparent;
+  box-shadow: none;
+  border: 0px;
+}
+
+.layout-default.ant-layout.layout-sign-up {
+  padding: 11px;
+}
+.header-col.header-nav li:after {
+  display: none;
+}
+.sign-up-header {
+  height: 550px;
+  margin-top: -62.8px;
+  padding-top: 137.8px;
+  border-radius: 12px;
+  box-shadow: 0 20px 27px rgb(0 0 0 / 5%);
+  background-size: cover;
+  background-position: 50%;
+  text-align: center;
+  background: url("../images/bg-signup.jpg") no-repeat center top;
+}
+.header-col.header-brand {
+  white-space: nowrap;
+}
+
+.header-col.header-brand h5 {
+  margin: 0px;
+  color: #fff;
+  font-size: 14px;
+  font-weight: 600;
+}
+
+.header-col.header-nav {
+  color: #fff;
+  font-weight: 600;
+}
+
+.header-col.header-nav ul li {
+  color: #fff !important;
+}
+
+.header-col.header-nav ul li img {
+  margin-top: -2px;
+  margin-right: 5px;
+}
+.header-col.header-btn button {
+  height: 34px;
+  padding: 0 16px;
+  border-radius: 34px;
+  line-height: 33px;
+}
+.sign-up-header .content {
+  padding-top: 40px;
+  max-width: 480px;
+  margin: auto;
+}
+.sign-up-header * {
+  color: #fff;
+}
+.sign-up-header .content h1 {
+  font-size: 48px;
+  color: #fff;
+}
+.text-lg {
+  font-size: 16px;
+}
+.card-signup .sign-up-gateways .ant-btn {
+  margin-right: 10px;
+  margin-left: 10px;
+  height: 60px;
+  width: 70px;
+  box-shadow: none;
+  border-radius: 6px;
+}
+.card-signup {
+  width: 100%;
+  max-width: 500px;
+  margin: auto;
+  box-shadow: 0 20px 27px rgb(0 0 0 / 5%);
+  border-radius: 12px;
+  margin-top: -190px;
+  margin-bottom: 20px;
+}
+.card-signup h5 {
+  text-align: center;
+  font-size: 20px;
+  font-weight: 600;
+  color: #141414;
+  margin: 0px;
+}
+.header-solid .ant-card-head {
+  border-bottom: 0;
+}
+.card-signup .sign-up-gateways .ant-btn img {
+  width: 20px;
+}
+.sign-up-gateways {
+  text-align: center;
+}
+.m-25,
+.mb-25,
+.my-25 {
+  margin-bottom: 25px;
+}
+.m-25,
+.mt-25,
+.my-25 {
+  margin-top: 25px;
+}
+.text-center {
+  text-align: center;
+}
+.font-semibold {
+  font-weight: 600;
+}
+.text-muted {
+  color: #8c8c8c;
+}
+.ant-input {
+  border-radius: 6px;
+}
+.ant-input {
+  font-weight: 600;
+  color: #8c8c8c;
+}
+.ant-input {
+  height: 40px;
+  border: 1px solid #d9d9d9;
+}
+.font-bold {
+  font-weight: 700;
+}
+.text-dark {
+  color: #141414;
+}
+.ant-btn,
+.ant-radio-group .ant-radio-button-wrapper {
+  font-weight: 600;
+  font-size: 12px;
+  height: 40px;
+  padding: 0 15px;
+  line-height: 40px;
+}
+.ant-btn {
+  box-shadow: 0 2px 4px rgb(0 0 0 / 7%);
+  border-radius: 6px;
+}
+.layout-sign-up .ant-layout-footer {
+  padding: 24px 50px;
+}
+
+.layout-default .ant-layout-footer {
+  color: rgba(0, 0, 0, 0.65);
+  font-size: 14px;
+  background: transparent;
+  text-align: center;
+}
+.layout-default .ant-layout-footer .ant-menu-horizontal {
+  border: none;
+  line-height: 1.5;
+  margin: 0 0 30px;
+  background-color: transparent;
+  font-size: 16px;
+}
+.layout-default .ant-layout-footer .ant-menu-horizontal {
+  text-align: center;
+  display: block;
+}
+
+.layout-default .ant-layout-footer .ant-menu-horizontal > .ant-menu-item,
+.layout-default .ant-layout-footer .ant-menu-horizontal > .ant-menu-item-active,
+.layout-default
+  .ant-layout-footer
+  .ant-menu-horizontal
+  > .ant-menu-item-selected,
+.layout-default .ant-layout-footer .ant-menu-horizontal > .ant-menu-item:hover,
+.layout-default .ant-layout-footer .ant-menu-horizontal > .ant-menu-submenu,
+.layout-default
+  .ant-layout-footer
+  .ant-menu-horizontal
+  > .ant-menu-submenu-active,
+.layout-default
+  .ant-layout-footer
+  .ant-menu-horizontal
+  > .ant-menu-submenu-selected,
+.layout-default
+  .ant-layout-footer
+  .ant-menu-horizontal
+  > .ant-menu-submenu:hover {
+  color: #8c8c8c;
+  border: none;
+}
+.layout-default .ant-layout-footer .ant-menu-horizontal > .ant-menu-item-active,
+.layout-default
+  .ant-layout-footer
+  .ant-menu-horizontal
+  > .ant-menu-item-selected,
+.layout-default .ant-layout-footer .ant-menu-horizontal > .ant-menu-item:hover,
+.layout-default
+  .ant-layout-footer
+  .ant-menu-horizontal
+  > .ant-menu-submenu-active,
+.layout-default
+  .ant-layout-footer
+  .ant-menu-horizontal
+  > .ant-menu-submenu-selected,
+.layout-default
+  .ant-layout-footer
+  .ant-menu-horizontal
+  > .ant-menu-submenu:hover {
+  color: #262626;
+}
+.layout-default.ant-layout.layout-sign-up .ant-layout-footer ul li:after {
+  display: none;
+}
+.layout-default.ant-layout.layout-sign-up footer.ant-layout-footer ul li a svg {
+  width: 18px;
+  height: 18px;
+}
+.layout-default .ant-layout-footer .menu-nav-social a svg {
+  fill: #8c8c8c;
+  vertical-align: middle;
+}
+.layout-default .ant-layout-footer .menu-nav-social a:hover svg {
+  fill: #1890ff;
+}
+.layout-default .ant-layout-footer .copyright a {
+  color: inherit;
+  font-weight: normal;
+}
+/* signin start csss */
+.layout-default.layout-signin header.ant-layout-header {
+  display: flex;
+  position: relative;
+  background-color: #fff;
+  color: #141414;
+  box-shadow: 0 20px 27px rgb(0 0 0 / 5%);
+  flex-direction: row;
+  padding: 0 50px;
+  height: 64px;
+  line-height: 64px;
+}
+.fill-muted {
+  fill: #8c8c8c;
+}
+.layout-default .ant-layout-header .header-brand h5 {
+  white-space: nowrap;
+
+  color: #141414;
+  margin: 0;
+}
+.layout-default .ant-layout-header .header-nav a svg {
+  margin-right: 5px;
+}
+.layout-default .ant-layout-header .header-nav a span,
+.layout-default .ant-layout-header .header-nav a svg {
+  vertical-align: middle;
+}
+.layout-default .ant-layout-header .header-nav a {
+  color: #141414;
+  padding: 6px 12px;
+  font-weight: 400;
+}
+
+.layout-default
+  .ant-layout-header
+  .header-nav
+  .ant-menu-horizontal
+  > .ant-menu-item,
+.layout-default
+  .ant-layout-header
+  .header-nav
+  .ant-menu-horizontal
+  > .ant-menu-item-active,
+.layout-default
+  .ant-layout-header
+  .header-nav
+  .ant-menu-horizontal
+  > .ant-menu-item-selected,
+.layout-default
+  .ant-layout-header
+  .header-nav
+  .ant-menu-horizontal
+  > .ant-menu-item:hover,
+.layout-default
+  .ant-layout-header
+  .header-nav
+  .ant-menu-horizontal
+  > .ant-menu-submenu,
+.layout-default
+  .ant-layout-header
+  .header-nav
+  .ant-menu-horizontal
+  > .ant-menu-submenu-active,
+.layout-default
+  .ant-layout-header
+  .header-nav
+  .ant-menu-horizontal
+  > .ant-menu-submenu-selected,
+.layout-default
+  .ant-layout-header
+  .header-nav
+  .ant-menu-horizontal
+  > .ant-menu-submenu:hover {
+  color: #8c8c8c;
+  font-weight: 600;
+  border: none;
+}
+.layout-default
+  .ant-layout-header
+  .header-nav
+  .ant-menu-horizontal
+  > .ant-menu-item {
+  padding: 0;
+}
+.sign-in {
+  padding: 0 20px;
+}
+.layout-default .ant-layout-content {
+  padding-top: 40px;
+}
+.font-regular {
+  font-weight: 400;
+}
+.signin h1 {
+  font-size: 48px;
+  font-weight: 700;
+  color: #141414;
+}
+
+.signin h5 {
+  font-weight: 400;
+  color: #8c8c8c;
+  font-size: 20px;
+  white-space: normal;
+}
+.ant-row.ant-form-item.username {
+  display: block;
+}
+
+.ant-row.ant-form-item.username
+  .ant-col.ant-form-item-label
+  .ant-form-item-required:before {
+  display: none;
+}
+
+.ant-row.ant-form-item.username .ant-col.ant-form-item-label {
+  font-size: 13px;
+  font-weight: 600;
+  color: #141414;
+}
+.signin .ant-form-item-control-input button.ant-switch {
+  margin-right: 5px;
+}
+.text-dark {
+  color: #141414;
+}
+.sign-img img {
+  width: 100%;
+  max-width: 500px;
+  margin: auto;
+  display: block;
+}
+.layout-signin {
+  background: #fff;
+}
+.layout-signin footer.ant-layout-footer svg {
+  width: 18px;
+  height: 18px;
+}
+
+.layout-signin footer.ant-layout-footer ul li:after {
+  display: none;
+}
+.layout-default .ant-layout-footer .copyright {
+  font-size: 16px;
+  color: #8c8c8c;
+}
+
+.row-col .ant-row {
+  margin-left: 0px;
+  margin-right: 0px;
+}
+.layout-default.ant-layout.layout-sign-up .header-col.header-brand h5 {
+  color: #fff;
+}
+
+.layout-default.ant-layout.layout-sign-up .header-col.header-nav a {
+  color: #fff;
+}
+
+.layout-default.ant-layout.layout-sign-up
+  .header-col.header-nav
+  svg
+  path.fill-muted {
+  fill: #fff;
+}
+/* sign in end */
+
+@media (min-width: 768px) {
+  .sign-img img {
+    margin: 0;
+  }
+  .card-signup {
+    margin-bottom: 120px;
+  }
+  .card-signup .sign-up-gateways .ant-btn {
+    width: 100px;
+  }
+}
+
+/* end sign up */
+
+.rightside-top .signin {
+  display: inline-flex;
+}
+
+.rightside-top .signin svg {
+  margin-right: 5px;
+}
+
+button.ant-btn.bell strong {
+  position: absolute;
+  top: -1px;
+  right: -9px;
+  display: inline-block;
+  width: 18px;
+  height: 18px;
+  background: #f5222d;
+  border-radius: 100%;
+  text-align: center;
+  line-height: normal;
+  font-weight: normal;
+  color: #fff;
+}
+/* old css end */
+
+.layout-dashboard .ant-layout-footer {
+  background: transparent;
+  margin: 0 20px 20px 20px;
+  padding: 0;
+}
+
+.layout-dashboard .ant-layout-content {
+  padding: 0;
+  margin: 0 20px 0;
+}
+.m-10,
+.mr-10,
+.mx-10 {
+  margin-right: 10px !important;
+}
+
+.ant-table-tbody > tr > td h6 {
+  font-size: 14px;
+  font-weight: 600;
+  color: #141414;
+}
+
+.layout-dashboard .header-control .header-search input.ant-input {
+  height: auto;
+}
+
+small.redtext {
+  color: red;
+}
+
+.full-width path {
+  fill: transparent;
+}
+
+.bar-chart line.apexcharts-xaxis-tick {
+  stroke: transparent;
+}
+
+section.ant-layout.layout-content .ant-layout-content.content-ant {
+  padding: 0px !important;
+}
+
+.layout-dashboard .ant-card {
+  border-radius: 12px;
+  box-shadow: 0 20px 27px rgb(0 0 0 / 5%);
+}
+
+.card-credit {
+  background-image: url("../images/info-card-3.jpg");
+  background-position: 50%;
+  background-size: cover;
+  border: none;
+}
+.card-credit * {
+  color: #fff;
+}
+
+.card-credit .card-number {
+  word-spacing: 10px;
+  font-weight: 600;
+  margin-bottom: 45px;
+  font-size: 20px;
+}
+.ant-card-head-wrapper {
+  min-height: 72px;
+}
+.card-credit .ant-card-body {
+  padding-top: 15px;
+}
+.card-credit .card-footer {
+  display: flex;
+  align-items: flex-end;
+}
+.m-auto,
+.ml-auto {
+  margin-left: auto !important;
+}
+.m-30,
+.mr-30,
+.mx-30 {
+  margin-right: 30px !important;
+}
+.card-credit .card-footer h6,
+.card-credit .card-footer p {
+  margin-bottom: 0;
+}
+.card-credit .col-logo img {
+  max-width: 50px;
+}
+.card-credit .card-footer h6 {
+  font-weight: 700;
+}
+.width-100 {
+  width: 100%;
+}
+.p-20 {
+  padding: "0px 20px 0px 0px";
+}
+.layout-default .ant-layout-content.p-0 {
+  padding: 0px;
+}
+.pt {
+  padding-top: 0px;
+}
+
+.widget-2 .icon {
+  width: 64px;
+  height: 64px;
+  margin: auto;
+  background-color: #1890ff;
+  border-radius: 8px;
+  box-shadow: 0 4px 6px rgb(0 0 0 / 12%);
+  display: flex;
+  justify-content: center;
+  align-items: center;
+  margin-bottom: 16px;
+}
+.widget-2 .ant-statistic-title h6 {
+  font-weight: 600;
+}
+.widget-2 .ant-statistic-title p {
+  font-size: 12px;
+  font-weight: 600;
+  margin-bottom: 0;
+}
+.widget-2 .ant-statistic-content {
+  font-family: open sans, Helvetica, Arial, sans-serif;
+  font-weight: 600;
+  font-size: 20px;
+  padding: 12px 16px;
+  border-top: 1px solid #f5f5f5;
+  text-align: center;
+}
+.widget-2 .ant-statistic-title {
+  text-align: center;
+  padding: 16px;
+}
+
+.widget-2 .ant-card-body {
+  padding: 0;
+}
+.widget-2 .icon img {
+  width: 30px;
+}
+
+.ant-row-flex-middle {
+  align-items: center;
+}
+.d-flex {
+  display: flex;
+  align-items: center;
+  justify-content: flex-end;
+}
+.payment-method-card.ant-card {
+  box-shadow: none;
+  word-spacing: 10px;
+}
+
+.payment-method-card.ant-card img {
+  width: 40px;
+}
+.payment-method-card.ant-card .ant-card-body {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+.payment-method-card.ant-card .ant-btn {
+  margin-right: -20px;
+}
+
+.ant-btn.ant-btn-link.ant-edit-link {
+  font-weight: 600;
+  font-size: 12px;
+  height: 40px;
+  padding: 0 15px;
+  box-shadow: none;
+}
+
+.ant-btn.ant-btn-link.ant-edit-link img {
+  width: 20px;
+}
+.payment-method-card.ant-card .ant-btn {
+  margin-right: -20px;
+}
+
+.fill-gray-7 {
+  fill: #8c8c8c !important;
+}
+
+.payment-method-card.ant-card h6 {
+  font-weight: 600;
+  margin-bottom: 0;
+  color: #141414;
+}
+.m-0 {
+  margin: 0px;
+}
+
+.ant-card.ant-card-bordered.payment-method-card .ant-card-body {
+  padding-top: 16px;
+}
+
+.header-solid .ant-card-head {
+  border-bottom: 0;
+}
+.invoice-list .ant-list-item,
+.transactions-list .ant-list-item {
+  padding: 11px 0;
+  border-bottom: 0;
+}
+.ant-invoice-card .ant-card-body {
+  padding-top: 0px;
+}
+.invoice-list .ant-list-item-meta-title,
+.transactions-list .ant-list-item-meta-title {
+  font-size: 14px;
+  font-weight: 600;
+  color: #141414;
+}
+
+.invoice-list .ant-list-item-meta-description,
+.transactions-list .ant-list-item-meta-description {
+  font-size: 12px;
+  font-weight: 600;
+  color: #8c8c8c;
+}
+
+.invoice-list .ant-list-item-action .ant-btn,
+.transactions-list .ant-list-item-action .ant-btn {
+  font-weight: 600;
+  color: #141414;
+  box-shadow: none;
+}
+
+.ant-btn > svg,
+.ant-btn > svg + span {
+  vertical-align: middle;
+}
+.invoice-list .amount,
+.transactions-list .amount {
+  font-size: 14px;
+  font-weight: 600;
+  color: #8c8c8c;
+}
+
+.card-billing-info.ant-card {
+  box-shadow: none;
+  background-color: #fafafa;
+  border: 1px solid #f5f5f5;
+}
+
+.ant-descriptions .ant-descriptions-title {
+  font-size: 14px;
+  font-weight: 600;
+  color: #141414;
+  margin-bottom: 14px;
+}
+
+.fill-danger {
+  fill: #ff4d4f;
+}
+.card-billing-info.ant-card .darkbtn {
+  color: #8c8c8c;
+}
+
+.col-action {
+  display: flex;
+}
+
+.card-billing-info .col-action button {
+  height: 34px;
+  font-size: 12px;
+  padding: 0 15px;
+  box-shadow: none;
+}
+
+.ant-descriptions .ant-descriptions-row > td,
+.ant-descriptions .ant-descriptions-row > th {
+  padding-bottom: 6px;
+}
+
+.ant-descriptions .ant-descriptions-item-label {
+  font-size: 13px;
+  font-weight: 600;
+  color: #8c8c8c;
+}
+
+.ant-descriptions .ant-descriptions-item-content {
+  font-size: 13px;
+  font-weight: 600;
+  color: #141414;
+}
+
+.ant-descriptions .ant-descriptions-title {
+  font-size: 14px;
+  font-weight: 600;
+  color: #141414;
+  margin-bottom: 14px;
+}
+
+.card-billing-info.ant-card .ant-descriptions-header {
+  margin-bottom: 0px;
+}
+
+.card-header-date {
+  margin-bottom: 0;
+  font-weight: 700;
+  color: #8c8c8c;
+}
+
+.card-header-date > * {
+  vertical-align: middle;
+}
+.card-header-date svg {
+  margin-right: 5px;
+}
+
+.transactions-list .amount {
+  font-size: 16px;
+  font-weight: 700;
+}
+
+.text-light-danger {
+  background: #fde3cf;
+  color: #f56a00;
+}
+.text-fill {
+  color: #52c41a;
+  background: #edf9e7;
+}
+.text-danger {
+  color: #f5222d;
+}
+.text-success {
+  color: #52c41a;
+}
+
+.transactions-list .ant-list-item-meta {
+  align-items: center;
+}
+
+.text-warning {
+  background: rgb(255, 252, 231);
+  color: #fadb14;
+}
+.text-warning-b {
+  font-size: 14px;
+  font-weight: 600;
+  color: #fadb14;
+}
+.ant-card.ant-list-yes .ant-list-header {
+  border: 0px;
+}
+
+.ant-card.ant-list-yes .ant-list-header h6 {
+  font-size: 12px;
+  font-weight: 600;
+  color: #8c8c8c;
+  margin: 6px 0;
+}
+
+.ant-list.ant-list-split.transactions-list.ant-newest .ant-list-header {
+  padding-top: 0px;
+}
+.profile-nav-bg {
+  height: 300px;
+  margin-top: -137.8px;
+  border-radius: 12px;
+  box-shadow: 0 20px 27px rgb(0 0 0 / 5%);
+  background-size: cover;
+  background-position: 50%;
+}
+
+section.ant-layout.ant-layout-has-sider.layout-dashboard.layout-profile
+  span.ant-page-header-heading-title {
+  color: #fff;
+}
+
+section.ant-layout.ant-layout-has-sider.layout-dashboard.layout-profile
+  span.ant-breadcrumb-separator {
+  color: #fff;
+}
+
+section.ant-layout.ant-layout-has-sider.layout-dashboard.layout-profile
+  span.ant-breadcrumb-link {
+  color: #fff;
+}
+
+section.ant-layout.ant-layout-has-sider.layout-dashboard.layout-profile
+  .header-control
+  svg
+  path {
+  fill: #fff;
+}
+
+section.ant-layout.ant-layout-has-sider.layout-dashboard.layout-profile
+  .btn-sign-in {
+  color: #fff;
+}
+
+.layout-profile .ant-layout-header {
+  margin: 10px 20px;
+}
+.card-profile-head .ant-card-head {
+  border-bottom: 0px;
+  padding: 0px 16px;
+}
+
+.card-profile-head {
+  margin: -53px 0 24px;
+}
+
+.card-profile-head .ant-card-head .ant-avatar {
+  box-shadow: 0 5px 10px rgb(0 0 0 / 12%);
+  border-radius: 8px;
+  margin: 0;
+}
+
+.card-profile-head .ant-card-head .avatar-info {
+  margin-left: 16px;
+}
+
+.ant-card-head-title p {
+  font-weight: 600;
+  color: #8c8c8c;
+  margin-bottom: 0;
+}
+
+.card-profile-head .ant-card-head .avatar-info h4 {
+  font-size: 24px;
+}
+
+.card-profile-head .ant-card-head .avatar-info h4 {
+  font-size: 24px;
+}
+
+.card-profile-head .ant-radio-group .ant-radio-button-wrapper {
+  height: auto;
+  font-weight: 700;
+}
+.ant-radio-button-wrapper {
+  color: #595959;
+}
+
+.layout-profile .ant-card-head {
+  padding: 0 16px;
+}
+
+.settings-list {
+  list-style: none;
+  padding: 0;
+}
+.settings-list > li:first-child {
+  padding-top: 0;
+}
+.settings-list > li {
+  padding: 12px 0;
+}
+
+.settings-list > li h6 {
+  font-size: 12px;
+  color: #8c8c8c;
+  margin: 0;
+  font-weight: 700;
+}
+.settings-list > li span {
+  margin-left: 16px;
+  color: #141414;
+}
+.ant-btn-link {
+  box-shadow: none;
+}
+.card-profile-information hr {
+  opacity: 0.2;
+}
+
+.p-5,
+.pr-5,
+.px-5 {
+  padding-right: 5px !important;
+}
+.p-5,
+.pl-5,
+.px-5 {
+  padding-left: 5px !important;
+}
+.m-5,
+.mr-5,
+.mx-5 {
+  margin-right: 5px !important;
+}
+.m-5,
+.ml-5,
+.mx-5 {
+  margin-left: 5px !important;
+}
+
+.card-profile-information .ant-descriptions .ant-descriptions-row > td,
+.card-profile-information .ant-descriptions .ant-descriptions-row > th {
+  padding-bottom: 16px;
+}
+
+.conversations-list .ant-list-item-meta-description {
+  font-size: 12px;
+  font-weight: 600;
+  color: #8c8c8c;
+}
+
+.conversations-list .ant-avatar {
+  border-radius: 10.5px;
+  box-shadow: 0 4px 6px rgb(0 0 0 / 12%);
+}
+.conversations-list .ant-list-item {
+  padding: 14px 0;
+}
+
+.ant-card-head-title p {
+  font-weight: 600;
+  color: #8c8c8c;
+  margin-bottom: 0;
+}
+
+.ant-card-head-title h6 {
+  margin-bottom: 0;
+}
+
+.card-project.ant-card {
+  box-shadow: none;
+  border: none;
+}
+
+.card-project.ant-card .ant-card-cover img {
+  border-radius: 8px;
+  box-shadow: 0 4px 6px rgb(0 0 0 / 12%);
+}
+
+.card-project.ant-card .card-tag,
+.card-project.ant-card p {
+  font-weight: 600;
+  color: #8c8c8c;
+  margin-bottom: 5px;
+}
+.card-project.ant-card h5 {
+  font-weight: 600;
+  font-size: 20px;
+}
+.card-project.ant-card .card-tag,
+.card-project.ant-card p {
+  font-weight: 600;
+  color: #8c8c8c;
+  margin-bottom: 5px;
+}
+.card-project.ant-card p {
+  margin-bottom: 0;
+}
+.card-project.ant-card .ant-card-body {
+  padding: 16px 0 0;
+}
+
+.card-project.ant-card .card-footer {
+  margin-top: 22px;
+}
+
+.avatar-chips .ant-avatar-image {
+  border: 1px solid #fff;
+}
+.avatar-chips .ant-avatar-image:hover,
+.avatar-chips .ant-space-item:hover {
+  z-index: 1;
+}
+
+.projects-uploader {
+  height: 100%;
+  border-radius: 8px;
+  border-color: #d9d9d9;
+}
+.projects-uploader .ant-upload {
+  width: 100%;
+  height: 100%;
+  margin: 0;
+  border-radius: 8px;
+  padding: 8px;
+}
+
+.projects-uploader .ant-upload-list.ant-upload-list-picture-card {
+  height: 100%;
+}
+
+.projects-uploader .ant-upload.ant-upload-select-picture-card {
+  background-color: transparent;
+}
+
+.projects-uploader svg {
+  width: 20px;
+  height: 20px;
+}
+
+.text-right {
+  text-align: right;
+}
+
+.layout-dashboard-rtl {
+  background: transparent;
+  text-align: right;
+  direction: rtl;
+  position: relative;
+  overflow-x: hidden;
+}
+
+.layout-dashboard-rtl .ant-layout-sider.sider-primary .ant-menu-item .icon,
+.layout-dashboard-rtl .ant-layout-sider.sider-primary .ant-menu-submenu .icon {
+  margin-left: 11px;
+  margin-right: 0;
+}
+
+.layout-dashboard-rtl .ant-timeline-item-tail {
+  right: 6.5px;
+  left: auto;
+}
+.layout-dashboard-rtl .ant-timeline-item-content {
+  margin: 0 33px 0 0;
+}
+
+.ant-timeline-item-head {
+  width: 15px;
+  height: 15px;
+  border-width: 3px;
+}
+
+.layout-dashboard-rtl .ant-radio-button-wrapper:first-child {
+  border-right-width: 1px;
+  border-radius: 0 4px 4px 0;
+}
+.layout-dashboard-rtl .ant-list-box td {
+  text-align: right;
+}
+
+.layout-dashboard-rtl .ant-space-horizontal {
+  direction: ltr;
+}
+
+.layout-dashboard-rtl .ant-btn > .anticon + span,
+.ant-btn > span + .anticon {
+  margin-right: 8px;
+  margin-left: 0px;
+}
+.layout-dashboard-rtl .setting-drwer {
+  left: 30px;
+  right: auto;
+}
+
+.layout-dashboard-rtl ul.ant-menu.ant-menu-root.ant-menu-inline.ant-menu-light {
+  text-align: right;
+}
+
+.layout-dashboard-rtl .avatar-group.mt-2 {
+  direction: ltr;
+}
+.ant-list-box table tr:hover td {
+  background: #fafafa;
+}
+.layout-dashboard-rtl .icon-box {
+  margin-left: 0px;
+  margin-right: auto;
+}
+.layout-dashboard-rtl .m-10,
+.layout-dashboard-rtl .mr-10,
+.layout-dashboard-rtl .mx-10 {
+  margin-left: 10px !important;
+}
+
+.layout-dashboard-rtl .ant-progress-show-info .ant-progress-outer {
+  margin-right: 0px;
+  padding-right: 0px;
+}
+
+.layout-dashboard-rtl .ant-badge-count,
+.layout-dashboard-rtl .ant-badge-dot,
+.layout-dashboard-rtl .ant-badge .ant-scroll-number-custom-component {
+  left: 0;
+  right: auto;
+  transform: translate(-50%, -50%);
+}
+
+.layout-dashboard-rtl .header-control .btn-sign-in svg {
+  margin-left: 4px;
+  margin-right: 0px;
+}
+
+.ant-drawer.drawer-sidebar.drawer-sidebar-rtl
+  aside.ant-layout-sider.ant-layout-sider-light.sider-primary.ant-layout-sider-primary {
+  left: auto;
+  right: 0px;
+  direction: rtl;
+}
+
+.layout-dashboard.layout-dashboard-rtl .header-control span.ant-badge {
+  margin: 0px 7px;
+}
+
+.layout-dashboard.layout-dashboard-rtl span.ant-input-prefix {
+  margin-right: 0px;
+  margin-left: 4px;
+}
+
+.layout-dashboard-rtl .ant-drawer-left .ant-drawer-content-wrapper {
+  left: 0;
+  direction: rtl;
+}
+
+.settings-drawer.settings-drawer-rtl {
+  left: 0;
+  direction: rtl;
+}
+
+.settings-drawer.settings-drawer-rtl button.ant-drawer-close {
+  left: 0px;
+  right: auto;
+  margin-right: 0px;
+  margin-left: var(--scroll-bar);
+  padding-left: calc(20px - var(--scroll-bar));
+}
+
+.layout-dashboard-rtl .ant-drawer-left .ant-drawer-content-wrapper {
+  left: 0;
+  direction: rtl;
+}
+
+.settings-drawer.settings-drawer-rtl {
+  left: 0;
+  direction: rtl;
+}
+
+.settings-drawer.settings-drawer-rtl button.ant-drawer-close {
+  left: 0px;
+  right: auto;
+  margin-right: 0px;
+  margin-left: var(--scroll-bar);
+  padding-left: calc(20px - var(--scroll-bar));
+}
+
+.settings-drawer.settings-drawer-rtl .sidebarnav-color button {
+  margin-right: 0px;
+  margin-left: 10px;
+}
+
+.settings-drawer.settings-drawer-rtl .viewstar a:first-child {
+  border-radius: 0em 0.25em 0.25em 0;
+  border-right: 1px solid #ddddde;
+}
+
+.settings-drawer.settings-drawer-rtl .viewstar a {
+  border-radius: 0.25em 0 0 0.25em;
+  border: 1px solid #ddddde;
+  border-right: 0px;
+}
+
+.social svg path {
+  fill: #fff;
+}
+
+.settings-drawer.settings-drawer-rtl .social svg {
+  margin-right: 0px;
+  margin-left: 5px;
+}
+
+.social svg {
+  width: 15px;
+  height: 15px;
+}
+
+.layout-dashboard .ant-affix .ant-layout-header {
+  background: #fff;
+  box-shadow: 0 20px 27px rgb(0 0 0 / 5%);
+  margin: 10px 20px;
+  z-index: 10;
+}
+
+aside.ant-layout-sider.ant-layout-sider-light.sider-primary.ant-layout-sider-primary.active-route
+  a.active {
+  background: transparent;
+  box-shadow: none;
+}
+.uploadfile.pb-15 {
+  padding-bottom: 16px;
+}
+
+.ant-row.ant-form-item.aligin-center .ant-form-item-control-input-content {
+  display: flex;
+  align-items: center;
+  color: rgba(0, 0, 0, 0.65);
+}
+
+.uploadfile.shadow-none
+  .ant-upload.ant-upload-select.ant-upload-select-text
+  .ant-btn.ant-full-box {
+  box-shadow: none;
+}
+
+.ant-btn-dashed {
+  color: rgba(0, 0, 0, 0.65);
+}
+button.ant-btn.ant-btn-dashed.ant-full-box svg {
+  width: 16px;
+  height: 16px;
+}
+
+.ant-btn-dashed.active,
+.ant-btn-dashed:active {
+  color: #096dd9;
+  background-color: #fff;
+  border-color: #096dd9;
+}
+
+section.ant-layout.ant-layout-has-sider.layout-dashboard.layout-profile
+  .header-control
+  span.ant-input-affix-wrapper.header-search
+  .anticon-search
+  svg
+  path {
+  fill: #8c8c8c;
+}
Index: ../FE/home-clean-fe/src/assets/styles/responsive.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/assets/styles/responsive.css b/../FE/home-clean-fe/src/assets/styles/responsive.css
new file mode 100644
--- /dev/null	(date 1743672482067)
+++ b/../FE/home-clean-fe/src/assets/styles/responsive.css	(date 1743672482067)
@@ -0,0 +1,84 @@
+/*!
+=========================================================
+* Muse Ant Design Dashboard - v1.0.0
+=========================================================
+* Product Page: https://www.creative-tim.com/product/muse-ant-design-dashboard
+* Copyright 2021 Creative Tim (https://www.creative-tim.com)
+* Licensed under MIT (https://github.com/creativetimofficial/muse-ant-design-dashboard/blob/main/LICENSE.md)
+* Coded by Creative Tim
+=========================================================
+* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
+*/
+@media (min-width: 992px) {
+  .layout-dashboard .ant-layout-footer {
+    margin: 0 0 20px 20px;
+  }
+  .layout-dashboard .ant-layout-sider.sider-primary {
+    margin: 20px 0 0 20px;
+    padding: 13px 20px;
+    height: calc(100vh - 20px);
+  }
+  .layout-dashboard .ant-layout {
+    width: auto;
+    flex-shrink: 1;
+    margin-left: 270px;
+  }
+  .layout-dashboard .header-control .sidebar-toggler {
+    display: none;
+  }
+}
+
+@media (min-width: 768px) {
+  .layout-dashboard .ant-layout-header {
+    margin: 10px 20px;
+  }
+  .layout-dashboard .header-control {
+    margin-top: 0;
+  }
+  .layout-dashboard .header-control .header-search {
+    margin: 0 7px;
+  }
+  .layout-dashboard .header-control .btn-sign-in span {
+    display: inline;
+  }
+  .profile-nav-bg {
+    margin-top: -87.8px;
+  }
+  .card-profile-head {
+    margin: -53px 24px 24px;
+  }
+}
+
+@media (min-width: 992px) {
+  .card-billing-info.ant-card .ant-card-body {
+    display: flex;
+  }
+  .layout-dashboard-rtl {
+    overflow: auto;
+  }
+  .layout-dashboard-rtl .ant-layout-sider.sider-primary {
+    margin: 20px 20px 0 0;
+    height: calc(100vh - 20px);
+  }
+  .layout-dashboard-rtl .ant-layout-sider.sider-primary {
+    right: 0;
+    left: auto;
+  }
+  .layout-dashboard-rtl .ant-layout-sider.sider-primary {
+    right: 0;
+    left: auto;
+  }
+  .layout-dashboard-rtl .ant-layout {
+    margin-right: 270px;
+    margin-left: 0;
+  }
+  .layout-dashboard-rtl .ant-layout-footer {
+    margin: 0 20px 20px 0;
+  }
+}
+
+@media (max-width: 768px) {
+  .layout-dashboard.layout-dashboard-rtl .header-control {
+    justify-content: flex-end;
+  }
+}
Index: ../FE/home-clean-fe/src/components/Admin/SalesChart.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/Admin/SalesChart.jsx b/../FE/home-clean-fe/src/components/Admin/SalesChart.jsx
new file mode 100644
--- /dev/null	(date 1743672482069)
+++ b/../FE/home-clean-fe/src/components/Admin/SalesChart.jsx	(date 1743672482069)
@@ -0,0 +1,55 @@
+import React from "react";
+import { Card, Button, Dropdown, Menu } from "antd";
+import { AreaChartOutlined, CaretDownOutlined } from "@ant-design/icons";
+
+const SalesChart = () => {
+  // Sample data for the line chart (can be passed as props in a real application)
+  const data = [
+    { day: "0", value: 20 },
+    { day: "5", value: 30 },
+    { day: "10", value: 45 },
+    { day: "15", value: 35 },
+    { day: "20", value: 50 },
+    { day: "25", value: 90 },
+    { day: "30", value: 40 },
+    { day: "35", value: 45 },
+    { day: "40", value: 50 },
+    { day: "45", value: 55 },
+    { day: "50", value: 40 },
+    { day: "55", value: 50 },
+    { day: "60", value: 55 },
+  ];
+
+  const monthMenuItems = [{ key: "1", label: "October" }];
+
+  return (
+    <Card
+      title="Sales Details"
+      extra={
+        <Dropdown overlay={<Menu items={monthMenuItems} />}>
+          <Button>
+            October <CaretDownOutlined />
+          </Button>
+        </Dropdown>
+      }
+      style={{ marginBottom: 24 }}
+    >
+      <div style={{ height: 200 }}>
+        <AreaChartOutlined
+          style={{
+            fontSize: 100,
+            color: "#e6f7ff",
+            display: "block",
+            margin: "0 auto",
+          }}
+        />
+        <div style={{ textAlign: "center", marginTop: 16 }}>
+          Chart will be rendered using Ant Design Charts in a real
+          implementation
+        </div>
+      </div>
+    </Card>
+  );
+};
+
+export default SalesChart;
Index: src/main/java/com/example/homecleanapi/services/EmployeeService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.services;\n\nimport com.example.homecleanapi.dtos.EmployeeLocationsDTO;\nimport com.example.homecleanapi.models.Employee;\nimport com.example.homecleanapi.models.EmployeeLocations;\nimport com.example.homecleanapi.repositories.EmployeeAddressRepository;\nimport com.example.homecleanapi.repositories.EmployeeRepository;\nimport com.example.homecleanapi.utils.ConvertAddressToLatLong;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.bind.annotation.PathVariable;\n\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\npublic class EmployeeService {\n\n    private EmployeeAddressRepository employeeAddressRepository;\n\n    private EmployeeRepository employeeRepository;\n\n    private ConvertAddressToLatLong  convertAddressToLatLong;\n\n    public EmployeeService(EmployeeAddressRepository employeeAddressRepository, EmployeeRepository employeeRepository, ConvertAddressToLatLong convertAddressToLatLong) {\n        this.employeeAddressRepository = employeeAddressRepository;\n        this.employeeRepository = employeeRepository;\n        this.convertAddressToLatLong = convertAddressToLatLong;\n    }\n\n    public ResponseEntity<Map<String, Object>> employeeCreateAddress(EmployeeLocationsDTO request, @PathVariable int employeeId) throws IOException {\n        Map<String, Object> response = new HashMap<>();\n\n        Employee employee = employeeRepository.findById(employeeId).orElseThrow(() -> new RuntimeException(\"Employee not found\"));\n\n        List<EmployeeLocations> employeeLocations = employeeAddressRepository.findEmployeeLocationsByEmployee_Id(employee.getId());\n\n        // Kiểm tra xem có địa chỉ nào có is_current = true không\n        boolean hasCurrentAddress = employeeLocations.stream().anyMatch(EmployeeLocations::isIs_current);\n\n        // Tạo địa chỉ mới\n        EmployeeLocations newLocation = new EmployeeLocations();\n        newLocation.setEmployee(employee);\n        newLocation.setAddress(request.getAddress());\n        String data = convertAddressToLatLong.convertAddressToLatLong(request.getAddress());\n        JSONObject jsonObject = new JSONObject(data);\n\n        JSONArray resultsArray = jsonObject.getJSONArray(\"results\");\n        if (!resultsArray.isEmpty()) {\n            JSONObject firstResult = resultsArray.getJSONObject(0);\n            JSONObject geometry = firstResult.getJSONObject(\"geometry\");\n            JSONObject location = geometry.getJSONObject(\"location\");\n            double lat = location.getDouble(\"lat\");\n            double lng = location.getDouble(\"lng\");\n            newLocation.setLatitude(lat);\n            newLocation.setLongitude(lng);\n        } else {\n            System.out.println(\"Không tìm thấy kết quả trong JSON!\");\n        }\n        // Nếu chưa có địa chỉ nào, set is_current = true, ngược lại set false\n        newLocation.setIs_current(employeeLocations.isEmpty());\n\n        employeeAddressRepository.save(newLocation);\n        response.put(\"information\", newLocation);\n        return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n\n    public ResponseEntity<Map<String, Object>> updateEmployeeAddress(\n            EmployeeLocationsDTO request,\n            @PathVariable int employeeId,\n            @PathVariable int addressId) throws IOException {\n\n        Map<String, Object> response = new HashMap<>();\n\n        // Tìm employee từ database theo ID\n        Employee employee = employeeRepository.findById(employeeId)\n                .orElseThrow(() -> new RuntimeException(\"Employee not found\"));\n\n        // Tìm địa chỉ của employee theo addressId\n        EmployeeLocations existingLocation = employeeAddressRepository.findById(addressId)\n                .orElseThrow(() -> new RuntimeException(\"Address not found for this employee\"));\n\n        // Kiểm tra xem địa chỉ có thuộc về employee không\n        if (existingLocation.getEmployee().getId() != employeeId) {\n            throw new RuntimeException(\"Address does not belong to the specified employee\");\n        }\n\n        // Cập nhật các trường thông tin theo input từ request (JSON)\n        existingLocation.setAddress(request.getAddress());\n\n        // Chuyển đổi địa chỉ thành tọa độ lat-long\n        String data = convertAddressToLatLong.convertAddressToLatLong(request.getAddress());\n        JSONObject jsonObject = new JSONObject(data);\n        JSONArray resultsArray = jsonObject.getJSONArray(\"results\");\n\n        if (!resultsArray.isEmpty()) {\n            JSONObject firstResult = resultsArray.getJSONObject(0);\n            JSONObject geometry = firstResult.getJSONObject(\"geometry\");\n            JSONObject location = geometry.getJSONObject(\"location\");\n            double lat = location.getDouble(\"lat\");\n            double lng = location.getDouble(\"lng\");\n            existingLocation.setLatitude(lat);\n            existingLocation.setLongitude(lng);\n        } else {\n            System.out.println(\"Không tìm thấy kết quả trong JSON!\");\n        }\n\n        // Đánh dấu địa chỉ này là hiện tại\n        existingLocation.setIs_current(false);\n\n        // Lưu địa chỉ đã được cập nhật\n        employeeAddressRepository.save(existingLocation);\n\n        response.put(\"status\", \"success\");\n        response.put(\"message\", \"Employee address successfully updated\");\n        return ResponseEntity.status(HttpStatus.OK).body(response);\n    }\n\n\n    // Xóa địa chỉ của employee theo locationId\n    public ResponseEntity<Map<String, Object>> deleteEmployeeAddress(int locationId) {\n        Map<String, Object> response = new HashMap<>();\n\n        // Kiểm tra xem địa chỉ có tồn tại không\n        EmployeeLocations existingLocation = employeeAddressRepository.findById(locationId)\n                .orElseThrow(() -> new RuntimeException(\"Location not found\"));\n\n        // Nếu địa chỉ là is_current = true, không cho phép xóa\n        if (existingLocation.isIs_current()) {\n            response.put(\"status\", \"error\");\n            response.put(\"message\", \"Cannot delete current address\");\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\n        }\n\n        // Xóa địa chỉ\n        employeeAddressRepository.delete(existingLocation);\n\n        response.put(\"status\", \"success\");\n        response.put(\"message\", \"Employee address successfully deleted\");\n        return ResponseEntity.status(HttpStatus.OK).body(response);\n    }\n\n    // Lấy tất cả địa chỉ của employee theo employeeId\n    public ResponseEntity<Map<String, Object>> getAllEmployeeAddresses(@PathVariable int employeeId) {\n        Map<String, Object> response = new HashMap<>();\n\n        // Kiểm tra xem employee có tồn tại không\n        if (!employeeRepository.existsById(employeeId)) {\n            response.put(\"message\", \"Employee not found\");\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);\n        }\n\n        // Lấy danh sách địa chỉ của employee\n        List<Map<String, Object>> addresses = employeeAddressRepository.findEmployeeLocationsByEmployee_Id(employeeId)\n                .stream()\n                .map(location -> {\n                    Map<String, Object> addressMap = new HashMap<>();\n                    addressMap.put(\"address\", location.getAddress());\n                    addressMap.put(\"is_current\", location.isIs_current());\n                    return addressMap;\n                })\n                .collect(Collectors.toList());\n\n        response.put(\"data\", addresses);\n        return ResponseEntity.ok(response);\n    }\n\n    // Lấy profile của employee employeeID\n    public ResponseEntity<Map<String, Object>> getEmployeeInformation(@PathVariable int employeeId) {\n        Map<String, Object> response = new HashMap<>();\n\n        // Tìm employee theo ID\n        Optional<Employee> employeeOpt = employeeRepository.findById(employeeId);\n\n        if (employeeOpt.isEmpty()) {\n            response.put(\"message\", \"Employee not found\");\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);\n        }\n\n        response.put(\"data\", employeeOpt.get());\n        return ResponseEntity.ok(response);\n    }\n\n    // Update Employee Profile\n//    public ResponseEntity<Map<String, Object>> updateEmployeeInfomation(@RequestBody ) {\n//        Map<String, Object> response = new HashMap<>();\n//\n//\n//        return ResponseEntity.status(HttpStatus.OK).body(response);\n//    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/services/EmployeeService.java b/src/main/java/com/example/homecleanapi/services/EmployeeService.java
--- a/src/main/java/com/example/homecleanapi/services/EmployeeService.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/services/EmployeeService.java	(date 1743672482140)
@@ -1,5 +1,7 @@
 package com.example.homecleanapi.services;
 
+import com.example.homecleanapi.dtos.CleanerRegisterRequest;
+import com.example.homecleanapi.dtos.CleanerUpdateProfile;
 import com.example.homecleanapi.dtos.EmployeeLocationsDTO;
 import com.example.homecleanapi.models.Employee;
 import com.example.homecleanapi.models.EmployeeLocations;
@@ -15,10 +17,7 @@
 
 
 import java.io.IOException;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
+import java.util.*;
 import java.util.stream.Collectors;
 
 @Service
@@ -190,10 +189,25 @@
     }
 
     // Update Employee Profile
-//    public ResponseEntity<Map<String, Object>> updateEmployeeInfomation(@RequestBody ) {
-//        Map<String, Object> response = new HashMap<>();
-//
-//
-//        return ResponseEntity.status(HttpStatus.OK).body(response);
-//    }
+    public ResponseEntity<Map<String, Object>> updateEmployeeInformation(CleanerUpdateProfile request, Integer employeeId) {
+        Employee employee = employeeRepository.findById(employeeId)
+                .orElseThrow(() -> new RuntimeException("Employee not found"));
+
+        // Cập nhật thông tin employee
+        employee.updateProfile(request);
+        employeeRepository.save(employee);
+
+        return ResponseEntity.ok(Collections.singletonMap("status", "Update success"));
+    }
+
+    // Delete Employee
+    public ResponseEntity<Map<String, Object>> deleteEmployeeAccount(@PathVariable int employeeId) {
+        Employee employee = employeeRepository.findById(employeeId)
+                .orElseThrow(() -> new RuntimeException("Employee not found"));
+
+        employee.setStatus(true);
+        employeeRepository.save(employee);
+
+        return ResponseEntity.ok(Collections.singletonMap("status", "Delete success"));
+    }
 }
\ No newline at end of file
Index: ../FE/home-clean-fe/src/components/Admin/StatCard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/Admin/StatCard.jsx b/../FE/home-clean-fe/src/components/Admin/StatCard.jsx
new file mode 100644
--- /dev/null	(date 1743672482069)
+++ b/../FE/home-clean-fe/src/components/Admin/StatCard.jsx	(date 1743672482069)
@@ -0,0 +1,55 @@
+import React from "react";
+import { Card, Typography } from "antd";
+
+const { Title, Text } = Typography;
+
+const StatCard = ({ title, value, icon, iconBgColor, iconColor }) => {
+  return (
+    <Card
+      bordered={false}
+      style={{
+        borderRadius: 8,
+        boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
+        height: "100%",
+      }}
+      bodyStyle={{ padding: "20px 24px" }}
+    >
+      <div
+        style={{
+          display: "flex",
+          justifyContent: "space-between",
+          alignItems: "center",
+        }}
+      >
+        <div>
+          <Text
+            type="secondary"
+            style={{ fontSize: 14, display: "block", marginBottom: 4 }}
+          >
+            {title}
+          </Text>
+          <Title level={3} style={{ margin: 0, marginBottom: 16 }}>
+            {value}
+          </Title>
+        </div>
+        <div
+          style={{
+            background: iconBgColor,
+            width: 48,
+            height: 48,
+            borderRadius: "50%",
+            display: "flex",
+            alignItems: "center",
+            justifyContent: "center",
+          }}
+        >
+          {React.cloneElement(icon, {
+            style: { fontSize: 20, color: iconColor },
+          })}
+        </div>
+      </div>
+    </Card>
+  );
+};
+
+export default StatCard;
Index: ../FE/home-clean-fe/src/components/Admin/AppSidebar.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/Admin/AppSidebar.jsx b/../FE/home-clean-fe/src/components/Admin/AppSidebar.jsx
new file mode 100644
--- /dev/null	(date 1743672482067)
+++ b/../FE/home-clean-fe/src/components/Admin/AppSidebar.jsx	(date 1743672482067)
@@ -0,0 +1,70 @@
+import React from "react";
+import { Layout, Menu } from "antd";
+import {
+  DashboardOutlined,
+  TeamOutlined,
+  LogoutOutlined,
+} from "@ant-design/icons";
+import { Link, useLocation } from "react-router-dom";
+import logo from "../../assets/HouseClean_logo.png";
+
+const { Sider } = Layout;
+
+const AppSidebar = () => {
+  const location = useLocation();
+  const currentPath = location.pathname;
+
+  // Define menu items using the recommended items prop structure
+  const menuItems = [
+    {
+      key: "/admin",
+      icon: <DashboardOutlined />,
+      label: <Link to="/admin">Dashboard</Link>,
+    },
+    {
+      key: "/admin/owners",
+      icon: <TeamOutlined />,
+      label: <Link to="/admin/owners">Danh sách Owner</Link>,
+    },
+    {
+      key: "/admin/cleaners",
+      icon: <TeamOutlined />,
+      label: <Link to="/admin/cleaners">Danh sách Cleaner</Link>,
+    },
+    // {
+    //   key: "logout",
+    //   icon: <LogoutOutlined />,
+    //   label: <Link to="/admin-login">Logout</Link>,
+    // },
+  ];
+
+  return (
+    <Sider
+      width={200}
+      theme="light"
+      style={{ boxShadow: "0 0 10px rgba(0,0,0,0.1)" }}
+    >
+      <div
+        style={{
+          height: 64,
+          padding: "16px",
+          display: "flex",
+          alignItems: "center",
+          justifyContent: "center",
+        }}
+      >
+        <Link to="/admin">
+          <img src={logo} alt="House Clean Logo" className="logo-img" />
+        </Link>
+      </div>
+      <Menu
+        mode="inline"
+        selectedKeys={[currentPath]}
+        style={{ borderRight: 0 }}
+        items={menuItems}
+      />
+    </Sider>
+  );
+};
+
+export default AppSidebar;
Index: ../FE/home-clean-fe/src/components/Admin/DealsTable.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/Admin/DealsTable.jsx b/../FE/home-clean-fe/src/components/Admin/DealsTable.jsx
new file mode 100644
--- /dev/null	(date 1743672482067)
+++ b/../FE/home-clean-fe/src/components/Admin/DealsTable.jsx	(date 1743672482067)
@@ -0,0 +1,86 @@
+import React from "react";
+import { Card, Button, Dropdown, Menu, Table, Space, Avatar, Tag } from "antd";
+import { CaretDownOutlined } from "@ant-design/icons";
+
+const DealsTable = () => {
+  const monthMenuItems = [{ key: "1", label: "October" }];
+
+  // Columns definition
+  const dealsColumns = [
+    {
+      title: "Product Name",
+      dataIndex: "productName",
+      key: "productName",
+      render: (text, record) => (
+        <Space>
+          <Avatar src={record.image} shape="square" size="small" />
+          {text}
+        </Space>
+      ),
+    },
+    {
+      title: "Location",
+      dataIndex: "location",
+      key: "location",
+    },
+    {
+      title: "Date - Time",
+      dataIndex: "dateTime",
+      key: "dateTime",
+    },
+    {
+      title: "Price",
+      dataIndex: "price",
+      key: "price",
+    },
+    {
+      title: "Amount",
+      dataIndex: "amount",
+      key: "amount",
+    },
+    {
+      title: "Status",
+      dataIndex: "status",
+      key: "status",
+      render: (status) => (
+        <Tag
+          color={status === "Delivered" ? "success" : "processing"}
+          key={status}
+        >
+          {status}
+        </Tag>
+      ),
+    },
+  ];
+
+  // Sample data
+  const dealsData = [
+    {
+      key: "1",
+      productName: "Apple Watch",
+      image: "https://via.placeholder.com/40",
+      location: "6096 Margolaine Landing",
+      dateTime: "12.09.2019 - 12.53 PM",
+      price: "423",
+      amount: "$34,295",
+      status: "Delivered",
+    },
+  ];
+
+  return (
+    <Card
+      title="Deals Details"
+      extra={
+        <Dropdown overlay={<Menu items={monthMenuItems} />}>
+          <Button>
+            October <CaretDownOutlined />
+          </Button>
+        </Dropdown>
+      }
+    >
+      <Table columns={dealsColumns} dataSource={dealsData} pagination={false} />
+    </Card>
+  );
+};
+
+export default DealsTable;
Index: ../FE/home-clean-fe/src/pages/Admin/LoginAdmin.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/Admin/LoginAdmin.jsx b/../FE/home-clean-fe/src/pages/Admin/LoginAdmin.jsx
new file mode 100644
--- /dev/null	(date 1743672482082)
+++ b/../FE/home-clean-fe/src/pages/Admin/LoginAdmin.jsx	(date 1743672482082)
@@ -0,0 +1,179 @@
+import React, { useState, useContext, useEffect, useCallback } from "react";
+import {
+  Form,
+  Input,
+  Button,
+  message,
+  Card,
+  Typography,
+  Row,
+  Col,
+  Divider,
+  Alert,
+} from "antd";
+import {
+  UserOutlined,
+  LockOutlined,
+  EyeTwoTone,
+  EyeInvisibleOutlined,
+} from "@ant-design/icons";
+import { Link, useNavigate } from "react-router-dom";
+import { AuthContext } from "../../context/AuthContext";
+import { BASE_URL } from "../../utils/config";
+import logo from "../../assets/HouseClean_logo.png";
+import background from "../../assets/deep-cleaning-list-hero.jpg";
+
+const { Title, Text } = Typography;
+
+function LoginAdmin() {
+  const { dispatch } = useContext(AuthContext);
+  const navigate = useNavigate();
+  const [form] = Form.useForm();
+  const [errorMessage, setErrorMessage] = useState("");
+  const [loading, setLoading] = useState(false);
+
+  const handleLogin = async (values) => {
+    const { phone, password } = values;
+    setLoading(true);
+    setErrorMessage("");
+    dispatch({ type: "LOGIN_START" });
+
+    try {
+      const response = await fetch(`${BASE_URL}/admin/login`, {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({ phone, password }),
+      });
+
+      const result = await response.json();
+
+      if (response.ok) {
+        const { token, adminId, name, role } = result;
+
+        localStorage.setItem("name", name);
+        localStorage.setItem("token", token);
+        localStorage.setItem("adminId", adminId);
+        localStorage.setItem("role", role);
+
+        dispatch({
+          type: "LOGIN_SUCCESS_ADMIN",
+          payload: { name, token, adminId, phone },
+        });
+
+        message.success("Đăng nhập thành công!");
+        navigate("/admin");
+      } else {
+        setErrorMessage(result.message || "Đăng nhập thất bại.");
+      }
+    } catch (error) {
+      setErrorMessage("Lỗi máy chủ, vui lòng thử lại sau.");
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  useEffect(() => {
+    if (errorMessage) {
+      const timer = setTimeout(() => setErrorMessage(""), 3000);
+      return () => clearTimeout(timer);
+    }
+  }, [errorMessage]);
+
+  return (
+    <div
+      style={{
+        height: "100vh",
+        display: "flex",
+        justifyContent: "center",
+        alignItems: "center",
+        background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
+      }}
+    >
+      <Row justify="center" align="middle" style={{ width: "100%" }}>
+        <Col xs={22} sm={16} md={12} lg={8}>
+          <Card
+            bordered={false}
+            style={{
+              boxShadow: "0 8px 24px rgba(0, 0, 0, 0.1)",
+              borderRadius: "12px",
+            }}
+          >
+            <div style={{ textAlign: "center", marginBottom: "24px" }}>
+              <img
+                src={logo}
+                alt="HouseClean Logo"
+                style={{
+                  height: "60px",
+                  marginBottom: "16px",
+                }}
+              />
+              <Title level={3}>Đăng nhập quản trị viên</Title>
+              <Text type="secondary">
+                Nhập thông tin đăng nhập của bạn để tiếp tục
+              </Text>
+            </div>
+
+            {errorMessage && (
+              <Alert
+                message={errorMessage}
+                type="error"
+                showIcon
+                style={{ marginBottom: "16px" }}
+              />
+            )}
+
+            <Form
+              form={form}
+              layout="vertical"
+              name="login_form"
+              onFinish={handleLogin}
+              size="large"
+            >
+              <Form.Item
+                name="phone"
+                rules={[
+                  { required: true, message: "Vui lòng nhập số điện thoại!" },
+                ]}
+              >
+                <Input
+                  prefix={<UserOutlined className="site-form-item-icon" />}
+                  placeholder="Số điện thoại"
+                />
+              </Form.Item>
+
+              <Form.Item
+                name="password"
+                rules={[{ required: true, message: "Vui lòng nhập mật khẩu!" }]}
+              >
+                <Input.Password
+                  prefix={<LockOutlined className="site-form-item-icon" />}
+                  placeholder="Mật khẩu"
+                  iconRender={(visible) =>
+                    visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />
+                  }
+                />
+              </Form.Item>
+
+              <Form.Item>
+                <Button
+                  type="primary"
+                  htmlType="submit"
+                  loading={loading}
+                  style={{
+                    width: "100%",
+                    height: "45px",
+                    borderRadius: "6px",
+                  }}
+                >
+                  Đăng nhập
+                </Button>
+              </Form.Item>
+            </Form>
+          </Card>
+        </Col>
+      </Row>
+    </div>
+  );
+}
+
+export default LoginAdmin;
Index: ../FE/home-clean-fe/src/components/Admin/StatCards.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/Admin/StatCards.jsx b/../FE/home-clean-fe/src/components/Admin/StatCards.jsx
new file mode 100644
--- /dev/null	(date 1743672482070)
+++ b/../FE/home-clean-fe/src/components/Admin/StatCards.jsx	(date 1743672482070)
@@ -0,0 +1,52 @@
+import React from "react";
+import { Row, Col } from "antd";
+import StatCard from "./StatCard";
+import {
+  UserOutlined,
+  ShoppingCartOutlined,
+  DollarOutlined,
+} from "@ant-design/icons";
+
+const StatCards = () => {
+  const cardData = [
+    {
+      title: "Total Users",
+      value: "40,689",
+      icon: <UserOutlined />,
+      iconBgColor: "#f0f5ff",
+      iconColor: "#1890ff",
+    },
+    {
+      title: "Total Orders",
+      value: "10,293",
+      icon: <ShoppingCartOutlined />,
+      iconBgColor: "#fffbe6",
+      iconColor: "#faad14",
+    },
+    {
+      title: "Total Sales",
+      value: "89,000đ",
+      icon: <DollarOutlined />,
+      iconBgColor: "#f6ffed",
+      iconColor: "#52c41a",
+    },
+  ];
+
+  return (
+    <Row gutter={[16, 16]}>
+      {cardData.map((card, index) => (
+        <Col xs={24} sm={12} md={12} lg={8} key={index}>
+          <StatCard
+            title={card.title}
+            value={card.value}
+            icon={card.icon}
+            iconBgColor={card.iconBgColor}
+            iconColor={card.iconColor}
+          />
+        </Col>
+      ))}
+    </Row>
+  );
+};
+
+export default StatCards;
Index: ../FE/home-clean-fe/src/components/activity/ReportModal.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/components/activity/ReportModal.jsx b/../FE/home-clean-fe/src/components/activity/ReportModal.jsx
new file mode 100644
--- /dev/null	(date 1743672482072)
+++ b/../FE/home-clean-fe/src/components/activity/ReportModal.jsx	(date 1743672482072)
@@ -0,0 +1,334 @@
+import React, { useEffect, useState } from "react";
+import {
+  Modal,
+  Form,
+  Input,
+  Select,
+  Button,
+  message,
+  Spin,
+  Timeline,
+  Card,
+  Tag,
+  Typography,
+  Divider,
+  Empty,
+} from "antd";
+import {
+  SendOutlined,
+  FileTextOutlined,
+  ExclamationCircleOutlined,
+} from "@ant-design/icons";
+import { createReport, getReportByJobId } from "../../services/owner/ReportAPI";
+
+const { TextArea } = Input;
+const { Option } = Select;
+const { Title, Text, Paragraph } = Typography;
+
+export const ReportModal = ({ visible, jobId, customerId, onClose }) => {
+  const [form] = Form.useForm();
+  const [loading, setLoading] = useState(false);
+  const [submitting, setSubmitting] = useState(false);
+  const [reports, setReports] = useState([]);
+  const [activeTab, setActiveTab] = useState("view"); // "view" or "create"
+
+  // Fetch existing reports when the modal is opened
+  useEffect(() => {
+    if (visible && jobId) {
+      fetchReports();
+    }
+  }, [visible, jobId]);
+
+  // Reset form when modal closes
+  useEffect(() => {
+    if (!visible) {
+      form.resetFields();
+      setActiveTab("view");
+    }
+  }, [visible, form]);
+
+  // Fetch reports for the current job
+  const fetchReports = async () => {
+    setLoading(true);
+    try {
+      const data = await getReportByJobId(jobId);
+      setReports(data || []);
+      setLoading(false);
+    } catch (error) {
+      console.error("Lỗi khi tải báo cáo:", error);
+      message.error("Không thể tải báo cáo");
+      setLoading(false);
+    }
+  };
+
+  // Submit a new report
+  const handleSubmit = async (values) => {
+    setSubmitting(true);
+    try {
+      await createReport(jobId, {
+        report_type: values.report_type,
+        description: values.description,
+        status: "PENDING", // Default status for new reports
+      });
+
+      message.success("Báo cáo đã được gửi thành công!");
+      fetchReports(); // Refresh reports list
+      setActiveTab("view");
+      form.resetFields();
+    } catch (error) {
+      console.error("Lỗi khi gửi báo cáo:", error);
+      message.error("Không thể gửi báo cáo");
+    } finally {
+      setSubmitting(false);
+    }
+  };
+
+  // Get status color for report status tags
+  const getStatusColor = (status) => {
+    switch (status?.toUpperCase()) {
+      case "PENDING":
+        return "gold";
+      case "PROCESSING":
+        return "blue";
+      case "RESOLVED":
+        return "green";
+      case "REJECTED":
+        return "red";
+      default:
+        return "default";
+    }
+  };
+
+  // Get status text in Vietnamese
+  const getStatusText = (status) => {
+    switch (status?.toUpperCase()) {
+      case "PENDING":
+        return "Đang chờ xử lý";
+      case "PROCESSING":
+        return "Đang xử lý";
+      case "RESOLVED":
+        return "Đã giải quyết";
+      case "REJECTED":
+        return "Đã từ chối";
+      default:
+        return "Không xác định";
+    }
+  };
+
+  // Get report type text in Vietnamese
+  const getReportTypeText = (type) => {
+    switch (type?.toUpperCase()) {
+      case "CLEANER_ISSUE":
+        return "Vấn đề về người dọn dẹp";
+      case "SERVICE_QUALITY":
+        return "Chất lượng dịch vụ";
+      case "PAYMENT_ISSUE":
+        return "Vấn đề thanh toán";
+      case "SCHEDULING_ISSUE":
+        return "Vấn đề lịch trình";
+      case "OTHER":
+        return "Khác";
+      default:
+        return type || "Không xác định";
+    }
+  };
+
+  // Format date to Vietnamese format
+  const formatDate = (dateString) => {
+    if (!dateString) return "";
+
+    const date = new Date(dateString);
+    return date.toLocaleDateString("vi-VN", {
+      year: "numeric",
+      month: "long",
+      day: "numeric",
+      hour: "2-digit",
+      minute: "2-digit",
+    });
+  };
+
+  // Render View Reports Tab
+  const renderViewReportsTab = () => {
+    if (loading) {
+      return (
+        <div style={{ textAlign: "center", padding: "40px 0" }}>
+          <Spin size="large" />
+          <p>Đang tải báo cáo...</p>
+        </div>
+      );
+    }
+
+    if (!reports || reports.length === 0) {
+      return (
+        <Empty
+          image={Empty.PRESENTED_IMAGE_SIMPLE}
+          description="Chưa có báo cáo nào cho công việc này"
+        />
+      );
+    }
+
+    return (
+      <div className="reports-list">
+        <Timeline mode="left">
+          {reports.map((report, index) => (
+            <Timeline.Item
+              key={index}
+              color={getStatusColor(report.status)}
+              dot={<FileTextOutlined style={{ fontSize: "16px" }} />}
+            >
+              <Card
+                style={{ marginBottom: 16 }}
+                title={
+                  <div
+                    style={{
+                      display: "flex",
+                      justifyContent: "space-between",
+                      alignItems: "center",
+                    }}
+                  >
+                    <span>Báo cáo #{report.reportId || index + 1}</span>
+                    <Tag color={getStatusColor(report.status)}>
+                      {getStatusText(report.status)}
+                    </Tag>
+                  </div>
+                }
+              >
+                <div>
+                  <Text strong>Loại báo cáo:</Text>{" "}
+                  <Text>{getReportTypeText(report.report_type)}</Text>
+                </div>
+
+                <div style={{ margin: "12px 0" }}>
+                  <Text strong>Mô tả vấn đề:</Text>
+                  <Paragraph
+                    style={{
+                      background: "#f5f5f5",
+                      padding: 12,
+                      borderRadius: 4,
+                      marginTop: 8,
+                    }}
+                  >
+                    {report.description || "Không có mô tả"}
+                  </Paragraph>
+                </div>
+
+                <div>
+                  <Text strong>Ngày tạo:</Text>{" "}
+                  <Text>{formatDate(report.createdAt)}</Text>
+                </div>
+
+                {report.status === "RESOLVED" && (
+                  <>
+                    <Divider />
+                    <div>
+                      <Text strong>Phản hồi từ Admin:</Text>
+                      <Paragraph
+                        style={{
+                          background: "#f0f8ff",
+                          padding: 12,
+                          borderRadius: 4,
+                          marginTop: 8,
+                        }}
+                      >
+                        {report.adminResponse || "Không có phản hồi"}
+                      </Paragraph>
+                    </div>
+                    <div>
+                      <Text strong>Thời gian giải quyết:</Text>{" "}
+                      <Text>{formatDate(report.resolvedAt)}</Text>
+                    </div>
+                  </>
+                )}
+              </Card>
+            </Timeline.Item>
+          ))}
+        </Timeline>
+      </div>
+    );
+  };
+
+  // Render Create Report Form
+  const renderCreateReportForm = () => {
+    return (
+      <Form
+        form={form}
+        layout="vertical"
+        onFinish={handleSubmit}
+        initialValues={{
+          report_type: "CLEANER_ISSUE",
+        }}
+      >
+        <Form.Item
+          name="report_type"
+          label="Loại báo cáo"
+          rules={[{ required: true, message: "Vui lòng chọn loại báo cáo" }]}
+        >
+          <Select placeholder="Chọn loại báo cáo">
+            <Option value="CLEANER_ISSUE">Vấn đề về người dọn dẹp</Option>
+            <Option value="SERVICE_QUALITY">Chất lượng dịch vụ</Option>
+            <Option value="PAYMENT_ISSUE">Vấn đề thanh toán</Option>
+            <Option value="SCHEDULING_ISSUE">Vấn đề lịch trình</Option>
+            <Option value="OTHER">Khác</Option>
+          </Select>
+        </Form.Item>
+
+        <Form.Item
+          name="description"
+          label="Mô tả vấn đề"
+          rules={[
+            { required: true, message: "Vui lòng nhập mô tả vấn đề" },
+            { min: 10, message: "Mô tả phải có ít nhất 10 ký tự" },
+          ]}
+        >
+          <TextArea
+            rows={6}
+            placeholder="Mô tả chi tiết vấn đề bạn gặp phải..."
+            maxLength={500}
+            showCount
+          />
+        </Form.Item>
+      </Form>
+    );
+  };
+
+  // Main modal render
+  return (
+    <Modal
+      title={
+        <div style={{ display: "flex", alignItems: "center" }}>
+          <ExclamationCircleOutlined
+            style={{ color: "#faad14", marginRight: 8 }}
+          />
+          {activeTab === "view" ? "Danh sách báo cáo" : "Tạo báo cáo mới"}
+        </div>
+      }
+      open={visible}
+      onCancel={onClose}
+      width={700}
+      footer={
+        activeTab === "view" ? (
+          <div style={{ display: "flex", justifyContent: "space-between" }}>
+            <Button onClick={onClose}>Đóng</Button>
+            <Button type="primary" onClick={() => setActiveTab("create")}>
+              Tạo báo cáo mới
+            </Button>
+          </div>
+        ) : (
+          <div style={{ display: "flex", justifyContent: "space-between" }}>
+            <Button onClick={() => setActiveTab("view")}>Quay lại</Button>
+            <Button
+              type="primary"
+              onClick={() => form.submit()}
+              loading={submitting}
+              icon={<SendOutlined />}
+            >
+              Gửi báo cáo
+            </Button>
+          </div>
+        )
+      }
+    >
+      {activeTab === "view" ? renderViewReportsTab() : renderCreateReportForm()}
+    </Modal>
+  );
+};
Index: ../FE/home-clean-fe/src/pages/Admin/ManageUser/Cleaner/CleanerDetails.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/Admin/ManageUser/Cleaner/CleanerDetails.jsx b/../FE/home-clean-fe/src/pages/Admin/ManageUser/Cleaner/CleanerDetails.jsx
new file mode 100644
--- /dev/null	(date 1743672482084)
+++ b/../FE/home-clean-fe/src/pages/Admin/ManageUser/Cleaner/CleanerDetails.jsx	(date 1743672482084)
@@ -0,0 +1,238 @@
+import React, { useEffect, useState } from "react";
+import {
+  Layout,
+  Typography,
+  Card,
+  Descriptions,
+  Button,
+  Space,
+  Avatar,
+  Divider,
+  Tabs,
+  Badge,
+} from "antd";
+import {
+  ArrowLeftOutlined,
+  UserOutlined,
+  CheckCircleOutlined,
+  CloseCircleOutlined,
+} from "@ant-design/icons";
+import { useParams, useNavigate } from "react-router-dom";
+import AppSidebar from "../../../../components/Admin/AppSidebar";
+import AppHeader from "../../../../components/Admin/AppHeader";
+
+const { Content } = Layout;
+const { Title, Text } = Typography;
+const { TabPane } = Tabs;
+
+const CleanerDetails = () => {
+  const { cleanerId } = useParams();
+  const navigate = useNavigate();
+  const [cleanerData, setCleanerData] = useState(null);
+  const [loading, setLoading] = useState(true);
+
+  useEffect(() => {
+    // In a real application, fetch cleaner data based on cleanerId from an API
+    // Simulating API call with setTimeout
+    setTimeout(() => {
+      setCleanerData({
+        profile_image_base64:
+          "iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAACs0lEQVR4Xu3Ssa0cQQwE0ctGKSrsy0ByqbLURn9gyDKeMes0uKjP9/v90/brdx83G7jZwM22Dz808MgGbjZws4GbbQYQ4GYDN9sMIMDNBm62GUCAmw3cbDOAADcbuNlmAAFuNnCzzQAC3GzgZpsBBLjZwM02Awhws4GbbQYQ4GYDN9sMIMDNBm62GUCAmw3cbDOAADcbuNlmAAFuNnCzzQAC3GzgZpsBBLjZwM02Awhws4GbbQYQ4GYDN9sMIMDNBm62GUCAmw3cbDOAADcbuNlmAAFuNnCzzQAC3GzgZpsBBLjZwM22HwngJ/BHNnBzAwMIcHMDAwhwcwMDCHBzAwMIcHMDAwhwcwMDCHBzAwMIcHMDAwhwcwMDCHBzAwMIcHMDAwhwcwMDCHBzAwMIcHMDAwhwcwMDCHBzAwMIcHMDAwhwcwMDCHBzAwMIcHMDAwhwcwMDCHBzAwMIcHMDAwhwcwMDCHBzgw+P1H4GcJwBHGcAxxnAcQZwnAEcZwDHGcBxBnCcARxnAMcZwHEGcJwBHGcAxxnAcQZwnAEcZwDHGcBxBnCcARxnAMcZwHErA5hHtXDzVfMmAwhw81XzJgMIcPNV8yYDCHDzVfMmAwhw81XzJgMIcPNV8yYDCHDzVfMmAwhw81XzJgMIcPNV8yYDCHDzVfMmAwhw81XzJgMIcPNV8yYDCHDzVfMmAwhw81XzJgMIcPNV8yYDCHDzVfMmAwhw81XzJgMIcPNV8yYDCHDzVfMmAwhw81XzJgMIcPNV8yYDCHDzVfMmAwhw81XzJgMIcPNV8yYDCHDzVfMmAwhw81XzJgMIcPNV8yYDCHDzVfOmNQHo/xnAcQZwnAEcZwDHGcBxBnCcARxnAMcZwHEGcJwBHGcAxxnAcQZwnAEcZwDHGcBxBnCcARxnAMcZwHEGcJwBHGcAx/0TwHzoHgM4zgCO+wuD+8BxNeZu7QAAAABJRU5ErkJggg==",
+        address: "",
+        created_at: "2025-04-01T15:12:09.094569",
+        account_status: null,
+        identity_number: "123456789123",
+        experience: "4y",
+        updated_at: "2025-04-01T15:12:09.094585",
+        phone: "0123456789",
+        identity_verified: false,
+        password_hash:
+          "$2a$10$WSNCjM.VRnWUv7aoODigVesp4gO2VZYlU0FRIkQVi/.uodgim0.3y",
+        name: "MạnhTT",
+        cleanerId: 1,
+        email: "manh@gmail.com",
+        age: 23,
+        status: true,
+      });
+      setLoading(false);
+    }, 500);
+  }, [cleanerId]);
+
+  const goBack = () => {
+    navigate("/admin/cleaners");
+  };
+
+  // Hàm định dạng ngày giờ
+  const formatDateTime = (dateTimeString) => {
+    const date = new Date(dateTimeString);
+    const formattedDate = date.toLocaleDateString("vi-VN");
+    const formattedTime = date.toLocaleTimeString("vi-VN");
+    return `${formattedDate} ${formattedTime}`;
+  };
+
+  if (loading) {
+    return (
+      <Layout style={{ minHeight: "1000px" }}>
+        <AppSidebar />
+        <Layout>
+          <AppHeader />
+          <Content
+            style={{
+              margin: "24px 16px",
+              padding: 24,
+              background: "#fff",
+              minHeight: 280,
+            }}
+          >
+            <div style={{ textAlign: "center", padding: "50px 0" }}>
+              <p>Đang tải dữ liệu...</p>
+            </div>
+          </Content>
+        </Layout>
+      </Layout>
+    );
+  }
+
+  return (
+    <Layout style={{ minHeight: "1000px" }}>
+      <AppSidebar />
+      <Layout>
+        <AppHeader />
+        <Content
+          style={{
+            margin: "24px 16px",
+            padding: 24,
+            background: "#fff",
+            minHeight: 280,
+          }}
+        >
+          <Space style={{ marginBottom: 16 }}>
+            <Button icon={<ArrowLeftOutlined />} onClick={goBack}>
+              Quay lại
+            </Button>
+            <Title level={3}>Chi tiết Cleaner</Title>
+          </Space>
+
+          <Card>
+            <div
+              style={{
+                display: "flex",
+                alignItems: "center",
+                marginBottom: 24,
+              }}
+            >
+              <Avatar
+                size={84}
+                src={
+                  cleanerData.profile_image_base64
+                    ? `data:image/png;base64,${cleanerData.profile_image_base64}`
+                    : null
+                }
+                icon={!cleanerData.profile_image_base64 && <UserOutlined />}
+                style={{ marginRight: 24 }}
+              />
+              <div>
+                <Title level={4}>{cleanerData.name}</Title>
+                <Space size="large">
+                  <Badge
+                    status={cleanerData.status ? "success" : "error"}
+                    text={
+                      cleanerData.status ? "Đang hoạt động" : "Không hoạt động"
+                    }
+                  />
+                  <Space>
+                    <Text>Xác minh CMND/CCCD:</Text>
+                    {cleanerData.identity_verified ? (
+                      <CheckCircleOutlined style={{ color: "green" }} />
+                    ) : (
+                      <CloseCircleOutlined style={{ color: "red" }} />
+                    )}
+                  </Space>
+                </Space>
+              </div>
+            </div>
+
+            <Divider />
+
+            <Tabs defaultActiveKey="basic">
+              <TabPane tab="Thông tin cơ bản" key="basic">
+                <Descriptions bordered column={1} size="middle">
+                  <Descriptions.Item label="Mã người dọn dẹp">
+                    {cleanerData.cleanerId}
+                  </Descriptions.Item>
+                  <Descriptions.Item label="Họ và tên">
+                    {cleanerData.name}
+                  </Descriptions.Item>
+                  <Descriptions.Item label="Số điện thoại">
+                    {cleanerData.phone}
+                  </Descriptions.Item>
+                  <Descriptions.Item label="Email">
+                    {cleanerData.email}
+                  </Descriptions.Item>
+                  <Descriptions.Item label="Tuổi">
+                    {cleanerData.age}
+                  </Descriptions.Item>
+                  <Descriptions.Item label="Kinh nghiệm">
+                    {cleanerData.experience}
+                  </Descriptions.Item>
+                  <Descriptions.Item label="Địa chỉ">
+                    {cleanerData.address || "Chưa cập nhật"}
+                  </Descriptions.Item>
+                </Descriptions>
+              </TabPane>
+              <TabPane tab="Thông tin xác thực" key="verification">
+                <Descriptions bordered column={1} size="middle">
+                  <Descriptions.Item label="CMND/CCCD">
+                    {cleanerData.identity_number}
+                  </Descriptions.Item>
+                  <Descriptions.Item label="Trạng thái xác minh">
+                    {cleanerData.identity_verified ? (
+                      <Badge status="success" text="Đã xác minh" />
+                    ) : (
+                      <Badge status="error" text="Chưa xác minh" />
+                    )}
+                  </Descriptions.Item>
+                </Descriptions>
+              </TabPane>
+              <TabPane tab="Thông tin tài khoản" key="account">
+                <Descriptions bordered column={1} size="middle">
+                  <Descriptions.Item label="Ngày tạo">
+                    {formatDateTime(cleanerData.created_at)}
+                  </Descriptions.Item>
+                  <Descriptions.Item label="Cập nhật lần cuối">
+                    {formatDateTime(cleanerData.updated_at)}
+                  </Descriptions.Item>
+                  <Descriptions.Item label="Trạng thái tài khoản">
+                    {cleanerData.account_status
+                      ? cleanerData.account_status
+                      : "Chưa xác định"}
+                  </Descriptions.Item>
+                </Descriptions>
+              </TabPane>
+            </Tabs>
+
+            <div
+              style={{
+                marginTop: 24,
+                display: "flex",
+                justifyContent: "flex-end",
+              }}
+            >
+              <Space>
+                {!cleanerData.identity_verified && (
+                  <Button type="primary" ghost>
+                    Xác minh CMND/CCCD
+                  </Button>
+                )}
+                {cleanerData.status && <Button danger>Vô hiệu hoá</Button>}
+                <Button type="primary">Chỉnh sửa</Button>
+              </Space>
+            </div>
+          </Card>
+        </Content>
+      </Layout>
+    </Layout>
+  );
+};
+
+export default CleanerDetails;
Index: ../FE/home-clean-fe/src/pages/Admin/MainDashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/Admin/MainDashboard.jsx b/../FE/home-clean-fe/src/pages/Admin/MainDashboard.jsx
new file mode 100644
--- /dev/null	(date 1743672482082)
+++ b/../FE/home-clean-fe/src/pages/Admin/MainDashboard.jsx	(date 1743672482082)
@@ -0,0 +1,38 @@
+import React from "react";
+import { Layout, Typography } from "antd";
+import AppSidebar from "../../components/Admin/AppSidebar";
+import AppHeader from "../../components/Admin/AppHeader";
+import StatCards from "../../components/Admin/StatCards";
+import SalesChart from "../../components/Admin/SalesChart";
+import DealsTable from "../../components/Admin/DealsTable";
+
+const { Content } = Layout;
+const { Title } = Typography;
+
+const MainDashboard = () => {
+  return (
+    <Layout style={{ minHeight: "100vh" }}>
+      <AppSidebar />
+      <Layout>
+        <AppHeader />
+        <Content
+          style={{
+            margin: "24px 16px",
+            padding: 24,
+            background: "#fff",
+            minHeight: 280,
+          }}
+        >
+          <Title level={3}>Dashboard</Title>
+          <div style={{ marginBottom: 24 }}>
+            <StatCards />
+          </div>
+          <SalesChart />
+          <DealsTable />
+        </Content>
+      </Layout>
+    </Layout>
+  );
+};
+
+export default MainDashboard;
Index: ../FE/home-clean-fe/src/pages/Admin/ManageUser/Owner/OwnerDetails.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/Admin/ManageUser/Owner/OwnerDetails.jsx b/../FE/home-clean-fe/src/pages/Admin/ManageUser/Owner/OwnerDetails.jsx
new file mode 100644
--- /dev/null	(date 1743672482085)
+++ b/../FE/home-clean-fe/src/pages/Admin/ManageUser/Owner/OwnerDetails.jsx	(date 1743672482085)
@@ -0,0 +1,160 @@
+import React, { useEffect, useState } from "react";
+import {
+  Layout,
+  Typography,
+  Card,
+  Descriptions,
+  Button,
+  Space,
+  Avatar,
+  Divider,
+} from "antd";
+import { ArrowLeftOutlined, UserOutlined } from "@ant-design/icons";
+import { useParams, useNavigate } from "react-router-dom";
+import AppSidebar from "../../../../components/Admin/AppSidebar";
+import AppHeader from "../../../../components/Admin/AppHeader";
+
+const { Content } = Layout;
+const { Title } = Typography;
+
+const OwnerDetails = () => {
+  const { customerId } = useParams();
+  const navigate = useNavigate();
+  const [ownerData, setOwnerData] = useState(null);
+  const [loading, setLoading] = useState(true);
+
+  useEffect(() => {
+    // In a real application, fetch owner data based on customerId from an API
+    // Simulating API call with setTimeout
+    setTimeout(() => {
+      setOwnerData({
+        created_at: "2025-04-01T15:16:26.249594",
+        phone: "0384244398",
+        is_deleted: false,
+        customerId: 1,
+        name: "Nguyễn Sơn",
+      });
+      setLoading(false);
+    }, 500);
+  }, [customerId]);
+
+  // Hàm định dạng ngày giờ
+  const formatDateTime = (dateTimeString) => {
+    const date = new Date(dateTimeString);
+    const formattedDate = date.toLocaleDateString("vi-VN");
+    const formattedTime = date.toLocaleTimeString("vi-VN");
+    return `${formattedDate} ${formattedTime}`;
+  };
+
+  const goBack = () => {
+    navigate("/admin/owners");
+  };
+
+  if (loading) {
+    return (
+      <Layout style={{ minHeight: "1000px" }}>
+        <AppSidebar />
+        <Layout>
+          <AppHeader />
+          <Content
+            style={{
+              margin: "24px 16px",
+              padding: 24,
+              background: "#fff",
+              minHeight: 280,
+            }}
+          >
+            <div style={{ textAlign: "center", padding: "50px 0" }}>
+              <p>Đang tải dữ liệu...</p>
+            </div>
+          </Content>
+        </Layout>
+      </Layout>
+    );
+  }
+
+  return (
+    <Layout style={{ minHeight: "1000px" }}>
+      <AppSidebar />
+      <Layout>
+        <AppHeader />
+        <Content
+          style={{
+            margin: "24px 16px",
+            padding: 24,
+            background: "#fff",
+            minHeight: 280,
+          }}
+        >
+          <Space style={{ marginBottom: 16 }}>
+            <Button icon={<ArrowLeftOutlined />} onClick={goBack}>
+              Quay lại
+            </Button>
+            <Title level={3}>Chi tiết Owner</Title>
+          </Space>
+
+          <Card>
+            <div
+              style={{
+                display: "flex",
+                alignItems: "center",
+                marginBottom: 24,
+              }}
+            >
+              <Avatar
+                size={64}
+                icon={<UserOutlined />}
+                style={{ marginRight: 24 }}
+              />
+              <div>
+                <Title level={4}>{ownerData.name}</Title>
+                <Typography.Text
+                  type={ownerData.is_deleted ? "danger" : "success"}
+                >
+                  {ownerData.is_deleted ? "Đã xoá" : "Đang hoạt động"}
+                </Typography.Text>
+              </div>
+            </div>
+
+            <Divider />
+
+            <Descriptions bordered column={1} size="middle">
+              <Descriptions.Item label="Mã khách hàng">
+                {ownerData.customerId}
+              </Descriptions.Item>
+              <Descriptions.Item label="Họ và tên">
+                {ownerData.name}
+              </Descriptions.Item>
+              <Descriptions.Item label="Số điện thoại">
+                {ownerData.phone}
+              </Descriptions.Item>
+              <Descriptions.Item label="Ngày tạo">
+                {formatDateTime(ownerData.created_at)}
+              </Descriptions.Item>
+              <Descriptions.Item label="Trạng thái">
+                {ownerData.is_deleted ? "Đã xoá" : "Đang hoạt động"}
+              </Descriptions.Item>
+            </Descriptions>
+
+            <div
+              style={{
+                marginTop: 24,
+                display: "flex",
+                justifyContent: "flex-end",
+              }}
+            >
+              <Space>
+                {!ownerData.is_deleted && (
+                  <Button danger>Xoá người dùng</Button>
+                )}
+                <Button type="primary">Chỉnh sửa</Button>
+              </Space>
+            </div>
+          </Card>
+        </Content>
+      </Layout>
+    </Layout>
+  );
+};
+
+export default OwnerDetails;
Index: ../FE/home-clean-fe/src/pages/Admin/ManageUser/Owner/OwnerList.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/Admin/ManageUser/Owner/OwnerList.jsx b/../FE/home-clean-fe/src/pages/Admin/ManageUser/Owner/OwnerList.jsx
new file mode 100644
--- /dev/null	(date 1743672482085)
+++ b/../FE/home-clean-fe/src/pages/Admin/ManageUser/Owner/OwnerList.jsx	(date 1743672482085)
@@ -0,0 +1,158 @@
+import React, { useState, useEffect } from "react";
+import { Layout, Typography, Table, Button, Input, Tag, message } from "antd";
+import { SearchOutlined, EyeOutlined } from "@ant-design/icons";
+import { useNavigate } from "react-router-dom";
+import AppSidebar from "../../../../components/Admin/AppSidebar";
+import AppHeader from "../../../../components/Admin/AppHeader";
+import axios from "axios";
+import { BASE_URL } from "../../../../utils/config";
+
+const { Content } = Layout;
+const { Title } = Typography;
+
+const OwnerList = () => {
+  const [searchText, setSearchText] = useState("");
+  const [owners, setOwners] = useState([]);
+  const [loading, setLoading] = useState(true);
+  const navigate = useNavigate();
+
+  useEffect(() => {
+    fetchOwners();
+  }, []);
+
+  const fetchOwners = async () => {
+    try {
+      setLoading(true);
+      const token = localStorage.getItem("token"); // Assuming you store token in localStorage
+
+      const response = await axios.get(`${BASE_URL}/admin/customers/all`, {
+        headers: {
+          Authorization: `Bearer ${token}`,
+          accept: "application/json",
+        },
+      });
+
+      setOwners(response.data);
+      setLoading(false);
+    } catch (error) {
+      message.error("Không thể tải dữ liệu. Vui lòng thử lại sau.");
+      setLoading(false);
+    }
+  };
+
+  // Hàm chuyển đổi chuỗi datetime thành Date object
+  const parseDate = (dateStr) => new Date(dateStr);
+
+  // Filter data based on search text before passing to Table
+  const filteredOwners = searchText
+    ? owners.filter(
+        (record) =>
+          record.name.toLowerCase().includes(searchText.toLowerCase()) ||
+          record.phone.includes(searchText)
+      )
+    : owners;
+
+  const columns = [
+    {
+      title: "ID",
+      dataIndex: "customerId",
+      key: "customerId",
+      sorter: (a, b) => a.customerId - b.customerId,
+    },
+    {
+      title: "Tên",
+      dataIndex: "name",
+      key: "name",
+      sorter: (a, b) => a.name.localeCompare(b.name),
+    },
+    {
+      title: "Số điện thoại",
+      dataIndex: "phone",
+      key: "phone",
+    },
+    {
+      title: "Ngày tạo",
+      dataIndex: "created_at",
+      key: "created_at",
+      render: (text) => parseDate(text).toLocaleDateString("vi-VN"),
+      sorter: (a, b) => parseDate(a.created_at) - parseDate(b.created_at),
+    },
+    {
+      title: "Trạng thái",
+      dataIndex: "is_deleted",
+      key: "is_deleted",
+      render: (is_deleted) => (
+        <Tag color={is_deleted ? "red" : "green"}>
+          {is_deleted ? "Đã xoá" : "Hoạt động"}
+        </Tag>
+      ),
+      filters: [
+        { text: "Hoạt động", value: false },
+        { text: "Đã xoá", value: true },
+      ],
+      onFilter: (value, record) => record.is_deleted === value,
+    },
+    {
+      title: "Hành động",
+      key: "action",
+      render: (_, record) => (
+        <Button
+          type="primary"
+          icon={<EyeOutlined />}
+          onClick={() => viewOwnerDetails(record.customerId)}
+        >
+          Chi tiết
+        </Button>
+      ),
+    },
+  ];
+
+  const viewOwnerDetails = (id) => {
+    navigate(`/admin/owners/${id}`);
+  };
+
+  return (
+    <Layout style={{ minHeight: "1000px" }}>
+      <AppSidebar />
+      <Layout>
+        <AppHeader />
+        <Content
+          style={{
+            margin: "24px 16px",
+            padding: 24,
+            background: "#fff",
+            minHeight: 280,
+          }}
+        >
+          <div
+            style={{
+              display: "flex",
+              justifyContent: "space-between",
+              marginBottom: 16,
+            }}
+          >
+            <Title level={3}>Danh sách Owner</Title>
+            <Input
+              placeholder="Tìm kiếm theo tên hoặc số điện thoại"
+              prefix={<SearchOutlined />}
+              style={{ width: 300 }}
+              value={searchText}
+              onChange={(e) => setSearchText(e.target.value)}
+            />
+          </div>
+
+          <Table
+            columns={columns}
+            dataSource={filteredOwners} // Using filtered data instead of all owners
+            rowKey="customerId"
+            pagination={{ pageSize: 10 }}
+            bordered
+            loading={loading}
+          />
+        </Content>
+      </Layout>
+    </Layout>
+  );
+};
+
+export default OwnerList;
Index: ../FE/home-clean-fe/src/pages/Admin/ManageUser/Cleaner/CleanerList.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/pages/Admin/ManageUser/Cleaner/CleanerList.jsx b/../FE/home-clean-fe/src/pages/Admin/ManageUser/Cleaner/CleanerList.jsx
new file mode 100644
--- /dev/null	(date 1743672482084)
+++ b/../FE/home-clean-fe/src/pages/Admin/ManageUser/Cleaner/CleanerList.jsx	(date 1743672482084)
@@ -0,0 +1,167 @@
+import React, { useState, useEffect } from "react";
+import { Layout, Typography, Table, Button, Input, Tag, message } from "antd";
+import { SearchOutlined, EyeOutlined } from "@ant-design/icons";
+import { useNavigate } from "react-router-dom";
+import AppSidebar from "../../../../components/Admin/AppSidebar";
+import AppHeader from "../../../../components/Admin/AppHeader";
+import axios from "axios";
+import { BASE_URL } from "../../../../utils/config";
+
+const { Content } = Layout;
+const { Title } = Typography;
+
+const CleanerList = () => {
+  const [searchText, setSearchText] = useState("");
+  const [cleaners, setCleaners] = useState([]);
+  const [loading, setLoading] = useState(false);
+  const navigate = useNavigate();
+
+  useEffect(() => {
+    fetchCleaners();
+  }, []);
+
+  const fetchCleaners = async () => {
+    try {
+      setLoading(true);
+      const token = localStorage.getItem("token"); // Assuming you store token in localStorage
+
+      const response = await axios.get(`${BASE_URL}/admin/cleaners/all`, {
+        headers: {
+          Authorization: `Bearer ${token}`,
+          accept: "application/json",
+        },
+      });
+
+      setCleaners(response.data);
+      setLoading(false);
+    } catch (error) {
+      message.error("Không thể tải dữ liệu. Vui lòng thử lại sau.");
+      setLoading(false);
+    }
+  };
+
+  // Hàm chuyển đổi chuỗi datetime thành Date object
+  const parseDate = (dateStr) => new Date(dateStr);
+
+  // Filter data based on search text before passing to Table
+  const filteredCleaners = searchText
+    ? cleaners.filter(
+        (record) =>
+          record.name.toLowerCase().includes(searchText.toLowerCase()) ||
+          record.phone.includes(searchText) ||
+          record.email.toLowerCase().includes(searchText.toLowerCase())
+      )
+    : cleaners;
+
+  const columns = [
+    {
+      title: "ID",
+      dataIndex: "cleanerId",
+      key: "cleanerId",
+      sorter: (a, b) => a.cleanerId - b.cleanerId,
+    },
+    {
+      title: "Tên",
+      dataIndex: "name",
+      key: "name",
+      sorter: (a, b) => a.name.localeCompare(b.name),
+      // Removed filteredValue and onFilter from here
+    },
+    {
+      title: "Số điện thoại",
+      dataIndex: "phone",
+      key: "phone",
+    },
+    {
+      title: "Email",
+      dataIndex: "email",
+      key: "email",
+    },
+    {
+      title: "Ngày tạo",
+      dataIndex: "created_at",
+      key: "created_at",
+      render: (text) => parseDate(text).toLocaleDateString("vi-VN"),
+      sorter: (a, b) => parseDate(a.created_at) - parseDate(b.created_at),
+    },
+    {
+      title: "Trạng thái",
+      dataIndex: "account_status",
+      key: "account_status",
+      render: (account_status) => {
+        let color = account_status === true ? "green" : "red";
+        let text =
+          account_status === true ? "Đang hoạt động" : "Không hoạt động";
+
+        return <Tag color={color}>{text}</Tag>;
+      },
+      filters: [
+        { text: "Đang hoạt động", value: true },
+        { text: "Không hoạt động", value: false },
+      ],
+      onFilter: (value, record) => record.account_status === value,
+    },
+    {
+      title: "Hành động",
+      key: "action",
+      render: (_, record) => (
+        <Button
+          type="primary"
+          icon={<EyeOutlined />}
+          onClick={() => viewCleanerDetails(record.cleanerId)}
+        >
+          Chi tiết
+        </Button>
+      ),
+    },
+  ];
+
+  const viewCleanerDetails = (id) => {
+    navigate(`/admin/cleaners/${id}`);
+  };
+
+  return (
+    <Layout style={{ minHeight: "1000px" }}>
+      <AppSidebar />
+      <Layout>
+        <AppHeader />
+        <Content
+          style={{
+            margin: "24px 16px",
+            padding: 24,
+            background: "#fff",
+            minHeight: 280,
+          }}
+        >
+          <div
+            style={{
+              display: "flex",
+              justifyContent: "space-between",
+              marginBottom: 16,
+            }}
+          >
+            <Title level={3}>Danh sách Cleaner</Title>
+            <Input
+              placeholder="Tìm kiếm theo tên, số điện thoại hoặc email"
+              prefix={<SearchOutlined />}
+              style={{ width: 300 }}
+              value={searchText}
+              onChange={(e) => setSearchText(e.target.value)}
+            />
+          </div>
+
+          <Table
+            columns={columns}
+            dataSource={filteredCleaners} // Using filtered data here
+            rowKey="cleanerId"
+            loading={loading}
+            pagination={{ pageSize: 10 }}
+            bordered
+          />
+        </Content>
+      </Layout>
+    </Layout>
+  );
+};
+
+export default CleanerList;
Index: ../FE/home-clean-fe/src/services/owner/ReportAPI.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../FE/home-clean-fe/src/services/owner/ReportAPI.js b/../FE/home-clean-fe/src/services/owner/ReportAPI.js
new file mode 100644
--- /dev/null	(date 1743672482092)
+++ b/../FE/home-clean-fe/src/services/owner/ReportAPI.js	(date 1743672482092)
@@ -0,0 +1,96 @@
+import { BASE_URL } from "../../utils/config";
+// Get all reports
+export async function getAllReports() {
+    try {
+        const token = localStorage.getItem("token");
+        const response = await fetch(`${BASE_URL}/reports/get-all-report`, {
+            headers: {
+                "Authorization": `Bearer ${token}`,
+                "Content-Type": "application/json",
+            },
+        });
+
+        if (!response.ok) {
+            throw new Error('Failed to fetch reports');
+        }
+
+        return await response.json();
+    } catch (error) {
+        console.error('Error fetching reports:', error);
+        throw error;
+    }
+}
+
+// Create a new report
+export async function createReport(jobId, reportData) {
+    try {
+        const token = localStorage.getItem("token");
+        const { report_type, description, status } = reportData;
+        
+        const url = new URL(`${BASE_URL}/reports/${jobId}/create-report`);
+        url.searchParams.append('report_type', report_type);
+        url.searchParams.append('description', description);
+        url.searchParams.append('status', status);
+        
+        const response = await fetch(url.toString(), {
+            method: 'POST',
+            headers: {
+                "Authorization": `Bearer ${token}`,
+                "Content-Type": "application/json",
+            },
+        });
+
+        if (!response.ok) {
+            throw new Error('Failed to create report');
+        }
+
+        return await response.json();
+    } catch (error) {
+        console.error('Error creating report:', error);
+        throw error;
+    }
+}
+
+// Update a report
+export async function updateReport(reportId, updateData) {
+    try {
+        const token = localStorage.getItem("token");
+        const { status, resolvedAt, adminResponse } = updateData;
+        
+        const url = new URL(`${BASE_URL}/reports/${reportId}/update_report`);
+        url.searchParams.append('status', status);
+        url.searchParams.append('resolvedAt', resolvedAt);
+        url.searchParams.append('adminResponse', adminResponse);
+        
+        const response = await fetch(url.toString(), {
+            method: 'PUT',
+            headers: {
+                "Authorization": `Bearer ${token}`,
+                "Content-Type": "application/json",
+            },
+        });
+
+        if (!response.ok) {
+            throw new Error('Failed to update report');
+        }
+
+        return await response.json();
+    } catch (error) {
+        console.error('Error updating report:', error);
+        throw error;
+    }
+}
+
+// Get report by job ID
+export async function getReportByJobId(jobId) {
+    try {
+        // First fetch all reports
+        const allReports = await getAllReports();
+        
+        // Filter reports by jobId
+        return allReports.filter(report => report.jobId === jobId);
+    } catch (error) {
+        console.error('Error fetching report by job ID:', error);
+        throw error;
+    }
+}
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/services/CustomerAuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.services;\n\nimport com.example.homecleanapi.dtos.ForgotPasswordRequest;\nimport com.example.homecleanapi.dtos.LoginRequest;\nimport com.example.homecleanapi.dtos.CustomerRegisterRequest;\nimport com.example.homecleanapi.models.Customers;\nimport com.example.homecleanapi.repositories.CustomerRepository;\nimport com.example.homecleanapi.utils.JwtUtils;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\n@Service\npublic class CustomerAuthService {\n\n    private final CustomerRepository customerRepository;\n    private final PasswordEncoder passwordEncoder;\n    private final JwtUtils jwtUtils;\n\n    public CustomerAuthService(CustomerRepository customerRepository, PasswordEncoder passwordEncoder, JwtUtils jwtUtils) {\n        this.customerRepository = customerRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.jwtUtils = jwtUtils;\n    }\n\n    public ResponseEntity<Map<String, Object>> customerRegister(CustomerRegisterRequest request) {\n        Map<String, Object> response = new HashMap<>();\n\n        if (request == null || request.getPhone() == null || request.getPassword() == null || request.getName() == null) {\n            response.put(\"message\", \"Thông tin đăng ký không hợp lệ!\");\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\n        }\n\n        if (customerRepository.existsByPhone(request.getPhone())) {\n            response.put(\"message\", \"Số điện thoại đã tồn tại!\");\n            return ResponseEntity.status(HttpStatus.CONFLICT).body(response);\n        }\n\n        Customers customer = new Customers();\n        customer.setPhone(request.getPhone());\n        customer.setPassword_hash(passwordEncoder.encode(request.getPassword()));\n        customer.setFull_name(request.getName());\n//    customer.setRole(\"USER\"); // Kiểm tra lại nếu role là enum hoặc bảng riêng\n\n        customerRepository.save(customer);\n\n        response.put(\"message\", \"Đăng ký thành công!\");\n        response.put(\"customerId\", customer.getId());\n        response.put(\"phone\", customer.getPhone());\n        response.put(\"name\", customer.getFull_name());\n        response.put(\"created_at\", customer.getCreated_at());\n        return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n\n\n    public ResponseEntity<Map<String, Object>> customerLogin(LoginRequest request) {\n        Customers customer = customerRepository.findByPhone(request.getPhone());\n\n        Map<String, Object> response = new HashMap<>();\n\n        if (customer == null) {\n            response.put(\"message\", \"Số điện thoại không tồn tại!\");\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\n        }\n\n        if (!passwordEncoder.matches(request.getPassword(), customer.getPassword_hash())) {\n            response.put(\"message\", \"Sai mật khẩu!\");\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);\n        }\n\n        String token = jwtUtils.generateToken(customer.getPhone(), customer.getFull_name(), customer.getId().toString(), \"Customer\");\n\n        response.put(\"token\", token);\n        response.put(\"phone\", customer.getPhone());\n        response.put(\"customerId\", customer.getId());\n        response.put(\"name\", customer.getFull_name());\n\n        return ResponseEntity.ok(response);\n    }\n\n    public ResponseEntity<Map<String, Object>> customerForgotPassword(ForgotPasswordRequest request) {\n        Customers customer = customerRepository.findByPhone(request.getPhone());\n\n        Map<String, Object> response = new HashMap<>();\n\n        if (customer == null) {\n            response.put(\"message\", \"Số điện thoại không tồn tại!\");\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\n        }\n\n        String newPassword = UUID.randomUUID().toString().substring(0, 8);\n        customer.setPassword_hash(passwordEncoder.encode(newPassword));\n        customerRepository.save(customer);\n\n        // Gửi mật khẩu mới qua SMS (giả lập)\n        System.out.println(\"Gửi mật khẩu mới: \" + newPassword + \" đến số điện thoại: \" + request.getPhone());\n\n        response.put(\"message\", \"Mật khẩu mới đã được gửi!\");\n        response.put(\"phone\", request.getPhone());\n        response.put(\"newPassword\", newPassword); // Chỉ hiển thị trong môi trường phát triển, có thể ẩn trong production.\n        return ResponseEntity.ok(response);\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/services/CustomerAuthService.java b/src/main/java/com/example/homecleanapi/services/CustomerAuthService.java
--- a/src/main/java/com/example/homecleanapi/services/CustomerAuthService.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/services/CustomerAuthService.java	(date 1743672482138)
@@ -1,13 +1,12 @@
 package com.example.homecleanapi.services;
 
-import com.example.homecleanapi.dtos.ForgotPasswordRequest;
-import com.example.homecleanapi.dtos.LoginRequest;
-import com.example.homecleanapi.dtos.CustomerRegisterRequest;
+import com.example.homecleanapi.dtos.*;
 import com.example.homecleanapi.models.Customers;
 import com.example.homecleanapi.repositories.CustomerRepository;
 import com.example.homecleanapi.utils.JwtUtils;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.mail.MailSender;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Service;
 
@@ -21,11 +20,13 @@
     private final CustomerRepository customerRepository;
     private final PasswordEncoder passwordEncoder;
     private final JwtUtils jwtUtils;
+    private final EmailService emailService;
 
-    public CustomerAuthService(CustomerRepository customerRepository, PasswordEncoder passwordEncoder, JwtUtils jwtUtils) {
+    public CustomerAuthService(CustomerRepository customerRepository, PasswordEncoder passwordEncoder, JwtUtils jwtUtils, EmailService emailService) {
         this.customerRepository = customerRepository;
         this.passwordEncoder = passwordEncoder;
         this.jwtUtils = jwtUtils;
+        this.emailService = emailService;
     }
 
     public ResponseEntity<Map<String, Object>> customerRegister(CustomerRegisterRequest request) {
@@ -73,18 +74,21 @@
             return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
         }
 
+        // Generate JWT token for the customer
         String token = jwtUtils.generateToken(customer.getPhone(), customer.getFull_name(), customer.getId().toString(), "Customer");
 
+        // Add role in the response
         response.put("token", token);
         response.put("phone", customer.getPhone());
         response.put("customerId", customer.getId());
         response.put("name", customer.getFull_name());
+        response.put("role", "Customer");
 
         return ResponseEntity.ok(response);
     }
 
-    public ResponseEntity<Map<String, Object>> customerForgotPassword(ForgotPasswordRequest request) {
-        Customers customer = customerRepository.findByPhone(request.getPhone());
+    public ResponseEntity<Map<String, Object>> customerForgotPassword(ForgotPasswordRequest request, Integer customerId) {
+        Customers customer = customerRepository.findCustomersById(customerId);
 
         Map<String, Object> response = new HashMap<>();
 
@@ -96,14 +100,31 @@
         String newPassword = UUID.randomUUID().toString().substring(0, 8);
         customer.setPassword_hash(passwordEncoder.encode(newPassword));
         customerRepository.save(customer);
+        String subject = "Password Reset Request";
+        String text = "<p>Your new password is: <strong>" + newPassword + "</strong></p>"
+                + "<p>Please change it after logging in.</p>";
+        emailService.sendEmail(request.getEmail(), subject, text, true);
 
-        // Gửi mật khẩu mới qua SMS (giả lập)
-        System.out.println("Gửi mật khẩu mới: " + newPassword + " đến số điện thoại: " + request.getPhone());
+        System.out.println("Gửi mật khẩu mới: " + newPassword + " đến số điện thoại: " + request.getEmail());
 
         response.put("message", "Mật khẩu mới đã được gửi!");
-        response.put("phone", request.getPhone());
-        response.put("newPassword", newPassword); // Chỉ hiển thị trong môi trường phát triển, có thể ẩn trong production.
+        response.put("newPassword", newPassword);
         return ResponseEntity.ok(response);
     }
 
+    public ResponseEntity<Map<String, String>> customerChangePassword(ChangePasswordRequest request, Integer customerId) {
+        Customers customer = customerRepository.findCustomersById(customerId);
+        if (customer == null) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("message", "Khách hàng không tồn tại"));
+        }
+
+        if (!passwordEncoder.matches(request.getOldPassword(), customer.getPassword_hash())) {
+            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("message", "Mật khẩu cũ không chính xác"));
+        }
+
+        customer.setPassword_hash(passwordEncoder.encode(request.getNewPassword()));
+        customerRepository.save(customer);
+
+        return ResponseEntity.ok(Map.of("message", "Mật khẩu đã được cập nhật thành công"));
+    }
 }
\ No newline at end of file
Index: src/main/java/com/example/homecleanapi/services/CustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.homecleanapi.services;\n\nimport com.example.homecleanapi.dtos.CustomerAddressesDTO;\nimport com.example.homecleanapi.dtos.CustomerProfileRequest;\nimport com.example.homecleanapi.dtos.EmployeeLocationsDTO;\nimport com.example.homecleanapi.models.CustomerAddresses;\nimport com.example.homecleanapi.models.Customers;\nimport com.example.homecleanapi.models.Employee;\nimport com.example.homecleanapi.models.EmployeeLocations;\nimport com.example.homecleanapi.repositories.CustomerAddressRepository;\nimport com.example.homecleanapi.repositories.CustomerRepository;\n\nimport com.example.homecleanapi.utils.ConvertAddressToLatLong;\nimport org.hibernate.jdbc.Expectation;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.bind.annotation.PathVariable;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Service\npublic class CustomerService {\n\n    private final ConvertAddressToLatLong convertAddressToLatLong;\n    private CustomerRepository customerRepository;\n    private CustomerAddressRepository customerAddressRepository;\n\n    public CustomerService(CustomerRepository customerRepository, CustomerAddressRepository customerAddressRepository, ConvertAddressToLatLong convertAddressToLatLong) {\n        this.customerRepository = customerRepository;\n        this.customerAddressRepository = customerAddressRepository;\n        this.convertAddressToLatLong = convertAddressToLatLong;\n    }\n\n    // Xem thông tin profile của khách hàng\n    public ResponseEntity<Map<String, Object>> getProfile(Integer customer_id) {\n        Map<String, Object> response = new HashMap<>();\n\n        Customers customer = customerRepository.findById(customer_id);\n        if (customer == null) {\n            response.put(\"message\", \"Khách hàng không tồn tại!\");\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);\n        }\n\n        response.put(\"phone\", customer.getPhone());\n        response.put(\"name\", customer.getFull_name());\n        response.put(\"created_at\", customer.getCreated_at());\n        return ResponseEntity.ok(response);\n    }\n\n    // Cập nhật thông tin profile của khách hàng\n    public ResponseEntity<Map<String, Object>> updateProfile(Integer customer_id, CustomerProfileRequest request) {\n        Map<String, Object> response = new HashMap<>();\n\n        \n        if (request.getFullName() == null || request.getFullName().isEmpty()) {\n            response.put(\"message\", \"Tên đầy đủ không được để trống!\");\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\n        }\n\n        \n        Customers customer = customerRepository.findById(customer_id);\n        if (customer == null) {\n            response.put(\"message\", \"Khách hàng không tồn tại!\");\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);\n        }\n\n        \n        customer.setFull_name(request.getFullName());\n\n        customerRepository.save(customer);  \n\n        response.put(\"message\", \"Cập nhật thông tin profile thành công!\");\n        response.put(\"phone\", customer.getPhone());\n        response.put(\"name\", customer.getFull_name());\n        return ResponseEntity.ok(response);\n    }\n\n    public ResponseEntity<Map<String, Object>> addAddress(CustomerAddressesDTO request, @PathVariable Integer customer_id) throws IOException {\n        Map<String, Object> response = new HashMap<>();\n\n        Customers customers = customerRepository.findById(customer_id);\n        if (customers == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);\n        }\n\n        List<CustomerAddresses> customerAddresses = customerAddressRepository.findCustomerAddressesByCustomer_Id(customers.getId());\n\n        // Kiểm tra xem có địa chỉ nào có is_current = true không\n        boolean hasCurrentAddress = customerAddresses.stream().anyMatch(CustomerAddresses::isIs_current);\n\n        // Tạo địa chỉ mới\n        CustomerAddresses newAddress = new CustomerAddresses();\n        newAddress.setCustomer(customers);\n        newAddress.setAddress(request.getAddress());\n        String data = convertAddressToLatLong.convertAddressToLatLong(request.getAddress());\n        JSONObject jsonObject = new JSONObject(data);\n\n        JSONArray resultsArray = jsonObject.getJSONArray(\"results\");\n        if (!resultsArray.isEmpty()) {\n            JSONObject firstResult = resultsArray.getJSONObject(0);\n            JSONObject geometry = firstResult.getJSONObject(\"geometry\");\n            JSONObject location = geometry.getJSONObject(\"location\");\n            double lat = location.getDouble(\"lat\");\n            double lng = location.getDouble(\"lng\");\n            newAddress.setLatitude(lat);\n            newAddress.setLongitude(lng);\n        } else {\n            System.out.println(\"Không tìm thấy kết quả trong JSON!\");\n        }\n\n        // Nếu chưa có địa chỉ nào, set is_current = true, ngược lại set false\n        newAddress.setIs_current(customerAddresses.isEmpty());\n\n        customerAddressRepository.save(newAddress);\n        response.put(\"information\", newAddress);\n        return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n\n    public ResponseEntity<Map<String, Object>> updateCustomerAddress(CustomerAddressesDTO request, @PathVariable int employeeId) throws IOException {\n        Map<String, Object> response = new HashMap<>();\n\n        // Tìm employee từ database theo ID\n        Customers customers = customerRepository.findById(employeeId);\n//                .orElseThrow(() -> new RuntimeException(\"Employee not found\"));\n\n        // Tìm địa chỉ hiện tại của employee\n        List<CustomerAddresses> customerAddresses = customerAddressRepository.findCustomerAddressesByCustomer_Id(customers.getId());\n\n        // Nếu không có địa chỉ nào, trả về thông báo lỗi\n        if (customerAddresses.isEmpty()) {\n            throw new RuntimeException(\"No existing address found for this employee\");\n        }\n\n        // Tìm địa chỉ đầu tiên của employee (giả sử chỉ có một địa chỉ hiện tại)\n        CustomerAddresses existingLocation = customerAddresses.get(0);\n\n        // Cập nhật các trường thông tin theo input từ request (JSON)\n        existingLocation.setAddress(request.getAddress());\n        String data = convertAddressToLatLong.convertAddressToLatLong(request.getAddress());\n        JSONObject jsonObject = new JSONObject(data);\n\n        JSONArray resultsArray = jsonObject.getJSONArray(\"results\");\n        if (!resultsArray.isEmpty()) {\n            JSONObject firstResult = resultsArray.getJSONObject(0);\n            JSONObject geometry = firstResult.getJSONObject(\"geometry\");\n            JSONObject location = geometry.getJSONObject(\"location\");\n            double lat = location.getDouble(\"lat\");\n            double lng = location.getDouble(\"lng\");\n            existingLocation.setLatitude(lat);\n            existingLocation.setLongitude(lng);\n        } else {\n            System.out.println(\"Không tìm thấy kết quả trong JSON!\");\n        }\n        existingLocation.setIs_current(false); // Đánh dấu địa chỉ này là hiện tại\n\n        // Lưu địa chỉ đã được cập nhật\n        customerAddressRepository.save(existingLocation);\n\n        response.put(\"status\", \"success\");\n        response.put(\"message\", \"Employee address successfully updated\");\n        return ResponseEntity.status(HttpStatus.OK).body(response);\n    }\n\n    // Xóa địa chỉ của employee theo locationId\n    public ResponseEntity<Map<String, Object>> deleteCustomerAddress(int locationId) {\n        Map<String, Object> response = new HashMap<>();\n\n        // Kiểm tra xem địa chỉ có tồn tại không\n        CustomerAddresses existingLocation = customerAddressRepository.findById(locationId)\n                .orElseThrow(() -> new RuntimeException(\"Location not found\"));\n\n        // Nếu địa chỉ là is_current = true, không cho phép xóa\n        if (existingLocation.isIs_current()) {\n            response.put(\"status\", \"error\");\n            response.put(\"message\", \"Cannot delete current address\");\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\n        }\n\n        // Xóa địa chỉ\n        customerAddressRepository.delete(existingLocation);\n\n        response.put(\"status\", \"success\");\n        response.put(\"message\", \"Employee address successfully deleted\");\n        return ResponseEntity.status(HttpStatus.OK).body(response);\n    }\n\n    // Lấy tất cả địa chỉ của employee theo employeeId\n    public ResponseEntity<Map<String, Object>> getAllCusomterAddresses(@PathVariable int employeeId) {\n        Map<String, Object> response = new HashMap<>();\n\n        // Kiểm tra xem employee có tồn tại không\n        if (!customerAddressRepository.existsById(employeeId)) {\n            response.put(\"message\", \"Employee not found\");\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);\n        }\n\n        // Lấy danh sách địa chỉ của employee\n        List<Map<String, Object>> addresses = customerAddressRepository.findCustomerAddressesByCustomer_Id(employeeId)\n                .stream()\n                .map(location -> {\n                    Map<String, Object> addressMap = new HashMap<>();\n                    addressMap.put(\"address\", location.getAddress());\n                    addressMap.put(\"is_current\", location.isIs_current());\n                    return addressMap;\n                })\n                .collect(Collectors.toList());\n\n        response.put(\"data\", addresses);\n        return ResponseEntity.ok(response);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/homecleanapi/services/CustomerService.java b/src/main/java/com/example/homecleanapi/services/CustomerService.java
--- a/src/main/java/com/example/homecleanapi/services/CustomerService.java	(revision a23dff11207e9614be8aa47075de863850fad34b)
+++ b/src/main/java/com/example/homecleanapi/services/CustomerService.java	(date 1743672482138)
@@ -32,20 +32,22 @@
 public class CustomerService {
 
     private final ConvertAddressToLatLong convertAddressToLatLong;
-    private CustomerRepository customerRepository;
-    private CustomerAddressRepository customerAddressRepository;
+    private final CustomerAuthService customerAuthService;
+    private final CustomerRepository customerRepository;
+    private final CustomerAddressRepository customerAddressRepository;
 
-    public CustomerService(CustomerRepository customerRepository, CustomerAddressRepository customerAddressRepository, ConvertAddressToLatLong convertAddressToLatLong) {
+    public CustomerService(CustomerRepository customerRepository, CustomerAddressRepository customerAddressRepository, ConvertAddressToLatLong convertAddressToLatLong, CustomerAuthService customerAuthService) {
         this.customerRepository = customerRepository;
         this.customerAddressRepository = customerAddressRepository;
         this.convertAddressToLatLong = convertAddressToLatLong;
+        this.customerAuthService = customerAuthService;
     }
 
     // Xem thông tin profile của khách hàng
-    public ResponseEntity<Map<String, Object>> getProfile(Integer customer_id) {
+    public ResponseEntity<Map<String, Object>> getProfile(Long customer_id) {
         Map<String, Object> response = new HashMap<>();
 
-        Customers customer = customerRepository.findById(customer_id);
+        Customers customer = customerRepository.findById(customer_id).orElseThrow(() -> new RuntimeException("Customer not found"));
         if (customer == null) {
             response.put("message", "Khách hàng không tồn tại!");
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
@@ -58,7 +60,7 @@
     }
 
     // Cập nhật thông tin profile của khách hàng
-    public ResponseEntity<Map<String, Object>> updateProfile(Integer customer_id, CustomerProfileRequest request) {
+    public ResponseEntity<Map<String, Object>> updateProfile(Long customer_id, CustomerProfileRequest request) {
         Map<String, Object> response = new HashMap<>();
 
         
@@ -67,8 +69,8 @@
             return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
         }
 
-        
-        Customers customer = customerRepository.findById(customer_id);
+
+        Customers customer = customerRepository.findById(customer_id).orElseThrow(() -> new RuntimeException("Customer not found"));
         if (customer == null) {
             response.put("message", "Khách hàng không tồn tại!");
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
@@ -85,22 +87,22 @@
         return ResponseEntity.ok(response);
     }
 
-    public ResponseEntity<Map<String, Object>> addAddress(CustomerAddressesDTO request, @PathVariable Integer customer_id) throws IOException {
+    public ResponseEntity<Map<String, Object>> addAddress(CustomerAddressesDTO request, @PathVariable Long customer_id) throws IOException {
         Map<String, Object> response = new HashMap<>();
 
-        Customers customers = customerRepository.findById(customer_id);
-        if (customers == null) {
+        Customers customer = customerRepository.findById(customer_id).orElseThrow(() -> new RuntimeException("Customer not found"));
+        if (customer == null) {
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
         }
 
-        List<CustomerAddresses> customerAddresses = customerAddressRepository.findCustomerAddressesByCustomer_Id(customers.getId());
+        List<CustomerAddresses> customerAddresses = customerAddressRepository.findCustomerAddressesByCustomer_Id(customer.getId());
 
         // Kiểm tra xem có địa chỉ nào có is_current = true không
         boolean hasCurrentAddress = customerAddresses.stream().anyMatch(CustomerAddresses::isIs_current);
 
         // Tạo địa chỉ mới
         CustomerAddresses newAddress = new CustomerAddresses();
-        newAddress.setCustomer(customers);
+        newAddress.setCustomer(customer);
         newAddress.setAddress(request.getAddress());
         String data = convertAddressToLatLong.convertAddressToLatLong(request.getAddress());
         JSONObject jsonObject = new JSONObject(data);
@@ -126,25 +128,18 @@
         return ResponseEntity.status(HttpStatus.CREATED).body(response);
     }
 
-    public ResponseEntity<Map<String, Object>> updateCustomerAddress(CustomerAddressesDTO request, @PathVariable int employeeId) throws IOException {
+    public ResponseEntity<Map<String, Object>> updateCustomerAddress(CustomerAddressesDTO request, Long customerId, Integer addressId) throws IOException {
         Map<String, Object> response = new HashMap<>();
 
         // Tìm employee từ database theo ID
-        Customers customers = customerRepository.findById(employeeId);
-//                .orElseThrow(() -> new RuntimeException("Employee not found"));
-
-        // Tìm địa chỉ hiện tại của employee
-        List<CustomerAddresses> customerAddresses = customerAddressRepository.findCustomerAddressesByCustomer_Id(customers.getId());
+        Customers customers = customerRepository.findById(customerId).orElseThrow(() -> new RuntimeException("Customer not found"));
 
-        // Nếu không có địa chỉ nào, trả về thông báo lỗi
-        if (customerAddresses.isEmpty()) {
-            throw new RuntimeException("No existing address found for this employee");
+        CustomerAddresses existingLocation = customerAddressRepository.findCustomerAddressesById(addressId);
+        if (existingLocation == null) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
         }
-
-        // Tìm địa chỉ đầu tiên của employee (giả sử chỉ có một địa chỉ hiện tại)
-        CustomerAddresses existingLocation = customerAddresses.get(0);
 
-        // Cập nhật các trường thông tin theo input từ request (JSON)
+       // Cập nhật các trường thông tin theo input từ request (JSON)
         existingLocation.setAddress(request.getAddress());
         String data = convertAddressToLatLong.convertAddressToLatLong(request.getAddress());
         JSONObject jsonObject = new JSONObject(data);
@@ -161,7 +156,7 @@
         } else {
             System.out.println("Không tìm thấy kết quả trong JSON!");
         }
-        existingLocation.setIs_current(false); // Đánh dấu địa chỉ này là hiện tại
+//        existingLocation.setIs_current(false);
 
         // Lưu địa chỉ đã được cập nhật
         customerAddressRepository.save(existingLocation);
@@ -172,7 +167,7 @@
     }
 
     // Xóa địa chỉ của employee theo locationId
-    public ResponseEntity<Map<String, Object>> deleteCustomerAddress(int locationId) {
+    public ResponseEntity<Map<String, Object>> deleteCustomerAddress(Integer locationId) {
         Map<String, Object> response = new HashMap<>();
 
         // Kiểm tra xem địa chỉ có tồn tại không
@@ -195,20 +190,21 @@
     }
 
     // Lấy tất cả địa chỉ của employee theo employeeId
-    public ResponseEntity<Map<String, Object>> getAllCusomterAddresses(@PathVariable int employeeId) {
+    public ResponseEntity<Map<String, Object>> getAllCustomerAddresses(Long customer_id) {
         Map<String, Object> response = new HashMap<>();
 
         // Kiểm tra xem employee có tồn tại không
-        if (!customerAddressRepository.existsById(employeeId)) {
-            response.put("message", "Employee not found");
+        if (!customerRepository.existsById(customer_id)) {
+            response.put("message", "Customer not found");
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
         }
 
         // Lấy danh sách địa chỉ của employee
-        List<Map<String, Object>> addresses = customerAddressRepository.findCustomerAddressesByCustomer_Id(employeeId)
+        List<Map<String, Object>> addresses = customerAddressRepository.findCustomerAddressesByCustomer_Id(Math.toIntExact(customer_id))
                 .stream()
                 .map(location -> {
                     Map<String, Object> addressMap = new HashMap<>();
+                    addressMap.put("id", location.getId());
                     addressMap.put("address", location.getAddress());
                     addressMap.put("is_current", location.isIs_current());
                     return addressMap;
@@ -218,4 +214,20 @@
         response.put("data", addresses);
         return ResponseEntity.ok(response);
     }
+
+    // Delete account
+    public ResponseEntity<Map<String, Object>> deleteCustomerAccount(@PathVariable Long customerId) {
+        Map<String, Object> response = new HashMap<>();
+        if (!customerAddressRepository.existsById(Math.toIntExact(customerId))) {
+            response.put("message", "Employee not found");
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
+        }
+
+        Customers customer = customerRepository.findById(customerId).orElseThrow(() -> new RuntimeException("Customer not found"));
+
+        customer.setIs_deleted(true);
+        customerRepository.save(customer);
+        response.put("status", "Delete customer successfully");
+        return ResponseEntity.status(HttpStatus.OK).body(response);
+    }
 }
\ No newline at end of file
